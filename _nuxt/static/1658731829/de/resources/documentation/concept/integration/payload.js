__NUXT_JSONP__("/de/resources/documentation/concept/integration", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X){return {data:[{article:{slug:"integration",description:"Wie können die Integrationsartefakte oder Services aus den Prozessen heraus aufgerufen werden?",title:E,category:f,categoryIcon:g,position:i,toc:[{id:F,depth:i,text:G},{id:H,depth:i,text:I},{id:J,depth:i,text:K}],body:{type:"root",children:[{type:b,tag:h,props:{},children:[{type:a,value:"Eine Basis Funktionalität von DigiWF ist es, die Prozesse mit der Backend Infrastruktur zu verbinden. Hierbei ist es\nzweitrangig, wo die Anwendungen liegen, die in einem Workflow verwendet werden sollen. Sie können sowohl on prem\ngehostet werden, als auch in der Cloud laufen. Wichtig ist, dass sie eine Schnittstelle haben - bzw. wenn sie keine\nhaben, kann die Anwendung immer noch über einen RPA Dienst angebunden werden."}]},{type:a,value:c},{type:b,tag:j,props:{id:F},children:[{type:b,tag:e,props:{href:"#die-digiwf-integrationsarchitektur",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:q,props:{alt:"Es wird die Verbindung zwischen DigiWF Core, dem Event Bus und dem Integrationslayer mit diversen \nIntegrations Services (z.B. S3, Mail, LDAP, usw.) gezeigt.",contain:r,"max-width":s,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fdigiwf_integration_architecture.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fpreview_digiwf_integration_architecture.png"},children:[]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:"High Level Integrations Architektur"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Ganz abstrakt haben wir im "},{type:b,tag:d,props:{},children:[{type:a,value:"Application Integration Layer"}]},{type:a,value:" eine Sammlung von Services, die mit dem "},{type:b,tag:d,props:{},children:[{type:a,value:L}]},{type:a,value:"\nverbunden sind. Dabei ist es erst einmal egal, wo diese Services laufen, bzw. in welcher Technologie sie\nimplementiert sind. Wichtig ist, dass sie mit dem "},{type:b,tag:d,props:{},children:[{type:a,value:L}]},{type:a,value:" kommunizieren können. Die \"Art\" der Services ist auch\nnicht auf eine Verbindung zwischen der Plattform und einem bereits bestehenden System beschränkt. Hier können auch\ndiverse Microservices direkt angebunden werden."}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Im "},{type:b,tag:d,props:{},children:[{type:a,value:"run"}]},{type:a,value:" weiß auch der "},{type:b,tag:d,props:{},children:[{type:a,value:"Business Process Layer"}]},{type:a,value:" (DigiWF Core) nichts von irgend einem Integrations Service. Die\nbeiden sind tatsächlich lose gekoppelt. Im "},{type:b,tag:d,props:{},children:[{type:a,value:"build"}]},{type:a,value:" dagegen müssen die Services, bzw. die Service Operationen, die\nman aus einem Prozess heraus aufrufen will sehr wohl bekannt sein. Die Verbindung passiert hier durch ein "},{type:b,tag:d,props:{},children:[{type:a,value:"Element  Template"}]},{type:a,value:M},{type:b,tag:u,props:{id:"fnref-1"},children:[{type:b,tag:e,props:{href:"#fn-1",className:[v]},children:[{type:a,value:"1"}]}]},{type:a,value:". Im Prinzip ist solch ein Template ein Input \u002F Output Mapping. D.h. Die Daten aus dem Prozess werden\nauf die erwarteten Daten der Operation gemappt und umgekehrt."}]},{type:a,value:c},{type:b,tag:j,props:{id:H},children:[{type:b,tag:e,props:{href:"#interaktion-aus-dem-prozess-heraus",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:q,props:{alt:"Es wird dargestellt, wie ein Aufruf eines Integrationsartefaktes mit Hilfe eines Subprozesses aus einem \nBPMN Prozess heraus aussehen könnte.",contain:r,"max-width":s,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fdigiwf_integrate_from_process.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fpreview_digiwf_integrate_from_process.png"},children:[]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:"Beispielhafte Nutzung eines Integrationsartefaktes aus einem BPMN Prozess heraus"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Um wiederverwendbare Operationsaufrufe aus BPMN Prozessen heraus erstellen zu können, ist es sinnvoll diese in\nSubprozessen zu kapseln. Die Abbildung oben zeigt dies exemplarisch. Ein Send & Reply Pattern erscheint hier als ein\nService Task, den Prozessmodellierer einfach in den Prozess aufnehmen kann. Hier könnte auch ein generisches\nFehlerhandling abgebildet werden. Wichtig ist, dass der Subprozess ein eigenes "},{type:b,tag:d,props:{},children:[{type:a,value:"Element Template"}]},{type:a,value:" hat. D.h. die\neingehenden Parameter entsprechen den Werten, die der Subprozess zum Aufruf erwartet. Die ausgehenden\nParameter sind diejenigen, die der Subprozess am Ende zurückgibt."}]},{type:a,value:c},{type:b,tag:j,props:{id:J},children:[{type:b,tag:e,props:{href:"#eigene-integrationsartefakte-erstellen",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:q,props:{alt:"Es wird dargestellt, wie man vorhandenene Spring Boot Starter Komponenten einbinden kann, um einen \neigenen Integratiosnartefakt zu erstellen.",contain:r,"max-width":s,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fdigiwf_how_to_build_a_integration_artifact.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration\u002Fpreview_digiwf_how_to_build_a_integration_artifact.png"},children:[]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:"Beispielhafte Nutzung von Spring Boot Startern um einen eigenen Integrationsartefakt zu \nerstellen"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Um es möglichst einfach zu machen, eigene Integrations Artefakte oder Micro Services zu erstellen, bieten wir\nBasisfunktionalitäten in Form von "},{type:b,tag:d,props:{},children:[{type:a,value:"Spring Boot Startern"}]},{type:a,value:M},{type:b,tag:u,props:{id:"fnref-2"},children:[{type:b,tag:e,props:{href:"#fn-2",className:[v]},children:[{type:a,value:"2"}]}]},{type:a,value:" an. Diese können einfach über das entsprechende\nDependency Management (Maven, Gradle, etc.) in das Projekt eingebunden werden. Danach stehen sie zur Nutzung bereit.\nD.h. sie können über die "},{type:b,tag:d,props:{},children:[{type:a,value:"application.yaml"}]},{type:a,value:" des Projektes (hier "},{type:b,tag:d,props:{},children:[{type:a,value:N}]},{type:a,value:") konfiguriert werden.\nDas ist sinnvoll, um zwar die individuellen umgebungsspezifischen Parameter für ein System setzen zu können - aber\ntrotzdem die standardisierte Nutzung nichts selbst implementieren zu müssen."}]},{type:a,value:c},{type:b,tag:h,props:{},children:[{type:a,value:"Im Beispiel oben wird ein "},{type:b,tag:d,props:{},children:[{type:a,value:N}]},{type:a,value:" Service erstellt. Dieser behandelt eingehende und ausgehende\nMails. Wenn man den "},{type:b,tag:d,props:{},children:[{type:a,value:O}]},{type:a,value:" einbindet, so bekommt man automatisch eine Anbindung an den S3\nService mit. Mails können ja Datei Anhänge enthalten, die man nicht im Prozess haben will. D.h. bei eingehenden\nAnhängen werden diese vorab im Datei Speicher gespeichert und die Referenz an den Prozess weiter gegeben. Bei\nausgehenden Mails ist es genau anders herum. Der Prozess stellt eine Referenz auf die Datei(en) zur Verfügung, mit\nder diese aus dem Datei Speicher geladen werden und an die E-Mail gehängt werden können. Diese Logik - Dateianhänge\nüber den Datei Speicher zu verarbeiten - ist bereits komplett "},{type:b,tag:d,props:{},children:[{type:a,value:O}]},{type:a,value:" und\n"},{type:b,tag:d,props:{},children:[{type:a,value:"digiwf-s3-integration-client-starter"}]},{type:a,value:" enthalten. D.h. um einen Mail Server anzubinden, muss im besten Fall nichts\nmehr programmiert werden. Man erstellt nur ein Spring Boot Projekt (z.B. über "},{type:b,tag:u,props:{id:"fnref-3"},children:[{type:b,tag:e,props:{href:"#fn-3",className:[v]},children:[{type:a,value:"3"}]}]},{type:a,value:"), bindet die Starter ein und kann\nmit der richtigen Konfiguration sofort arbeiten."}]},{type:a,value:c},{type:b,tag:"div",props:{className:["footnotes"]},children:[{type:a,value:c},{type:b,tag:"hr",props:{},children:[]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:w,props:{id:"fn-1"},children:[{type:a,value:x},{type:b,tag:e,props:{href:P,rel:[y,z,A],target:B},children:[{type:a,value:P}]},{type:b,tag:e,props:{href:"#fnref-1",className:[C]},children:[{type:a,value:D}]}]},{type:a,value:c},{type:b,tag:w,props:{id:"fn-2"},children:[{type:a,value:x},{type:b,tag:e,props:{href:Q,rel:[y,z,A],target:B},children:[{type:a,value:Q}]},{type:b,tag:e,props:{href:"#fnref-2",className:[C]},children:[{type:a,value:D}]}]},{type:a,value:c},{type:b,tag:w,props:{id:"fn-3"},children:[{type:a,value:x},{type:b,tag:e,props:{href:R,rel:[y,z,A],target:B},children:[{type:a,value:R}]},{type:b,tag:e,props:{href:"#fnref-3",className:[C]},children:[{type:a,value:D}]}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept",path:S,extension:".md",createdAt:T,updatedAt:T},navigation:[{title:U,category:f,categoryIcon:g,path:V},{title:E,category:f,categoryIcon:g,path:S},{title:W,category:f,categoryIcon:g,path:X},{title:"Co-Creation",category:f,categoryIcon:g,path:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fselfservice"},{title:"Event Bus Topics",category:f,categoryIcon:g,path:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Feventbustopics"}],prev:{title:U,path:V},next:{title:W,path:X}}],fetch:{},mutations:void 0}}("text","element","\n","code","a","Konzept","mdi-floor-plan","p",2,"h2","true",-1,"span","icon","icon-link","figure","v-img","","960","figcaption","sup","footnote-ref","li","Siehe ","nofollow","noopener","noreferrer","_blank","footnote-backref","↩","System Integration","die-digiwf-integrationsarchitektur","Die DigiWF Integrationsarchitektur","interaktion-aus-dem-prozess-heraus","Interaktion aus dem Prozess heraus","eigene-integrationsartefakte-erstellen","Eigene Integrationsartefakte erstellen","Event Bus"," ","your-own-mail-integration","digiwf-mail-integration-starter","https:\u002F\u002Fdocs.camunda.io\u002Fdocs\u002Fcomponents\u002Fmodeler\u002Fdesktop-modeler\u002Felement-templates\u002Fabout-templates\u002F","https:\u002F\u002Fdocs.spring.io\u002Fspring-boot\u002Fdocs\u002Fcurrent\u002Freference\u002Fhtmlsingle\u002F#using.build-systems.starters","https:\u002F\u002Fstart.spring.io\u002F","\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration","2022-07-25T06:48:43.690Z","DigiWF Architektur Übersicht","\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Foverview","Umgang mit Dateien","\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Ffilehandling")));