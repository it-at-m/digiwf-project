__NUXT_JSONP__("/de/resources/documentation/concept/overview", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S){return {data:[{article:{slug:"overview",description:"Was ist DigiWF aus 20K Meter Höhe.",title:v,category:m,categoryIcon:n,position:1,toc:[{id:w,depth:x,text:y},{id:z,depth:x,text:A},{id:B,depth:s,text:C},{id:D,depth:s,text:E},{id:F,depth:s,text:G},{id:H,depth:s,text:I}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"DigiWF ist das Bindeglied zwischen Ihren Frontend- und Backend-Systemen. Alles, was Sie über eine Netzwerkverbindung erreichen können, können Sie an DigiWF anhängen und deklarativ in Ihren BPMN-Prozessen verwenden. Wir sind die Brücke zwischen dem Entwicklerteam und den Prozessdesignern."}]},{type:a,value:c},{type:b,tag:J,props:{id:w},children:[{type:b,tag:f,props:{href:"#das-digiwf-plattform-konzept",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:p,props:{alt:"The concept behind DigiWF. In the middle are your business processes, that can talk to your backend or \nthe cloud via integration artifacts.",contain:l,"max-width":q,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fdigiwf_concept_process_and_integrationplatform.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fpreview_digiwf_concept_process_and_integrationplatform.png"},children:[]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:"Interaction DigWF Core & the surrounding systems"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"DigiWF stellt vier Kernkompetenzen zur Verfügung:"}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Einen Prozesslayer (DigiWF Core), in dem natürlich die Prozessinstanzen und Entscheidungstabellen (DMN) auf Basis von Camunda BPMN ausgeführt werden. Aber auch die Formularbeschreibungen gespeichert, oder User Tasks ausgeführt werden."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Einen Integrations Layer Richtung frontend. Hier werden zur Laufzeit Schnittstellen und \u002F oder Formulare zur Verfügung gestellt, die man in eigenen (Frontend) Anwendungen nutzen kann. Alternativ kann die fertige Tasklist verwendet werden, um User Tasks abzuarbeiten, oder den Stand eines Workflows anzuzeigen."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Einen Integrationslayer richtung Backend. Über den kann alles was eine Schnittstelle hat angebunden werden. Hat es keine Schnittstelle, kann immer noch ein RPA Dienst verwendet werden. Um schnell eigene Verfahren in die Prozesse einbinden zu können, werden eine Reihe von \"ready to use\" Bausteinen in Form von Spring Startern zur Verfügung gestellt. Diese können genutzt werden, um wiederkehrende Problemstellung - wie beispielsweise der Umgang mit ein- oder ausgehenden Dateien (z.B. E-Mail mit Anhang) - standardisiert zu lösen. Einfach Starter einfügen und die API nutzen."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Einen Co-Creation Bereich, um auch nicht technischen Nutzern die Möglichkeit zu geben ihre Prozesse, entscheidungstabellen und Formulare modellieren und sogar auf der Plattform ausbringen zu können. Dafür wurde eine eigene Web IDE erstellt, die einfach über den Browser genutzt werden kann."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:J,props:{id:z},children:[{type:b,tag:f,props:{href:"#core-modules",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:p,props:{alt:"Das Konzept hinter DigiWF wird dargestellt. In der Mitte ist DigiWF Core (der Prozess Layer) dargestellt.\nNach oben haben wir eine Integration Richtung GUI, nach unten eine Integration in die Verfahrenslandschaft. Rechts \nist als Build Komponente das Co-Creation dargestellt.",contain:l,"max-width":q,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fdigiwf_how_to_integrate_your_app.\npng","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fpreview_digiwf_how_to_integrate_your_app.png"},children:[]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:"Die Kern Komponenten"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Das Bild oben zeigt eine mögliche \"ausgewachsene\" DigiWF-Architektur einschließlich selbst erstellter Artefakte. Alles in\nBlau wird vom DigiWF-Projekt bereitgestellt, aber wir sind offen für Integrationen. Es könnten also folgende Artefakte\nerstellen und integriert werden:"}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"eigene Frontends (Die Technologie ist nichjt wirklich entscheidend - wenn man aber beispielsweise unsere\nFormurlarkomponente verwenden will, dann geht das mit VueJs am besten)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"eigene Integrationsartefakte zur Kommunikation mit der On-Premise- oder Cloud-Infrastruktur"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"eigene (Mikro-)Services"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Es kann jede beliebige Technologie verwenden werden. Bestens unterstützt wird man aber, wenn im Frontend VueJS (mit\nVuetifyJs) und in den Integrations- oder anderen Services Spring Boot verwendet wird. Es gibt nur zwei Voraussetzungen:"}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Die Frontend-Technologie muss über einen GraphQL-Client verfügen"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Das Backend (Dienste, Integrationsartefakte) muss in der Lage sein, mit einer der von [Spring Cloud Streams]\n("},{type:b,tag:f,props:{href:K,rel:[L,M,N],target:O},children:[{type:a,value:K}]},{type:a,value:") unterstützten Binder-Implementierungen zu kommunizieren."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:"v-alert",props:{color:"yellow darken-1",border:"left",elevation:"2","colored-border":l,icon:"mdi-robot-confused"},children:[{type:a,value:"\nWenn eine andere Event Bus Infrastruktur verwendet werden soll, als Apache Kafka, so kann dies in der DigiWF \nKonfiguration erfolgen.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Of course - if you'll use Spring Boot in your backend components and VueJs as front end technology, you can use all cross-section components (like Spring Boot Starters, NPM components, ...) we have created for our components."}]},{type:a,value:c},{type:b,tag:u,props:{id:B},children:[{type:b,tag:f,props:{href:"#digiwf-core",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"DigiWF Core ist das Herzstück von DigiWF und besteht aus 5 Diensten. Zur Interaktion mit Frontend-Anwendungen gibt\nes eine Graph-QL API. Zusätzlich eine sehr generische API, die über einen Event Bus mit verschiedenen\nBackend-Systemen kommuniziert."}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:p,props:{alt:"Die fünf Services in Digiwf Core: Service Definition, Form + Validation, Task, Service Instance and \nProcess Engine",contain:l,"max-width":q,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fdigiwf_core_services.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fpreview_digiwf_core_services.png"},children:[]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:"Die DigiWF Core Services"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Das Hauptziel von DigiWF ist es, eine deklarative Möglichkeit für Prozessdesigner zu schaffen, mit einer technischen Infrastruktur zu interagieren. Dafür haben wir einige unterstützende Dienste rund um den Opensource "},{type:b,tag:f,props:{href:"https:\u002F\u002Fcamunda.com\u002F",rel:[L,M,N],target:O},children:[{type:a,value:"camunda"}]},{type:a,value:"-Workflow erstellt:"}]},{type:a,value:c},{type:b,tag:t,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Prozessdienst: Dies ist der Service, in den Camunda eingebettet ist. Es wird hauptsächlich verwendet, um die\nBPMN-Workflows auszuführen."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Serviceinstanz: Dies behandelt jede Art von Serviceinstanzen. Eine Serviceinstanz kann ein Prozess sein, muss aber\nnicht."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Task Service: Dieser Service übernimmt alles, was wir für menschliche Aufgaben benötigen (Autorisierung, Mapping, Rückkanal, ...)."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Formular- und Validierungsservice: Alles, was wir im Zusammenhang mit Formularen benötigen, wird hier verarbeitet.\nWir speichern die Formulardefinition und führen alle Arten von Formularvalidierungen durch."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Servicedefinitionsservice: Dieser Service ist für die Definition eines Services und die entsprechenden\nKonfigurationen\nzuständig."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:u,props:{id:D},children:[{type:b,tag:f,props:{href:"#digiwf-integration",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:p,props:{alt:"Das DigiWF-Konzept, wie man eigene Integrationsartefakte basierend auf verschiedenen Spring Boot \nStartern wie zum Beispiel Mail- oder S3-Dateidienst.",contain:l,"max-width":q,src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fdigiwf_how_to_build_your_own_service.\npng","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fpreview_digiwf_how_to_build_your_own_service.png"},children:[]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:"Ein Beispiel, wie ein benutzerdefiniertes Integrationsartefakt basierend auf unseren Startern \nerstellt werden kann"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Um ein beliebiges Backend-System zu integrieren, kann dies über die Integrationsschicht getan werden. Die\nDigiWF-Integration ist einerseits eine Reihe vordefinierter Integrationsartefakte wie S3, Mail, JMS oder andere. Auf der anderen Seite ist die DigiWF-Integration eine Toolbox, die hilft, so schnell wie möglich eigene Integrationsartefakte zu erstellen. Dies wird durch die konsequente Verwendung von Spring Boot Startern zur Implementierung von Basisfunktionalitäten gewährleistet."}]},{type:a,value:c},{type:b,tag:u,props:{id:F},children:[{type:b,tag:f,props:{href:"#digiwf-tasklist",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Dies ist ein einfaches Frontend zur Interaktion mit laufenden Prozessinstanzen. Jede Benutzeraufgabe kommt auf der\nAufgabenliste vor und kann abgeholt werden (natürlich nur, wenn man das Recht dazu hat). Über die Taskliste können\nSie den Status „Ihrer“ Prozesse einsehen und neue Instanzen starten. Wem ein so hochgradig standardisiertes Frontend\nnicht gefällt, kann \"ready to use\" Komponenten wie den Form Renderer verwenden und in die eigene, schöne Web Anwendung\nintegrieren.\nOder man kann die API direkt verwenden und ein schickes Frontend in der gewünschten Technologie selbst erstellen."}]},{type:a,value:c},{type:b,tag:u,props:{id:H},children:[{type:b,tag:f,props:{href:"#digiwf-co-creation",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Die DigiWF Co-Creation ist der Low-Code-Bereich. Hier kann ein Prozessdesigner BPMN-Prozesse zeichnen,\nmit Entscheidungstabellen (DMN) herum tüfteln oder Webformulare per Drag and Drop erstellen. Auch das Deployment in\nverschiedenen Infrastrukturen ist über diese Web-App möglich."}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:p,props:{contain:l,"max-width":q,alt:"Ein Bild des Drag & Drop Form Builders aus dem Co-Creation Bereich.",src:"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fform_builder.png","lazy-src":"images\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fpreview_form_builder.png"},children:[]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:"Der DigiWF Form Builder"}]},{type:a,value:c}]}]},dir:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept",path:P,extension:".md",createdAt:Q,updatedAt:Q},navigation:[{title:v,category:m,categoryIcon:n,path:P},{title:R,category:m,categoryIcon:n,path:S},{title:"Umgang mit Dateien",category:m,categoryIcon:n,path:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Ffilehandling"},{title:"Co-Creation",category:m,categoryIcon:n,path:"\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fselfservice"}],prev:null,next:{title:R,path:S}}],fetch:{},mutations:void 0}}("text","element","\n","li","p","a","true",-1,"span","icon","icon-link","","Konzept","mdi-floor-plan","figure","v-img","960","figcaption",3,"ul","h3","DigiWF Architektur Übersicht","das-digiwf-plattform-konzept",2,"Das DigiWF Plattform Konzept","core-modules","Core Modules","digiwf-core","DigiWF Core","digiwf-integration","DigiWF Integration","digiwf-tasklist","DigiWF Tasklist","digiwf-co-creation","DigiWF Co-Creation","h2","https:\u002F\u002Fspring.io\u002Fprojects\u002Fspring-cloud-stream","nofollow","noopener","noreferrer","_blank","\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Foverview","2022-04-27T06:36:51.023Z","System Integration","\u002Fde\u002Fresources\u002Fdocumentation\u002Fconcept\u002Fintegration")));