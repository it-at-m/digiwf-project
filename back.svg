<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:ooo="http://xml.openoffice.org/svg/export"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   id="svg1896"
   xml:space="preserve"
   stroke-linejoin="round"
   stroke-width="28.222"
   fill-rule="evenodd"
   preserveAspectRatio="xMidYMid"
   viewBox="0 0 40000 15750"
   version="1.2"><metadata
   id="metadata1900"><rdf:RDF><cc:Work
       rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
         rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata>
 <defs
   id="defs8"
   class="ClipPathGroup">
  <clipPath
   clipPathUnits="userSpaceOnUse"
   id="presentation_clip_path">
   <rect
   id="rect2"
   height="15750"
   width="40000"
   y="0"
   x="0" />
  </clipPath>
  <clipPath
   clipPathUnits="userSpaceOnUse"
   id="presentation_clip_path_shrink">
   <rect
   id="rect5"
   height="15719"
   width="39920"
   y="15"
   x="40" />
  </clipPath>
 </defs>
 <defs
   id="defs13">
  <g
   ooo:start-slide-number="0"
   ooo:number-of-slides="1"
   id="ooo:meta_slides">
   <g
   ooo:has-transition="false"
   ooo:master-objects-visibility="hidden"
   ooo:background-visibility="hidden"
   ooo:master="dummy-master-page"
   ooo:slide="dummy-slide"
   id="ooo:meta_dummy_slide" />
   <g
   ooo:has-transition="true"
   ooo:master="id2"
   ooo:slide="id1"
   id="ooo:meta_slide_0" />
  </g>
 </defs>
 <defs
   id="presentation-animations" />
 <defs
   id="defs81">
  <font
   horiz-adv-x="2048"
   id="EmbeddedFont_1">
   <font-face
   id="font-face16"
   descent="423"
   ascent="1852"
   font-style="normal"
   font-weight="normal"
   units-per-em="2048"
   font-family="Liberation Sans embedded" />
   <missing-glyph
   id="missing-glyph18"
   d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
   horiz-adv-x="2048" />
   <glyph
   id="glyph20"
   d="M 320,1082 L 320,396 C 320,325 327,269 341,230 355,191 377,162 408,145 439,128 484,119 543,119 630,119 698,149 748,208 798,267 823,350 823,455 L 823,1082 1003,1082 1003,231 C 1003,105 1005,28 1009,0 L 839,0 C 838,3 838,12 837,27 836,42 836,59 835,78 834,97 832,132 831,185 L 828,185 C 787,110 739,58 685,27 630,-4 563,-20 482,-20 363,-20 277,10 222,69 167,128 139,225 139,361 L 139,1082 320,1082 Z M 676,1219 L 676,1403 839,1403 839,1219 676,1219 Z M 282,1219 L 282,1403 447,1403 447,1219 282,1219 Z"
   horiz-adv-x="874"
   unicode="Ã¼" />
   <glyph
   id="glyph22"
   d="M 801,0 L 510,444 217,0 23,0 408,556 41,1082 240,1082 510,661 778,1082 979,1082 612,558 1002,0 801,0 Z"
   horiz-adv-x="1006"
   unicode="x" />
   <glyph
   id="glyph24"
   d="M 1174,0 L 965,0 776,765 740,934 C 734,904 725,861 712,805 699,748 631,480 508,0 L 300,0 -3,1082 175,1082 358,347 C 363,331 377,265 401,149 L 418,223 644,1082 837,1082 1026,339 1072,149 1103,288 1308,1082 1484,1082 1174,0 Z"
   horiz-adv-x="1509"
   unicode="w" />
   <glyph
   id="glyph26"
   d="M 314,1082 L 314,396 C 314,325 321,269 335,230 349,191 371,162 402,145 433,128 478,119 537,119 624,119 692,149 742,208 792,267 817,350 817,455 L 817,1082 997,1082 997,231 C 997,105 999,28 1003,0 L 833,0 C 832,3 832,12 831,27 830,42 830,59 829,78 828,97 826,132 825,185 L 822,185 C 781,110 733,58 679,27 624,-4 557,-20 476,-20 357,-20 271,10 216,69 161,128 133,225 133,361 L 133,1082 314,1082 Z"
   horiz-adv-x="874"
   unicode="u" />
   <glyph
   id="glyph28"
   d="M 554,8 C 495,-8 434,-16 372,-16 228,-16 156,66 156,229 L 156,951 31,951 31,1082 163,1082 216,1324 336,1324 336,1082 536,1082 536,951 336,951 336,268 C 336,216 345,180 362,159 379,138 408,127 450,127 474,127 509,132 554,141 L 554,8 Z"
   horiz-adv-x="531"
   unicode="t" />
   <glyph
   id="glyph30"
   d="M 950,299 C 950,197 912,118 835,63 758,8 650,-20 511,-20 376,-20 273,2 200,47 127,91 79,160 57,254 L 216,285 C 231,227 263,185 311,158 359,131 426,117 511,117 602,117 669,131 712,159 754,187 775,229 775,285 775,328 760,362 731,389 702,416 654,438 589,455 L 460,489 C 357,516 283,542 240,568 196,593 162,624 137,661 112,698 100,743 100,796 100,895 135,970 206,1022 276,1073 378,1099 513,1099 632,1099 727,1078 798,1036 868,994 912,927 931,834 L 769,814 C 759,862 732,899 689,925 645,950 586,963 513,963 432,963 372,951 333,926 294,901 275,864 275,814 275,783 283,758 299,738 315,718 339,701 370,687 401,673 467,654 568,629 663,605 732,583 774,563 816,542 849,520 874,495 898,470 917,442 930,410 943,377 950,340 950,299 Z"
   horiz-adv-x="901"
   unicode="s" />
   <glyph
   id="glyph32"
   d="M 142,0 L 142,830 C 142,906 140,990 136,1082 L 306,1082 C 311,959 314,886 314,861 L 318,861 C 347,954 380,1017 417,1051 454,1085 507,1102 575,1102 599,1102 623,1099 648,1092 L 648,927 C 624,934 592,937 552,937 477,937 420,905 381,841 342,776 322,684 322,564 L 322,0 142,0 Z"
   horiz-adv-x="530"
   unicode="r" />
   <glyph
   id="glyph34"
   d="M 1053,542 C 1053,353 1011,212 928,119 845,26 724,-20 565,-20 407,-20 288,28 207,125 126,221 86,360 86,542 86,915 248,1102 571,1102 736,1102 858,1057 936,966 1014,875 1053,733 1053,542 Z M 864,542 C 864,691 842,800 798,868 753,935 679,969 574,969 469,969 393,935 346,866 299,797 275,689 275,542 275,399 298,292 345,221 391,149 464,113 563,113 671,113 748,148 795,217 841,286 864,395 864,542 Z"
   horiz-adv-x="980"
   unicode="o" />
   <glyph
   id="glyph36"
   d="M 825,0 L 825,686 C 825,757 818,813 804,852 790,891 768,920 737,937 706,954 661,963 602,963 515,963 447,933 397,874 347,815 322,732 322,627 L 322,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 358,972 406,1025 461,1056 515,1087 582,1102 663,1102 782,1102 869,1073 924,1014 979,955 1006,857 1006,721 L 1006,0 825,0 Z"
   horiz-adv-x="874"
   unicode="n" />
   <glyph
   id="glyph38"
   d="M 768,0 L 768,686 C 768,791 754,863 725,903 696,943 645,963 570,963 493,963 433,934 388,875 343,816 321,734 321,627 L 321,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 356,974 400,1027 450,1057 500,1087 561,1102 633,1102 715,1102 780,1086 828,1053 875,1020 908,968 927,897 L 930,897 C 967,970 1013,1022 1066,1054 1119,1086 1183,1102 1258,1102 1367,1102 1447,1072 1497,1013 1546,954 1571,856 1571,721 L 1571,0 1393,0 1393,686 C 1393,791 1379,863 1350,903 1321,943 1270,963 1195,963 1116,963 1055,934 1012,876 968,817 946,734 946,627 L 946,0 768,0 Z"
   horiz-adv-x="1457"
   unicode="m" />
   <glyph
   id="glyph40"
   d="M 138,0 L 138,1484 318,1484 318,0 138,0 Z"
   horiz-adv-x="187"
   unicode="l" />
   <glyph
   id="glyph42"
   d="M 816,0 L 450,494 318,385 318,0 138,0 138,1484 318,1484 318,557 793,1082 1004,1082 565,617 1027,0 816,0 Z"
   horiz-adv-x="901"
   unicode="k" />
   <glyph
   id="glyph44"
   d="M 137,1312 L 137,1484 317,1484 317,1312 137,1312 Z M 137,0 L 137,1082 317,1082 317,0 137,0 Z"
   horiz-adv-x="187"
   unicode="i" />
   <glyph
   id="glyph46"
   d="M 317,897 C 356,968 402,1020 457,1053 511,1086 580,1102 663,1102 780,1102 867,1073 923,1015 978,956 1006,858 1006,721 L 1006,0 825,0 825,686 C 825,762 818,819 804,856 790,893 767,920 735,937 703,954 659,963 602,963 517,963 450,934 399,875 348,816 322,737 322,638 L 322,0 142,0 142,1484 322,1484 322,1098 C 322,1057 321,1015 319,972 316,929 315,904 314,897 L 317,897 Z"
   horiz-adv-x="874"
   unicode="h" />
   <glyph
   id="glyph48"
   d="M 548,-425 C 430,-425 336,-402 266,-356 196,-309 151,-243 131,-158 L 312,-132 C 324,-182 351,-220 392,-248 433,-274 486,-288 553,-288 732,-288 822,-183 822,27 L 822,201 820,201 C 786,132 739,80 680,45 621,10 551,-8 472,-8 339,-8 242,36 180,124 117,212 86,350 86,539 86,730 120,872 187,963 254,1054 355,1099 492,1099 569,1099 635,1082 692,1047 748,1012 791,962 822,897 L 824,897 C 824,917 825,952 828,1001 831,1050 833,1077 836,1082 L 1007,1082 C 1003,1046 1001,971 1001,858 L 1001,31 C 1001,-273 850,-425 548,-425 Z M 822,541 C 822,629 810,705 786,769 762,832 728,881 685,915 641,948 591,965 536,965 444,965 377,932 335,865 293,798 272,690 272,541 272,393 292,287 331,222 370,157 438,125 533,125 590,125 640,142 684,175 728,208 762,256 786,319 810,381 822,455 822,541 Z"
   horiz-adv-x="927"
   unicode="g" />
   <glyph
   id="glyph50"
   d="M 361,951 L 361,0 181,0 181,951 29,951 29,1082 181,1082 181,1204 C 181,1303 203,1374 246,1417 289,1460 356,1482 445,1482 495,1482 537,1478 572,1470 L 572,1333 C 542,1338 515,1341 492,1341 446,1341 413,1329 392,1306 371,1283 361,1240 361,1179 L 361,1082 572,1082 572,951 361,951 Z"
   horiz-adv-x="557"
   unicode="f" />
   <glyph
   id="glyph52"
   d="M 276,503 C 276,379 302,283 353,216 404,149 479,115 578,115 656,115 719,131 766,162 813,193 844,233 861,281 L 1019,236 C 954,65 807,-20 578,-20 418,-20 296,28 213,123 129,218 87,360 87,548 87,727 129,864 213,959 296,1054 416,1102 571,1102 889,1102 1048,910 1048,527 L 1048,503 276,503 Z M 862,641 C 852,755 823,838 775,891 727,943 658,969 568,969 481,969 412,940 361,882 310,823 282,743 278,641 L 862,641 Z"
   horiz-adv-x="980"
   unicode="e" />
   <glyph
   id="glyph54"
   d="M 821,174 C 788,105 744,55 689,25 634,-5 565,-20 484,-20 347,-20 247,26 183,118 118,210 86,349 86,536 86,913 219,1102 484,1102 566,1102 634,1087 689,1057 744,1027 788,979 821,914 L 823,914 821,1035 821,1484 1001,1484 1001,223 C 1001,110 1003,36 1007,0 L 835,0 C 833,11 831,35 829,74 826,113 825,146 825,174 L 821,174 Z M 275,542 C 275,391 295,282 335,217 375,152 440,119 530,119 632,119 706,154 752,225 798,296 821,405 821,554 821,697 798,802 752,869 706,936 633,969 532,969 441,969 376,936 336,869 295,802 275,693 275,542 Z"
   horiz-adv-x="927"
   unicode="d" />
   <glyph
   id="glyph56"
   d="M 275,546 C 275,402 298,295 343,226 388,157 457,122 548,122 612,122 666,139 709,174 752,209 778,262 788,334 L 970,322 C 956,218 912,135 837,73 762,11 668,-20 553,-20 402,-20 286,28 207,124 127,219 87,359 87,542 87,724 127,863 207,959 287,1054 402,1102 551,1102 662,1102 754,1073 827,1016 900,959 945,880 964,779 L 779,765 C 770,825 746,873 708,908 670,943 616,961 546,961 451,961 382,929 339,866 296,803 275,696 275,546 Z"
   horiz-adv-x="901"
   unicode="c" />
   <glyph
   id="glyph58"
   d="M 1053,546 C 1053,169 920,-20 655,-20 573,-20 505,-5 451,25 396,54 352,102 318,168 L 316,168 C 316,147 315,116 312,74 309,31 307,7 306,0 L 132,0 C 136,36 138,110 138,223 L 138,1484 318,1484 318,1061 C 318,1018 317,967 314,908 L 318,908 C 351,977 396,1027 451,1057 506,1087 574,1102 655,1102 792,1102 892,1056 957,964 1021,872 1053,733 1053,546 Z M 864,540 C 864,691 844,800 804,865 764,930 699,963 609,963 508,963 434,928 388,859 341,790 318,680 318,529 318,387 341,282 386,215 431,147 505,113 607,113 698,113 763,147 804,214 844,281 864,389 864,540 Z"
   horiz-adv-x="953"
   unicode="b" />
   <glyph
   id="glyph60"
   d="M 414,-20 C 305,-20 224,9 169,66 114,123 87,202 87,302 87,414 124,500 198,560 271,620 390,652 554,656 L 797,660 797,719 C 797,807 778,870 741,908 704,946 645,965 565,965 484,965 426,951 389,924 352,897 330,853 323,793 L 135,810 C 166,1005 310,1102 569,1102 705,1102 807,1071 876,1009 945,946 979,856 979,738 L 979,272 C 979,219 986,179 1000,152 1014,125 1041,111 1080,111 1097,111 1117,113 1139,118 L 1139,6 C 1094,-5 1047,-10 1000,-10 933,-10 885,8 855,43 824,78 807,132 803,207 L 797,207 C 751,124 698,66 637,32 576,-3 501,-20 414,-20 Z M 455,115 C 521,115 580,130 631,160 682,190 723,231 753,284 782,336 797,390 797,445 L 797,534 600,530 C 515,529 451,520 408,504 364,488 330,463 307,430 284,397 272,353 272,299 272,240 288,195 320,163 351,131 396,115 455,115 Z"
   horiz-adv-x="1060"
   unicode="a" />
   <glyph
   id="glyph62"
   d="M 1187,0 L 65,0 65,143 923,1253 138,1253 138,1409 1140,1409 1140,1270 282,156 1187,156 1187,0 Z"
   horiz-adv-x="1139"
   unicode="Z" />
   <glyph
   id="glyph64"
   d="M 782,0 L 584,0 9,1409 210,1409 600,417 684,168 768,417 1156,1409 1357,1409 782,0 Z"
   horiz-adv-x="1377"
   unicode="V" />
   <glyph
   id="glyph66"
   d="M 720,1253 L 720,0 530,0 530,1253 46,1253 46,1409 1204,1409 1204,1253 720,1253 Z"
   horiz-adv-x="1192"
   unicode="T" />
   <glyph
   id="glyph68"
   d="M 1272,389 C 1272,259 1221,158 1120,87 1018,16 875,-20 690,-20 347,-20 148,99 93,338 L 278,375 C 299,290 345,228 414,189 483,149 578,129 697,129 820,129 916,150 983,193 1050,235 1083,297 1083,379 1083,425 1073,462 1052,491 1031,520 1001,543 963,562 925,581 880,596 827,609 774,622 716,635 652,650 541,675 456,699 399,724 341,749 295,776 262,807 229,837 203,872 186,913 168,954 159,1000 159,1053 159,1174 205,1267 298,1332 390,1397 522,1430 694,1430 854,1430 976,1406 1061,1357 1146,1308 1205,1224 1239,1106 L 1051,1073 C 1030,1148 991,1202 933,1236 875,1269 795,1286 692,1286 579,1286 493,1267 434,1230 375,1193 345,1137 345,1063 345,1020 357,984 380,956 403,927 436,903 479,884 522,864 609,840 738,811 781,801 825,791 868,781 911,770 952,758 991,744 1030,729 1067,712 1102,693 1136,674 1166,650 1191,622 1216,594 1236,561 1251,523 1265,485 1272,440 1272,389 Z"
   horiz-adv-x="1192"
   unicode="S" />
   <glyph
   id="glyph70"
   d="M 1106,0 L 543,680 359,540 359,0 168,0 168,1409 359,1409 359,703 1038,1409 1263,1409 663,797 1343,0 1106,0 Z"
   horiz-adv-x="1191"
   unicode="K" />
   <glyph
   id="glyph72"
   d="M 103,711 C 103,940 164,1117 287,1242 410,1367 582,1430 804,1430 960,1430 1087,1404 1184,1351 1281,1298 1356,1214 1409,1098 L 1227,1044 C 1187,1124 1132,1182 1062,1219 991,1256 904,1274 799,1274 636,1274 512,1225 426,1127 340,1028 297,890 297,711 297,533 343,393 434,290 525,187 652,135 813,135 905,135 991,149 1071,177 1150,205 1215,243 1264,291 L 1264,545 843,545 843,705 1440,705 1440,219 C 1365,143 1274,84 1166,43 1057,1 940,-20 813,-20 666,-20 539,9 432,68 325,127 244,211 188,322 131,432 103,562 103,711 Z"
   horiz-adv-x="1377"
   unicode="G" />
   <glyph
   id="glyph74"
   d="M 359,1253 L 359,729 1145,729 1145,571 359,571 359,0 168,0 168,1409 1169,1409 1169,1253 359,1253 Z"
   horiz-adv-x="1006"
   unicode="F" />
   <glyph
   id="glyph76"
   d="M 1381,719 C 1381,574 1353,447 1296,338 1239,229 1159,145 1055,87 951,29 831,0 695,0 L 168,0 168,1409 634,1409 C 873,1409 1057,1349 1187,1230 1316,1110 1381,940 1381,719 Z M 1189,719 C 1189,894 1141,1027 1046,1119 950,1210 811,1256 630,1256 L 359,1256 359,153 673,153 C 776,153 867,176 946,221 1024,266 1084,332 1126,417 1168,502 1189,603 1189,719 Z"
   horiz-adv-x="1218"
   unicode="D" />
   <glyph
   id="glyph78"
   horiz-adv-x="556"
   unicode=" " />
  </font>
 </defs>
 <defs
   id="defs126">
  <font
   horiz-adv-x="2048"
   id="EmbeddedFont_2">
   <font-face
   id="font-face83"
   descent="450"
   ascent="1826"
   font-style="normal"
   font-weight="normal"
   units-per-em="2048"
   font-family="Liberation Serif embedded" />
   <missing-glyph
   id="missing-glyph85"
   d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
   horiz-adv-x="2048" />
   <glyph
   id="glyph87"
   d="M 877,997 C 847,994 816,990 785,986 753,981 724,973 699,961 674,949 653,932 637,910 620,888 612,858 612,819 612,770 625,728 652,691 678,654 721,614 782,571 839,530 882,485 910,435 938,385 952,325 952,256 952,165 927,96 876,50 825,3 750,-20 651,-20 610,-20 566,-16 521,-7 475,2 441,13 418,27 L 418,219 463,219 496,125 C 511,106 532,91 559,78 585,65 615,59 649,59 749,59 799,114 799,225 799,279 786,326 759,366 732,406 689,446 631,485 576,523 534,566 506,614 477,661 463,718 463,784 463,856 484,914 526,959 568,1004 630,1033 713,1047 713,1158 699,1239 670,1288 641,1337 591,1362 520,1362 391,1362 326,1278 326,1110 L 326,0 20,0 20,45 160,70 160,1061 C 160,1186 190,1281 251,1346 311,1410 401,1442 520,1442 645,1442 735,1407 792,1336 849,1265 877,1152 877,997 Z"
   horiz-adv-x="954"
   unicode="Ã" />
   <glyph
   id="glyph89"
   d="M 55,0 L 55,45 571,860 350,860 C 313,860 277,857 242,851 207,844 183,836 170,825 L 139,690 92,690 92,940 786,940 786,891 270,80 545,80 C 583,80 623,85 665,94 707,103 737,114 754,127 L 805,324 852,324 827,0 55,0 Z"
   horiz-adv-x="821"
   unicode="z" />
   <glyph
   id="glyph91"
   d="M 313,268 C 313,153 366,96 473,96 556,96 633,106 705,127 L 705,870 563,895 563,940 870,940 870,70 989,45 989,0 715,0 707,76 C 660,50 605,28 543,9 481,-10 429,-20 387,-20 227,-20 147,72 147,256 L 147,870 27,895 27,940 313,940 313,268 Z"
   horiz-adv-x="980"
   unicode="u" />
   <glyph
   id="glyph93"
   d="M 334,-20 C 270,-20 222,-1 191,37 159,75 143,128 143,197 L 143,856 20,856 20,901 145,940 246,1153 309,1153 309,940 524,940 524,856 309,856 309,215 C 309,172 319,139 339,117 358,95 384,84 416,84 455,84 502,89 557,100 L 557,35 C 534,19 500,6 456,-5 412,-15 371,-20 334,-20 Z"
   horiz-adv-x="557"
   unicode="t" />
   <glyph
   id="glyph95"
   d="M 664,965 L 664,711 621,711 563,821 C 530,821 490,817 445,808 399,799 359,787 326,772 L 326,70 487,45 487,0 41,0 41,45 160,70 160,870 41,895 41,940 315,940 324,823 C 364,856 418,888 487,919 555,950 609,965 649,965 L 664,965 Z"
   horiz-adv-x="636"
   unicode="r" />
   <glyph
   id="glyph97"
   d="M 946,475 C 946,145 799,-20 506,-20 365,-20 258,22 186,107 114,192 78,314 78,475 78,634 114,755 186,839 258,923 367,965 514,965 657,965 764,924 837,842 910,759 946,637 946,475 Z M 766,475 C 766,619 745,723 703,788 661,853 595,885 506,885 419,885 356,854 317,792 278,730 258,624 258,475 258,324 278,217 318,154 357,91 420,59 506,59 594,59 659,92 702,157 745,222 766,328 766,475 Z"
   horiz-adv-x="901"
   unicode="o" />
   <glyph
   id="glyph99"
   d="M 324,864 C 375,893 430,918 488,937 546,956 594,965 633,965 714,965 776,941 817,894 858,847 879,778 879,688 L 879,70 993,45 993,0 588,0 588,45 713,70 713,670 C 713,725 700,769 673,801 646,832 604,848 547,848 487,848 413,838 326,819 L 326,70 453,45 453,0 47,0 47,45 160,70 160,870 47,895 47,940 315,940 324,864 Z"
   horiz-adv-x="980"
   unicode="n" />
   <glyph
   id="glyph101"
   d="M 326,864 C 376,893 429,917 485,936 541,955 590,965 633,965 679,965 722,956 761,939 800,922 829,894 848,856 899,885 960,910 1029,932 1098,954 1155,965 1200,965 1360,965 1440,873 1440,688 L 1440,70 1561,45 1561,0 1134,0 1134,45 1274,70 1274,670 C 1274,785 1221,842 1114,842 1097,842 1077,841 1054,838 1031,835 1008,832 985,829 962,826 940,822 919,818 898,813 880,810 866,807 877,771 883,731 883,688 L 883,70 1024,45 1024,0 578,0 578,45 717,70 717,670 C 717,725 703,768 675,798 646,827 604,842 547,842 488,842 415,832 328,813 L 328,70 469,45 469,0 43,0 43,45 162,70 162,870 43,895 43,940 318,940 326,864 Z"
   horiz-adv-x="1536"
   unicode="m" />
   <glyph
   id="glyph103"
   d="M 367,70 L 528,45 528,0 41,0 41,45 201,70 201,1352 41,1376 41,1421 367,1421 367,70 Z"
   horiz-adv-x="504"
   unicode="l" />
   <glyph
   id="glyph105"
   d="M 379,1247 C 379,1218 368,1192 347,1171 326,1150 300,1139 270,1139 241,1139 215,1150 194,1171 173,1192 162,1218 162,1247 162,1277 173,1303 194,1324 215,1345 241,1356 270,1356 300,1356 326,1345 347,1324 368,1303 379,1277 379,1247 Z M 369,70 L 530,45 530,0 43,0 43,45 203,70 203,870 70,895 70,940 369,940 369,70 Z"
   horiz-adv-x="504"
   unicode="i" />
   <glyph
   id="glyph107"
   d="M 326,1014 C 326,945 324,895 319,864 367,891 422,915 483,935 544,955 595,965 637,965 718,965 780,941 821,894 862,847 883,778 883,688 L 883,70 997,45 997,0 592,0 592,45 717,70 717,676 C 717,791 662,848 551,848 488,848 413,838 326,819 L 326,70 453,45 453,0 41,0 41,45 160,70 160,1352 20,1376 20,1421 326,1421 326,1014 Z"
   horiz-adv-x="1006"
   unicode="h" />
   <glyph
   id="glyph109"
   d="M 260,473 L 260,455 C 260,363 270,292 291,241 311,190 342,151 385,124 427,97 482,84 551,84 587,84 630,87 679,93 728,99 769,106 801,113 L 801,57 C 769,36 726,18 671,3 616,-12 559,-20 502,-20 356,-20 249,19 182,98 114,177 80,303 80,477 80,641 114,763 183,844 252,925 350,965 477,965 718,965 838,828 838,555 L 838,473 260,473 Z M 477,885 C 408,885 355,857 318,801 281,745 262,662 262,553 L 664,553 C 664,672 649,758 618,809 587,860 540,885 477,885 Z"
   horiz-adv-x="769"
   unicode="e" />
   <glyph
   id="glyph111"
   d="M 465,961 C 568,961 643,940 692,898 740,856 764,792 764,705 L 764,70 881,45 881,0 623,0 604,94 C 528,18 431,-20 313,-20 152,-20 72,73 72,260 72,323 84,375 109,416 133,457 172,488 225,510 278,531 356,543 457,545 L 598,549 598,696 C 598,761 586,808 563,839 539,870 502,885 453,885 386,885 325,869 270,838 L 236,721 180,721 180,926 C 288,949 383,961 465,961 Z M 598,479 L 467,475 C 378,472 317,454 286,423 254,392 238,339 238,266 238,149 286,90 381,90 426,90 466,95 499,106 532,116 565,129 598,145 L 598,479 Z"
   horiz-adv-x="848"
   unicode="a" />
   <glyph
   id="glyph113"
   d="M 1159,1262 L 979,1288 979,1341 1436,1341 1436,1288 1264,1262 1264,461 C 1264,300 1220,180 1132,100 1043,20 915,-20 747,-20 569,-20 436,20 348,101 259,181 215,295 215,442 L 215,1262 43,1288 43,1341 579,1341 579,1288 407,1262 407,457 C 407,214 525,92 762,92 890,92 988,122 1057,183 1125,244 1159,334 1159,453 L 1159,1262 Z"
   horiz-adv-x="1404"
   unicode="U" />
   <glyph
   id="glyph115"
   d="M 424,602 L 424,80 647,53 647,0 72,0 72,53 231,80 231,1262 59,1288 59,1341 1065,1341 1065,1020 999,1020 967,1237 C 892,1246 784,1251 643,1251 L 424,1251 424,692 819,692 850,852 911,852 911,440 850,440 819,602 424,602 Z"
   horiz-adv-x="1033"
   unicode="F" />
   <glyph
   id="glyph117"
   d="M 1188,680 C 1188,867 1138,1009 1037,1106 936,1203 791,1251 604,1251 L 424,1251 424,94 C 504,89 599,86 709,86 873,86 994,134 1072,231 1149,328 1188,477 1188,680 Z M 668,1341 C 915,1341 1099,1286 1218,1176 1337,1065 1397,899 1397,678 1397,454 1340,284 1225,169 1110,54 938,-4 709,-4 L 231,0 59,0 59,53 231,80 231,1262 59,1288 59,1341 668,1341 Z"
   horiz-adv-x="1350"
   unicode="D" />
   <glyph
   id="glyph119"
   d="M 104,186 L 104,289 913,680 104,1071 104,1174 1057,705 1057,655 104,186 Z"
   horiz-adv-x="980"
   unicode="&gt;" />
   <glyph
   id="glyph121"
   d="M 102,655 L 102,705 1055,1174 1055,1071 246,680 1055,289 1055,186 102,655 Z"
   horiz-adv-x="980"
   unicode="&lt;" />
   <glyph
   id="glyph123"
   d="M 100,-20 L 0,-20 471,1350 569,1350 100,-20 Z"
   horiz-adv-x="583"
   unicode="/" />
  </font>
 </defs>
 <defs
   id="defs137">
  <font
   horiz-adv-x="2048"
   id="EmbeddedFont_3">
   <font-face
   id="font-face128"
   descent="450"
   ascent="1402"
   font-style="normal"
   font-weight="normal"
   units-per-em="2048"
   font-family="StarSymbol embedded" />
   <missing-glyph
   id="missing-glyph130"
   d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"
   horiz-adv-x="2048" />
   <glyph
   id="glyph132"
   d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"
   horiz-adv-x="1191"
   unicode="â" />
   <glyph
   id="glyph134"
   d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"
   horiz-adv-x="1165"
   unicode="â" />
  </font>
 </defs>
 <defs
   id="defs141"
   class="TextShapeIndex">
  <g
   id="g139"
   ooo:id-list="id6 id7 id8 id9 id10 id11 id12 id13 id14 id15 id16 id17 id18 id19 id20 id21 id22 id23 id24 id25 id26 id27 id28 id29 id30 id31 id32 id33 id34 id35 id36 id37 id38 id39 id40 id41 id42 id43 id44 id45 id46 id47 id48 id49 id50 id51 id52 id53 id54 id55 id56 id57 id58 id59 id60 id61 id62 id63 id64 id65 id66 id67 id68 id69 id70 id71 id72 id73 id74 id75 id76 id77 id78 id79 id80 id81 id82 id83 id84 id85 id86 id87 id88 id89 id90 id91 id92 id93 id94 id95 id96 id97 id98 id99 id100 id101 id102 id103 id104 id105 id106 id107 id108 id109 id110 id111 id112 id113 id114 id115 id116 id117 id118 id119 id120 id121 id122 id123 id124 id125 id126 id127 id128 id129 id130 id131 id132 id133 id134 id135 id136 id137 id138 id139 id140 id141 id142 id143 id144 id145 id146 id147 id148 id149 id150 id151 id152 id153 id154 id155 id156 id157 id158 id159 id160 id161 id162 id163 id164 id165 id166"
   ooo:slide="id1" />
 </defs>
 <defs
   id="defs173"
   class="EmbeddedBulletChars">
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-57356">
   <path
   id="path143"
   d="M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-57354">
   <path
   id="path146"
   d="M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-10146">
   <path
   id="path149"
   d="M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-10132">
   <path
   id="path152"
   d="M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-10007">
   <path
   id="path155"
   d="M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-10004">
   <path
   id="path158"
   d="M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-9679">
   <path
   id="path161"
   d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-8226">
   <path
   id="path164"
   d="M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-8211">
   <path
   id="path167"
   d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z" />
  </g>
  <g
   transform="scale(0.00048828125,-0.00048828125)"
   id="bullet-char-template-61548">
   <path
   id="path170"
   d="M 173,740 C 173,903 231,1043 346,1159 462,1274 601,1332 765,1332 928,1332 1067,1274 1183,1159 1299,1043 1357,903 1357,740 1357,577 1299,437 1183,322 1067,206 928,148 765,148 601,148 462,206 346,322 231,437 173,577 173,740 Z" />
  </g>
 </defs>
 <defs
   id="defs220">
  <g
   class="Master_Slide"
   ooo:name="dummy-master-page"
   id="dummy-master-page">
   <g
   visibility="hidden"
   class="Background"
   id="bg-dummy-master-page" />
   <g
   visibility="hidden"
   class="BackgroundObjects"
   id="bo-dummy-master-page" />
  </g>
  <g
   class="Master_Slide"
   ooo:name="Standard"
   id="id2">
   <g
   class="Background"
   id="bg-id2" />
   <g
   class="BackgroundObjects"
   id="bo-id2">
    <g
   id="g190"
   class="Date/Time"
   ooo:text-adjust="left"
   visibility="hidden">
     <g
   id="id3">
      <rect
   id="rect179"
   height="1086"
   width="9320"
   y="14348"
   x="2000"
   fill="none"
   stroke="none"
   class="BoundingBox" />
      <text
   id="text187"
   class="TextShape"><tspan
     id="tspan185"
     font-weight="400"
     font-size="493px"
     font-family="Liberation Serif, serif"
     class="TextParagraph"><tspan
       id="tspan183"
       y="14784"
       x="2000"
       class="TextPosition"><tspan
         id="tspan181"
         stroke="none"
         fill="rgb(0,0,0)"
         class="PlaceholderText">&lt;Datum/Uhrzeit&gt;</tspan></tspan></tspan></text>

     </g>
    </g>
    <g
   id="g203"
   class="Footer"
   ooo:text-adjust="center"
   visibility="hidden">
     <g
   id="id4">
      <rect
   id="rect192"
   height="1086"
   width="12680"
   y="14348"
   x="13680"
   fill="none"
   stroke="none"
   class="BoundingBox" />
      <text
   id="text200"
   class="TextShape"><tspan
     id="tspan198"
     font-weight="400"
     font-size="493px"
     font-family="Liberation Serif, serif"
     class="TextParagraph"><tspan
       id="tspan196"
       y="14784"
       x="18902"
       class="TextPosition"><tspan
         id="tspan194"
         stroke="none"
         fill="rgb(0,0,0)"
         class="PlaceholderText">&lt;FuÃzeile&gt;</tspan></tspan></tspan></text>

     </g>
    </g>
    <g
   id="g216"
   class="Slide_Number"
   ooo:text-adjust="right"
   visibility="hidden">
     <g
   id="id5">
      <rect
   id="rect205"
   height="1086"
   width="9321"
   y="14348"
   x="28680"
   fill="none"
   stroke="none"
   class="BoundingBox" />
      <text
   id="text213"
   class="TextShape"><tspan
     id="tspan211"
     font-weight="400"
     font-size="493px"
     font-family="Liberation Serif, serif"
     class="TextParagraph"><tspan
       id="tspan209"
       y="14784"
       x="34563"
       class="TextPosition"><tspan
         id="tspan207"
         stroke="none"
         fill="rgb(0,0,0)"
         class="PlaceholderText">&lt;Foliennummer&gt;</tspan></tspan></tspan></text>

     </g>
    </g>
   </g>
  </g>
 </defs>
 <g
   id="g227"
   class="DummySlide">
  <g
   id="g225">
   <g
   clip-path="url(#presentation_clip_path)"
   class="Slide"
   id="dummy-slide">
    <g
   id="g222"
   class="Page"
   ooo:name="dummy-page" />
   </g>
  </g>
 </g>
 <g
   id="g1892"
   class="SlideGroup">
  <g
   id="g1890"
   visibility="hidden">
   <g
   id="container-id1">
    <g
   clip-path="url(#presentation_clip_path)"
   class="Slide"
   id="id1">
     <g
   id="g1886"
   class="Page"
   ooo:name="page1">
      <g
   id="g236"
   class="com.sun.star.drawing.CustomShape">
       <g
   id="id6">
        <rect
   id="rect229"
   height="16489"
   width="40821"
   y="-366"
   x="-632"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path231"
   d="M 19778,16121 L -631,16121 -631,-365 40187,-365 40187,16121 19778,16121 Z"
   stroke="none"
   fill="rgb(255,215,64)" />
        <path
   id="path233"
   d="M 19778,16121 L -631,16121 -631,-365 40187,-365 40187,16121 19778,16121 Z"
   stroke="rgb(255,215,64)"
   fill="none" />
       </g>
      </g>
      <g
   id="g243"
   class="Graphic">
       <g
   id="id7">
        <rect
   id="rect238"
   height="2508"
   width="2508"
   y="12485"
   x="26136"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path240"
   d="M 28392,13739 C 28392,13562 28346,13390 28258,13237 28170,13085 28043,12958 27891,12870 27738,12782 27566,12736 27390,12736 27213,12736 27041,12782 26888,12870 26736,12958 26609,13085 26521,13237 26433,13390 26387,13562 26387,13739 26387,13915 26433,14087 26521,14240 26609,14392 26736,14519 26888,14607 27041,14695 27213,14741 27390,14741 27566,14741 27738,14695 27891,14607 28043,14519 28170,14392 28258,14240 28346,14087 28392,13915 28392,13739 Z M 28185,13638 L 27891,13638 C 27877,13442 27819,13252 27721,13081 27701,13048 27680,13014 27657,12982 27703,12999 27748,13019 27790,13044 27912,13114 28013,13215 28084,13337 28137,13430 28171,13532 28185,13638 Z M 27690,13839 C 27674,13999 27623,14154 27543,14294 27500,14369 27448,14438 27390,14502 27332,14441 27283,14373 27241,14301 27159,14159 27110,14002 27097,13839 L 27690,13839 Z M 27097,13638 C 27112,13475 27163,13317 27245,13174 27286,13103 27334,13037 27390,12976 27449,13040 27502,13110 27545,13186 27625,13324 27675,13479 27690,13638 L 27097,13638 Z M 27068,13080 C 26970,13251 26910,13442 26895,13638 L 26594,13638 C 26608,13532 26642,13430 26695,13338 26766,13216 26867,13115 26989,13044 27035,13018 27083,12996 27133,12979 27110,13012 27088,13046 27068,13080 Z M 26895,13839 C 26909,14034 26967,14224 27065,14394 27085,14429 27107,14463 27131,14497 27082,14480 27034,14458 26989,14432 26867,14362 26766,14261 26695,14139 26642,14046 26608,13944 26594,13839 L 26895,13839 Z M 27719,14392 C 27816,14223 27875,14034 27891,13839 L 28187,13839 C 28173,13944 28139,14046 28086,14138 28015,14260 27914,14361 27792,14432 27748,14458 27701,14479 27652,14496 27676,14462 27698,14428 27719,14392 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g254"
   class="Graphic">
       <g
   id="id8">
        <rect
   id="rect245"
   height="1609"
   width="1609"
   y="12743"
   x="7495"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path247"
   d="M 8685,13032 L 8621,13032 8621,12968 C 8621,12957 8618,12946 8612,12936 8606,12926 8598,12918 8588,12912 8579,12907 8568,12904 8556,12904 8545,12904 8534,12907 8524,12912 8514,12918 8506,12926 8501,12936 8495,12946 8492,12957 8492,12968 L 8492,13032 8106,13032 8106,12968 C 8106,12957 8103,12946 8097,12936 8092,12926 8084,12918 8074,12912 8064,12907 8053,12904 8042,12904 8030,12904 8019,12907 8010,12912 8000,12918 7992,12926 7986,12936 7980,12946 7977,12957 7977,12968 L 7977,13032 7913,13032 C 7879,13032 7846,13041 7817,13058 7787,13075 7763,13100 7746,13129 7729,13158 7720,13192 7720,13225 L 7720,13997 C 7720,14031 7729,14064 7746,14094 7763,14123 7787,14147 7817,14164 7846,14181 7879,14190 7913,14190 L 8685,14190 C 8719,14190 8752,14181 8781,14164 8811,14147 8835,14123 8852,14094 8869,14064 8878,14031 8878,13997 L 8878,13225 C 8878,13192 8869,13158 8852,13129 8835,13100 8811,13075 8781,13058 8752,13041 8719,13032 8685,13032 Z M 7913,13161 L 7977,13161 7977,13225 C 7977,13237 7980,13248 7986,13258 7992,13267 8000,13275 8010,13281 8019,13287 8030,13290 8042,13290 8053,13290 8064,13287 8074,13281 8084,13275 8092,13267 8097,13258 8103,13248 8106,13237 8106,13225 L 8106,13161 8492,13161 8492,13225 C 8492,13237 8495,13248 8501,13258 8506,13267 8514,13275 8524,13281 8534,13287 8545,13290 8556,13290 8568,13290 8579,13287 8588,13281 8598,13275 8606,13267 8612,13258 8618,13248 8621,13237 8621,13225 L 8621,13161 8685,13161 C 8696,13161 8707,13164 8717,13170 8727,13175 8735,13183 8741,13193 8746,13203 8749,13214 8749,13225 L 8749,13483 7849,13483 7849,13225 C 7849,13214 7852,13203 7857,13193 7863,13183 7871,13175 7881,13170 7891,13164 7902,13161 7913,13161 Z M 8685,14062 L 7913,14062 C 7902,14062 7891,14059 7881,14053 7871,14047 7863,14039 7857,14029 7852,14020 7849,14009 7849,13997 L 7849,13611 8749,13611 8749,13997 C 8749,14009 8746,14020 8741,14029 8735,14039 8727,14047 8717,14053 8707,14059 8696,14062 8685,14062 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path249"
   d="M 8106,13804 C 8106,13816 8103,13827 8097,13836 8092,13846 8084,13854 8074,13860 8064,13866 8053,13869 8042,13869 8030,13869 8019,13866 8010,13860 8000,13854 7992,13846 7986,13836 7980,13827 7977,13816 7977,13804 7977,13793 7980,13782 7986,13772 7992,13762 8000,13754 8010,13749 8019,13743 8030,13740 8042,13740 8053,13740 8064,13743 8074,13749 8084,13754 8092,13762 8097,13772 8103,13782 8106,13793 8106,13804 L 8106,13804 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path251"
   d="M 8556,13740 L 8299,13740 8299,13740 C 8288,13740 8277,13743 8267,13749 8257,13754 8249,13762 8243,13772 8238,13782 8235,13793 8235,13804 8235,13816 8238,13827 8243,13836 8249,13846 8257,13854 8267,13860 8277,13866 8288,13869 8299,13869 L 8556,13869 8556,13869 C 8568,13869 8579,13866 8588,13860 8598,13854 8606,13846 8612,13836 8618,13827 8621,13816 8621,13804 8621,13793 8618,13782 8612,13772 8606,13762 8598,13754 8588,13749 8579,13743 8568,13740 8556,13740 L 8556,13740 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g265"
   class="Graphic">
       <g
   id="id9">
        <rect
   id="rect256"
   height="1153"
   width="1153"
   y="3229"
   x="12945"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path258"
   d="M 13844,3482 L 13198,3482 C 13174,3482 13150,3489 13129,3501 13108,3513 13091,3531 13079,3552 13067,3573 13060,3596 13060,3621 L 13060,3989 C 13060,4014 13067,4037 13079,4058 13091,4079 13108,4097 13129,4109 13150,4121 13174,4128 13198,4128 L 13844,4128 C 13868,4128 13892,4121 13913,4109 13934,4097 13951,4079 13963,4058 13975,4037 13982,4014 13982,3989 L 13982,3621 C 13982,3596 13975,3573 13963,3552 13951,3531 13934,3513 13913,3501 13892,3489 13868,3482 13844,3482 Z M 13152,3621 C 13152,3613 13154,3605 13159,3598 13163,3591 13168,3585 13175,3581 13182,3577 13190,3575 13198,3575 L 13844,3575 C 13852,3575 13860,3577 13867,3581 13874,3585 13879,3591 13883,3598 13888,3605 13890,3613 13890,3621 L 13890,3667 13152,3667 13152,3621 Z M 13890,3989 C 13890,3997 13888,4005 13883,4012 13879,4019 13874,4025 13867,4029 13860,4033 13852,4035 13844,4035 L 13198,4035 C 13190,4035 13182,4033 13175,4029 13168,4025 13163,4019 13159,4012 13154,4005 13152,3997 13152,3989 L 13152,3759 13890,3759 13890,3989 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path260"
   d="M 13291,3943 L 13475,3943 13475,3943 C 13483,3943 13491,3941 13498,3937 13505,3933 13511,3927 13515,3920 13519,3913 13521,3905 13521,3897 13521,3889 13519,3881 13515,3874 13511,3867 13505,3861 13498,3857 13491,3853 13483,3851 13475,3851 L 13291,3851 13291,3851 C 13283,3851 13275,3853 13268,3857 13261,3861 13255,3867 13251,3874 13247,3881 13245,3889 13245,3897 13245,3905 13247,3913 13251,3920 13255,3927 13261,3933 13268,3937 13275,3941 13283,3943 13291,3943 L 13291,3943 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path262"
   d="M 13659,3943 L 13751,3943 13751,3943 C 13759,3943 13767,3941 13774,3937 13781,3933 13787,3927 13791,3920 13795,3913 13797,3905 13797,3897 13797,3889 13795,3881 13791,3874 13787,3867 13781,3861 13774,3857 13767,3853 13759,3851 13751,3851 L 13659,3851 13659,3851 C 13651,3851 13643,3853 13636,3857 13629,3861 13623,3867 13619,3874 13615,3881 13613,3889 13613,3897 13613,3905 13615,3913 13619,3920 13623,3927 13629,3933 13636,3937 13643,3941 13651,3943 13659,3943 L 13659,3943 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g272"
   class="Graphic">
       <g
   id="id10">
        <rect
   id="rect267"
   height="1076"
   width="1076"
   y="8288"
   x="8698"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path269"
   d="M 9436,8507 C 9431,8503 9426,8499 9420,8496 9407,8488 9392,8484 9377,8484 9362,8484 9347,8488 9334,8496 9330,8498 9325,8501 9322,8504 L 8935,8891 C 8929,8897 8925,8902 8921,8909 8915,8919 8911,8931 8910,8943 L 8892,9123 C 8891,9124 8891,9125 8891,9127 8891,9134 8893,9142 8897,9148 8899,9151 8901,9154 8904,9157 8907,9160 8910,9162 8913,9164 8919,9168 8927,9170 8934,9170 8934,9170 8934,9170 8935,9170 L 8938,9170 9118,9153 C 9130,9152 9142,9148 9152,9142 9159,9138 9164,9134 9170,9129 L 9557,8742 C 9561,8737 9565,8732 9568,8726 9575,8714 9579,8699 9579,8685 9579,8670 9575,8656 9568,8644 9564,8637 9559,8631 9554,8625 L 9436,8507 Z M 9110,9067 L 8981,9079 8993,8950 9236,8710 9352,8826 9110,9067 Z M 9408,8769 L 9292,8654 9376,8568 9494,8685 9408,8769 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g279"
   class="Graphic">
       <g
   id="id11">
        <rect
   id="rect274"
   height="1062"
   width="1062"
   y="3208"
   x="18778"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path276"
   d="M 19157,4078 C 19089,4077 19021,4062 18960,4032 18958,4031 18957,4030 18955,4029 18946,4024 18939,4017 18934,4008 18929,3999 18926,3989 18926,3979 18926,3976 18926,3973 18927,3971 18928,3963 18930,3956 18934,3950 18939,3941 18947,3933 18956,3928 18962,3924 18969,3922 18976,3921 19012,3916 19047,3904 19079,3885 19081,3885 19082,3884 19084,3883 19043,3851 19009,3812 18983,3767 18947,3706 18929,3636 18929,3566 18929,3543 18931,3520 18935,3498 18936,3490 18938,3483 18942,3477 18947,3467 18955,3460 18964,3455 18968,3452 18972,3450 18977,3449 18983,3447 18988,3446 18994,3446 19004,3446 19014,3449 19023,3454 19028,3457 19034,3462 19038,3466 19062,3498 19092,3525 19127,3545 19163,3566 19203,3579 19245,3583 19246,3552 19255,3522 19270,3495 19280,3479 19291,3464 19305,3452 19316,3441 19328,3432 19341,3424 19370,3408 19403,3399 19436,3399 19469,3399 19502,3408 19531,3424 19547,3434 19562,3446 19575,3460 19577,3461 19578,3462 19580,3463 19584,3466 19589,3467 19595,3467 19599,3467 19604,3466 19608,3464 19616,3460 19625,3458 19633,3458 19644,3458 19654,3461 19663,3466 19672,3471 19679,3479 19684,3488 19690,3497 19692,3507 19692,3517 19692,3522 19692,3527 19690,3532 19684,3558 19674,3583 19661,3606 19653,3619 19645,3631 19636,3642 19633,3715 19612,3786 19575,3849 19535,3919 19477,3977 19408,4017 19338,4057 19259,4078 19179,4078 19173,4078 19166,4078 19160,4078 L 19157,4078 Z M 19160,3993 L 19164,3993 C 19168,3993 19172,3993 19177,3993 19242,3993 19306,3976 19363,3943 19420,3911 19467,3864 19500,3807 19531,3753 19548,3691 19550,3629 19550,3620 19553,3611 19557,3603 19559,3599 19562,3596 19565,3593 19572,3584 19578,3575 19583,3566 19586,3561 19589,3556 19592,3550 19592,3550 19591,3550 19591,3550 19572,3550 19554,3545 19537,3536 19527,3530 19518,3523 19511,3514 19504,3508 19497,3502 19489,3498 19473,3489 19456,3484 19437,3484 19437,3484 19436,3484 19436,3484 19435,3484 19434,3484 19433,3484 19414,3484 19396,3489 19380,3498 19373,3502 19366,3507 19360,3513 19352,3520 19346,3528 19341,3537 19331,3554 19326,3572 19326,3591 19326,3599 19327,3608 19329,3616 L 19340,3664 19291,3668 C 19281,3668 19272,3669 19262,3669 19200,3669 19139,3653 19086,3622 19059,3606 19035,3587 19013,3566 19013,3569 19013,3571 19013,3574 19013,3627 19027,3679 19053,3725 19080,3771 19118,3809 19164,3836 19167,3837 19169,3839 19171,3840 L 19212,3863 19185,3901 C 19166,3926 19142,3947 19115,3963 19101,3971 19086,3977 19071,3983 19099,3990 19128,3993 19157,3993 19158,3993 19159,3993 19160,3993 L 19160,3993 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g286"
   class="Graphic">
       <g
   id="id12">
        <rect
   id="rect281"
   height="985"
   width="985"
   y="1648"
   x="20254"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path283"
   d="M 21036,1943 L 20982,1943 20982,1864 C 20982,1863 20982,1862 20982,1861 20982,1848 20979,1835 20972,1823 20965,1812 20956,1802 20944,1796 20934,1790 20922,1786 20910,1786 L 20582,1786 C 20570,1786 20558,1790 20548,1796 20536,1802 20527,1812 20520,1823 20513,1835 20510,1848 20510,1861 20510,1862 20510,1863 20510,1864 L 20510,1943 20456,1943 C 20438,1943 20420,1948 20405,1957 20389,1966 20376,1980 20366,1996 20357,2011 20352,2030 20352,2048 20352,2048 20352,2048 20352,2048 L 20352,2310 C 20352,2311 20352,2311 20352,2311 20352,2329 20357,2347 20366,2363 20376,2379 20389,2392 20405,2401 20420,2411 20438,2415 20456,2416 L 20490,2416 C 20490,2429 20494,2443 20501,2455 20508,2467 20518,2477 20530,2484 20541,2491 20555,2494 20569,2494 L 20923,2494 C 20937,2494 20951,2491 20962,2484 20974,2477 20984,2467 20991,2455 20998,2443 21002,2429 21002,2416 L 21036,2416 C 21054,2415 21072,2411 21087,2401 21103,2392 21116,2379 21126,2363 21135,2347 21140,2329 21140,2311 21140,2311 21140,2311 21140,2310 L 21140,2048 C 21140,2048 21140,2048 21140,2048 21140,2030 21135,2011 21126,1996 21116,1980 21103,1966 21087,1957 21072,1948 21054,1943 21036,1943 Z M 20589,1864 L 20903,1864 20903,1943 20589,1943 20589,1864 Z M 20569,2416 L 20569,2258 20923,2258 20923,2416 20569,2416 Z M 21061,2310 C 21061,2311 21061,2311 21061,2311 21061,2315 21060,2320 21057,2324 21055,2328 21052,2331 21048,2333 21044,2335 21040,2337 21036,2337 L 21002,2337 21002,2258 C 21002,2244 20998,2231 20991,2219 20984,2207 20974,2197 20962,2190 20951,2183 20937,2179 20923,2179 L 20569,2179 C 20555,2179 20541,2183 20530,2190 20518,2197 20508,2207 20501,2219 20494,2231 20490,2244 20490,2258 L 20490,2337 20456,2337 C 20452,2337 20448,2335 20444,2333 20440,2331 20437,2328 20435,2324 20432,2320 20431,2315 20431,2311 20431,2311 20431,2311 20431,2310 L 20431,2048 C 20431,2048 20431,2048 20431,2048 20431,2043 20432,2039 20435,2035 20437,2031 20440,2028 20444,2025 20448,2023 20452,2022 20456,2022 L 21036,2022 C 21040,2022 21044,2023 21048,2025 21052,2028 21055,2031 21057,2035 21060,2039 21061,2043 21061,2048 21061,2048 21061,2048 21061,2048 L 21061,2310 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g293"
   class="Graphic">
       <g
   id="id13">
        <rect
   id="rect288"
   height="1319"
   width="1319"
   y="5453"
   x="6475"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path290"
   d="M 7134,5585 C 7425,5585 7661,5821 7661,6112 7661,6403 7425,6639 7134,6639 6843,6639 6607,6403 6607,6112 6607,5821 6843,5585 7134,5585 Z M 6923,5747 C 6859,5784 6806,5837 6769,5901 6732,5965 6712,6038 6712,6112 6712,6186 6732,6259 6769,6323 6806,6387 6859,6440 6923,6477 6987,6514 7060,6534 7134,6534 7208,6534 7281,6514 7345,6477 7409,6440 7462,6387 7499,6323 7536,6259 7556,6186 7556,6112 7556,6038 7536,5965 7499,5901 7462,5837 7409,5784 7345,5747 7281,5710 7208,5690 7134,5690 7060,5690 6987,5710 6923,5747 Z M 7398,6165 C 7398,6211 7385,6256 7362,6297 7339,6337 7306,6370 7266,6393 7226,6416 7180,6428 7134,6428 7088,6428 7042,6416 7002,6393 6962,6370 6929,6337 6906,6297 6883,6256 6870,6211 6870,6165 L 7398,6165 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g302"
   class="Graphic">
       <g
   id="id14">
        <rect
   id="rect295"
   height="1760"
   width="1760"
   y="12458"
   x="11774"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path297"
   d="M 12689,12643 C 12678,12650 12669,12658 12663,12669 12657,12680 12654,12692 12654,12704 L 12654,13267 C 12654,13279 12657,13292 12663,13302 12669,13313 12678,13322 12689,13328 12699,13334 12712,13338 12724,13338 L 13287,13338 C 13299,13338 13311,13334 13322,13328 13333,13322 13341,13313 13348,13302 13354,13292 13357,13279 13357,13267 13357,13156 13328,13047 13272,12951 13217,12854 13137,12774 13040,12719 12944,12663 12835,12634 12724,12634 12712,12634 12699,12637 12689,12643 Z M 12794,13197 L 12794,12780 C 12856,12788 12916,12809 12970,12840 13045,12884 13107,12946 13151,13021 13182,13075 13203,13135 13211,13197 L 12794,13197 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path299"
   d="M 13274,13482 C 13266,13480 13258,13478 13250,13478 13238,13478 13226,13482 13215,13488 13205,13494 13196,13503 13189,13514 13187,13517 13185,13521 13184,13525 13173,13558 13158,13589 13141,13619 13091,13705 13020,13776 12935,13825 12849,13875 12752,13901 12653,13901 12555,13901 12457,13875 12372,13825 12286,13776 12215,13705 12166,13619 12116,13534 12090,13436 12090,13338 12090,13239 12116,13142 12166,13056 12215,12971 12286,12900 12372,12850 12402,12833 12433,12818 12466,12807 12470,12806 12474,12804 12478,12801 12488,12795 12497,12786 12503,12776 12510,12765 12513,12753 12513,12740 12513,12728 12510,12716 12503,12705 12497,12695 12488,12686 12478,12680 12467,12673 12455,12670 12442,12670 12435,12670 12427,12671 12419,12674 12378,12688 12339,12706 12302,12728 12195,12790 12106,12879 12044,12986 11982,13093 11950,13214 11950,13337 11950,13461 11982,13582 12044,13689 12106,13796 12195,13885 12302,13947 12409,14009 12530,14041 12654,14041 12777,14041 12898,14009 13005,13947 13112,13885 13201,13796 13263,13689 13285,13652 13303,13613 13317,13572 13320,13564 13321,13557 13321,13549 13321,13536 13318,13524 13311,13514 13305,13503 13296,13494 13286,13488 13282,13486 13278,13484 13274,13482 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g309"
   class="Graphic">
       <g
   id="id15">
        <rect
   id="rect304"
   height="1219"
   width="1219"
   y="4410"
   x="19747"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path306"
   d="M 20792,4616 L 20792,4612 C 20791,4610 20790,4608 20789,4607 20787,4603 20785,4600 20782,4597 20779,4595 20776,4592 20773,4590 20771,4589 20769,4589 20768,4588 L 20763,4588 C 20762,4587 20760,4586 20759,4585 20755,4583 20752,4581 20748,4581 L 20746,4581 C 20743,4580 20741,4580 20738,4580 20736,4580 20734,4580 20731,4581 L 19854,4873 C 19851,4874 19848,4875 19845,4877 19838,4881 19831,4887 19827,4895 19823,4902 19821,4911 19821,4919 19821,4928 19823,4936 19827,4943 19831,4951 19838,4957 19845,4961 19848,4963 19851,4964 19854,4965 L 20270,5104 20408,5519 C 20409,5523 20411,5526 20412,5529 20416,5536 20423,5542 20430,5546 20437,5551 20446,5553 20454,5553 20463,5553 20471,5551 20479,5546 20486,5542 20492,5536 20497,5529 20498,5526 20500,5523 20501,5519 L 20793,4642 C 20794,4639 20794,4635 20794,4630 20794,4630 20794,4630 20794,4629 20794,4625 20793,4620 20792,4616 Z M 20565,4741 L 20294,5012 20023,4922 20565,4741 Z M 20453,5352 L 20363,5081 20634,4810 20453,5352 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g316"
   class="Graphic">
       <g
   id="id16">
        <rect
   id="rect311"
   height="1593"
   width="1593"
   y="14956"
   x="14334"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path313"
   d="M 15340,15235 C 15328,15223 15314,15213 15300,15204 15271,15188 15238,15179 15205,15179 L 14748,15179 C 14714,15179 14681,15188 14652,15204 14623,15221 14599,15245 14582,15274 14566,15303 14557,15336 14557,15370 L 14557,16134 C 14557,16168 14566,16201 14582,16230 14599,16259 14623,16283 14652,16300 14681,16316 14714,16325 14748,16325 L 15512,16325 C 15546,16325 15579,16316 15608,16300 15637,16283 15661,16259 15678,16230 15694,16201 15703,16168 15703,16134 L 15703,15677 C 15703,15644 15694,15611 15678,15582 15669,15568 15659,15554 15647,15542 L 15340,15235 Z M 15003,16198 L 15003,16070 15257,16070 15257,16198 15003,16198 Z M 15576,16134 C 15576,16145 15573,16156 15567,16166 15562,16176 15554,16184 15544,16189 15534,16195 15523,16198 15512,16198 L 15385,16198 15385,16007 C 15385,15996 15382,15985 15376,15975 15371,15965 15363,15957 15353,15952 15343,15946 15332,15943 15321,15943 L 14939,15943 C 14928,15943 14917,15946 14907,15952 14897,15957 14889,15965 14884,15975 14878,15985 14875,15996 14875,16007 L 14875,16198 14748,16198 C 14737,16198 14726,16195 14716,16189 14706,16184 14698,16176 14693,16166 14687,16156 14684,16145 14684,16134 L 14684,15370 C 14684,15359 14687,15348 14693,15338 14698,15328 14706,15320 14716,15315 14726,15309 14737,15306 14748,15306 L 14875,15306 14875,15625 C 14875,15636 14878,15647 14884,15656 14889,15666 14897,15674 14907,15680 14917,15685 14928,15688 14939,15688 L 15194,15688 C 15205,15688 15216,15685 15226,15680 15235,15674 15243,15666 15249,15656 15254,15647 15257,15636 15257,15625 15257,15613 15254,15602 15249,15593 15243,15583 15235,15575 15226,15569 15216,15564 15205,15561 15194,15561 L 15003,15561 15003,15306 15205,15306 C 15216,15306 15227,15309 15237,15315 15242,15318 15246,15321 15250,15325 L 15557,15632 C 15561,15636 15564,15641 15567,15645 15573,15655 15576,15666 15576,15677 15576,15677 15576,15677 15576,15677 L 15576,16134 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g323"
   class="Graphic">
       <g
   id="id17">
        <rect
   id="rect318"
   height="1881"
   width="1881"
   y="8805"
   x="17216"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path320"
   d="M 18607,9219 L 18607,9143 C 18607,9117 18600,9091 18587,9068 18574,9045 18555,9026 18532,9013 18509,9000 18483,8993 18457,8993 L 17855,8993 C 17829,8993 17803,9000 17780,9013 17757,9026 17738,9045 17725,9068 17712,9091 17705,9117 17705,9143 L 17705,9219 C 17665,9219 17626,9229 17592,9249 17558,9269 17529,9297 17509,9331 17490,9366 17479,9405 17479,9444 L 17479,10271 C 17479,10311 17490,10350 17509,10384 17529,10418 17558,10447 17592,10467 17626,10487 17665,10497 17705,10497 L 18607,10497 C 18647,10497 18686,10487 18720,10467 18754,10447 18783,10418 18803,10384 18822,10350 18833,10311 18833,10271 L 18833,9444 C 18833,9405 18822,9366 18803,9331 18783,9297 18754,9269 18720,9249 18686,9229 18647,9219 18607,9219 Z M 17855,9143 L 18457,9143 18457,9444 17855,9444 17855,9143 Z M 18682,10271 C 18682,10285 18679,10298 18672,10309 18666,10320 18656,10330 18645,10337 18633,10343 18620,10347 18607,10347 L 17705,10347 C 17692,10347 17679,10343 17667,10337 17656,10330 17646,10320 17640,10309 17633,10298 17630,10285 17630,10271 L 17630,9444 C 17630,9431 17633,9418 17640,9407 17646,9395 17656,9386 17667,9379 17679,9372 17692,9369 17705,9369 L 17705,9444 C 17705,9471 17712,9497 17725,9519 17738,9542 17757,9561 17780,9574 17803,9588 17829,9595 17855,9595 L 18457,9595 C 18483,9595 18509,9588 18532,9574 18555,9561 18574,9542 18587,9519 18600,9497 18607,9471 18607,9444 L 18607,9369 C 18620,9369 18633,9372 18645,9379 18656,9386 18666,9395 18672,9407 18679,9418 18682,9431 18682,9444 L 18682,10271 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g330"
   class="Graphic">
       <g
   id="id18">
        <rect
   id="rect325"
   height="1461"
   width="1461"
   y="817"
   x="1487"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path327"
   d="M 2778,1501 L 2509,1285 2509,1138 C 2509,1136 2509,1135 2509,1133 2509,1113 2504,1094 2494,1077 2484,1060 2470,1046 2453,1036 2438,1027 2421,1022 2403,1021 L 1738,1021 C 1720,1022 1704,1028 1689,1036 1672,1046 1658,1060 1648,1077 1638,1094 1633,1113 1633,1133 1633,1135 1633,1136 1633,1138 L 1633,1722 C 1633,1723 1633,1724 1633,1725 1633,1745 1638,1766 1649,1783 1659,1801 1674,1816 1691,1826 1695,1828 1699,1830 1703,1832 1694,1853 1690,1876 1690,1898 1690,1929 1698,1959 1714,1986 1729,2013 1751,2035 1778,2050 1804,2065 1835,2073 1865,2073 1896,2073 1926,2065 1953,2050 1979,2035 2002,2013 2017,1986 2032,1959 2040,1929 2040,1898 2040,1878 2037,1858 2030,1839 L 2402,1839 C 2395,1858 2391,1878 2391,1899 2391,1930 2399,1960 2415,1986 2430,2013 2452,2035 2479,2051 2505,2066 2535,2074 2566,2074 2597,2074 2627,2066 2654,2051 2680,2035 2703,2013 2718,1986 2733,1960 2741,1930 2741,1899 2741,1878 2738,1858 2731,1839 L 2743,1839 C 2753,1839 2763,1836 2772,1831 2781,1826 2788,1819 2793,1810 2798,1801 2801,1791 2801,1781 L 2801,1547 C 2801,1537 2798,1528 2793,1519 2789,1512 2784,1506 2778,1501 Z M 2684,1575 L 2684,1722 2509,1722 2509,1435 2684,1575 Z M 1925,1897 C 1925,1908 1922,1918 1917,1927 1912,1935 1905,1943 1896,1948 1887,1953 1877,1956 1867,1956 1856,1956 1846,1953 1837,1948 1829,1943 1821,1935 1816,1927 1811,1918 1808,1908 1808,1897 1808,1887 1811,1877 1816,1868 1821,1859 1829,1852 1837,1847 1846,1842 1856,1839 1867,1839 1877,1839 1887,1842 1896,1847 1905,1852 1912,1859 1917,1868 1922,1877 1925,1887 1925,1897 Z M 2217,1722 L 1750,1722 1750,1138 2392,1138 2392,1722 2217,1722 Z M 2626,1897 C 2626,1908 2623,1918 2618,1927 2613,1935 2605,1943 2597,1948 2588,1953 2578,1956 2567,1956 2557,1956 2547,1953 2538,1948 2529,1943 2522,1935 2517,1927 2512,1918 2509,1908 2509,1897 2509,1887 2512,1877 2517,1868 2522,1859 2529,1852 2538,1847 2547,1842 2557,1839 2567,1839 2578,1839 2588,1842 2597,1847 2605,1852 2613,1859 2618,1868 2623,1877 2626,1887 2626,1897 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g337"
   class="Graphic">
       <g
   id="id19">
        <rect
   id="rect332"
   height="1426"
   width="1426"
   y="584"
   x="14551"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path334"
   d="M 15663,1012 L 15492,1012 15492,926 C 15492,901 15485,876 15472,855 15460,833 15442,815 15420,803 15399,790 15374,784 15349,784 L 15178,784 C 15153,784 15128,790 15107,803 15085,815 15067,833 15055,855 15042,876 15036,901 15036,926 L 15036,1012 14865,1012 C 14834,1012 14805,1019 14779,1034 14753,1049 14731,1071 14716,1097 14701,1123 14694,1152 14694,1183 L 14694,1639 C 14694,1669 14701,1698 14716,1724 14731,1750 14753,1772 14779,1787 14805,1802 14834,1810 14865,1810 L 15663,1810 C 15693,1810 15722,1802 15748,1787 15774,1772 15796,1750 15811,1724 15826,1698 15834,1669 15834,1639 L 15834,1183 C 15834,1152 15826,1123 15811,1097 15796,1071 15774,1049 15748,1034 15722,1019 15693,1012 15663,1012 Z M 15435,1126 L 15435,1696 15093,1696 15093,1126 15435,1126 Z M 15150,926 C 15150,921 15151,916 15153,912 15156,907 15159,904 15164,901 15168,899 15173,898 15178,898 L 15349,898 C 15354,898 15359,899 15363,901 15368,904 15371,907 15374,912 15376,916 15378,921 15378,926 L 15378,1012 15150,1012 15150,926 Z M 14808,1639 L 14808,1183 C 14808,1172 14810,1163 14815,1154 14820,1145 14827,1138 14836,1133 14845,1128 14854,1126 14865,1126 L 14979,1126 14979,1696 14865,1696 C 14854,1696 14845,1693 14836,1688 14827,1683 14820,1676 14815,1667 14810,1658 14808,1649 14808,1639 Z M 15720,1639 C 15720,1649 15717,1658 15712,1667 15707,1676 15700,1683 15691,1688 15682,1693 15673,1696 15663,1696 L 15549,1696 15549,1126 15663,1126 C 15673,1126 15682,1128 15691,1133 15700,1138 15707,1145 15712,1154 15717,1163 15720,1172 15720,1183 L 15720,1639 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g344"
   class="Graphic">
       <g
   id="id20">
        <rect
   id="rect339"
   height="1208"
   width="1208"
   y="7384"
   x="16515"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path341"
   d="M 16839,8382 C 16815,8368 16793,8351 16774,8331 16754,8312 16736,8290 16722,8266 16697,8222 16683,8172 16683,8121 16683,8070 16697,8020 16722,7976 16734,7956 16747,7938 16763,7921 L 17119,7563 C 17131,7550 17145,7540 17159,7531 17190,7514 17224,7505 17259,7505 17260,7505 17262,7505 17263,7505 17301,7505 17338,7515 17371,7534 17388,7544 17404,7556 17417,7570 17432,7584 17444,7599 17454,7616 17472,7648 17482,7685 17482,7722 17482,7758 17472,7795 17454,7827 17446,7841 17436,7854 17425,7866 L 17067,8225 C 17060,8232 17051,8239 17042,8244 17023,8255 17002,8261 16980,8261 16980,8261 16980,8261 16980,8261 16980,8261 16980,8261 16980,8261 16957,8261 16934,8255 16914,8243 16904,8237 16894,8230 16886,8221 16877,8213 16870,8203 16864,8193 16852,8173 16846,8151 16846,8128 16846,8106 16852,8083 16864,8064 16869,8055 16875,8047 16882,8039 L 17212,7708 C 17213,7707 17213,7707 17214,7706 17222,7702 17230,7700 17238,7700 17247,7700 17255,7702 17263,7706 17270,7711 17276,7717 17280,7724 17284,7731 17287,7740 17287,7748 17287,7757 17284,7765 17280,7772 17279,7774 17279,7775 17278,7776 L 16948,8107 C 16947,8109 16946,8110 16945,8112 16942,8117 16941,8122 16941,8128 16941,8134 16942,8140 16945,8145 16947,8148 16949,8151 16952,8153 16954,8155 16957,8158 16960,8159 16965,8162 16971,8164 16978,8164 16978,8164 16978,8164 16978,8164 16983,8164 16987,8163 16991,8161 16993,8159 16995,8158 16997,8156 L 17354,7798 C 17359,7792 17364,7785 17368,7779 17378,7761 17383,7742 17383,7722 17383,7702 17378,7682 17368,7665 17362,7655 17355,7646 17346,7638 17339,7630 17330,7624 17321,7618 17304,7608 17284,7603 17264,7603 17243,7603 17224,7608 17206,7618 17200,7622 17194,7626 17189,7631 L 16832,7988 C 16822,7998 16813,8010 16806,8023 16789,8052 16780,8085 16780,8119 16780,8153 16789,8186 16806,8216 16816,8233 16828,8248 16842,8261 16856,8275 16871,8287 16887,8296 16918,8314 16952,8323 16987,8324 16988,8324 16988,8324 16989,8324 17020,8324 17050,8315 17077,8300 17090,8292 17102,8283 17113,8272 L 17470,7914 C 17473,7911 17476,7908 17480,7906 17487,7902 17496,7899 17504,7899 17513,7899 17521,7902 17528,7906 17536,7910 17542,7916 17546,7924 17550,7931 17553,7939 17553,7948 17553,7956 17550,7964 17546,7972 17544,7975 17541,7979 17539,7982 L 17182,8340 C 17164,8358 17145,8373 17124,8385 17082,8409 17035,8422 16988,8422 16935,8422 16884,8408 16839,8382 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g351"
   class="Graphic">
       <g
   id="id21">
        <rect
   id="rect346"
   height="661"
   width="661"
   y="8733"
   x="22540"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path348"
   d="M 22606,8891 L 22606,9235 C 22606,9286 22647,9327 22698,9327 L 22976,9327 23134,9169 23134,8891 C 23134,8840 23093,8799 23042,8799 L 22698,8799 C 22647,8799 22606,8840 22606,8891 Z M 23035,8852 C 23043,8852 23051,8854 23058,8858 23065,8862 23071,8868 23075,8875 23079,8882 23081,8890 23081,8898 L 23081,9142 23042,9142 C 22990,9142 22949,9183 22949,9235 L 22949,9274 22705,9274 C 22697,9274 22689,9272 22682,9268 22675,9264 22669,9258 22665,9251 22661,9244 22659,9236 22659,9228 L 22659,8898 C 22659,8890 22661,8882 22665,8875 22669,8868 22675,8862 22682,8858 22689,8854 22697,8852 22705,8852 L 23035,8852 Z M 22922,8927 C 22897,8933 22883,8959 22890,8984 22891,8988 22893,8992 22895,8995 L 22980,8972 C 22980,8968 22980,8963 22979,8959 22973,8939 22955,8925 22934,8925 22930,8925 22926,8925 22922,8927 Z M 22756,8972 C 22732,8979 22717,9004 22724,9029 22725,9033 22727,9037 22730,9041 L 22815,9018 C 22815,9013 22814,9009 22813,9004 22808,8984 22789,8971 22769,8971 22764,8971 22760,8971 22756,8972 Z M 22995,9043 L 22754,9110 C 22788,9150 22844,9167 22895,9153 22947,9139 22985,9096 22995,9043 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g358"
   class="Graphic">
       <g
   id="id22">
        <rect
   id="rect353"
   height="1396"
   width="1396"
   y="14953"
   x="19597"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path355"
   d="M 20016,15803 C 19999,15793 19984,15779 19975,15762 19965,15745 19960,15726 19960,15706 19960,15687 19965,15667 19975,15651 19984,15634 19999,15619 20016,15610 20032,15600 20052,15595 20071,15595 20091,15595 20110,15600 20127,15610 20144,15619 20158,15634 20168,15651 20178,15667 20183,15687 20183,15706 20183,15726 20178,15745 20168,15762 20158,15779 20144,15793 20127,15803 20110,15813 20091,15818 20071,15818 20052,15818 20032,15813 20016,15803 Z M 20295,15762 L 20378,15930 20211,15930 20295,15762 Z M 20462,15803 C 20445,15793 20431,15779 20421,15762 20411,15745 20406,15726 20406,15706 20406,15687 20411,15667 20421,15651 20431,15634 20445,15619 20462,15610 20479,15600 20498,15595 20518,15595 20537,15595 20557,15600 20574,15610 20590,15619 20605,15634 20614,15651 20624,15667 20629,15687 20629,15706 20629,15726 20624,15745 20614,15762 20605,15779 20590,15793 20574,15803 20557,15813 20537,15818 20518,15818 20498,15818 20479,15813 20462,15803 Z M 20778,15316 C 20729,15231 20658,15160 20574,15111 20489,15062 20392,15037 20295,15037 20197,15037 20100,15062 20016,15111 19931,15160 19860,15231 19811,15316 19762,15401 19737,15497 19737,15595 19737,15751 19803,15890 19904,15991 L 19904,16209 20685,16209 20685,15991 C 20786,15890 20853,15751 20853,15595 20853,15497 20827,15401 20778,15316 Z M 20574,16097 L 20462,16097 20462,15985 20350,15985 20350,16097 20239,16097 20239,15985 20127,15985 20127,16097 20016,16097 20016,15941 C 19915,15857 19848,15734 19848,15595 19848,15516 19869,15439 19908,15372 19947,15304 20003,15247 20071,15208 20139,15169 20216,15148 20295,15148 20373,15148 20450,15169 20518,15208 20586,15247 20642,15304 20681,15372 20720,15439 20741,15516 20741,15595 20741,15734 20674,15863 20574,15941 L 20574,16097 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g365"
   class="Graphic">
       <g
   id="id23">
        <rect
   id="rect360"
   height="661"
   width="661"
   y="5997"
   x="26790"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path362"
   d="M 27305,6150 C 27336,6163 27358,6198 27358,6235 27358,6417 27210,6565 27028,6565 26991,6565 26959,6543 26943,6512 L 26882,6551 26882,6393 26943,6433 C 26959,6401 26991,6380 27028,6380 27107,6380 27173,6314 27173,6235 27173,6198 27194,6166 27226,6150 L 27186,6089 27344,6089 27305,6150 27305,6150 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g372"
   class="Graphic">
       <g
   id="id24">
        <rect
   id="rect367"
   height="2981"
   width="2981"
   y="5597"
   x="208"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path369"
   d="M 1347,7333 C 1499,7550 1683,7698 1849,7800 1907,7834 1979,7830 2034,7792 L 2244,7644 C 2300,7606 2328,7539 2315,7473 2278,7282 2200,7059 2048,6842 1655,6281 1207,6387 1207,6387 1207,6387 954,6772 1347,7333 Z M 1936,7652 C 1756,7544 1606,7404 1487,7235 1260,6909 1287,6665 1321,6550 1441,6557 1680,6615 1908,6940 2026,7109 2106,7298 2146,7504 L 1936,7652 Z M 2749,7395 L 2402,7476 C 2376,7335 2334,7199 2277,7071 L 2749,7395 Z M 1628,8181 L 1485,7626 C 1585,7724 1698,7810 1822,7883 L 1628,8181 Z M 1698,7087 C 1620,7141 1513,7122 1459,7045 1405,6968 1424,6861 1501,6807 1578,6753 1686,6772 1740,6849 1794,6926 1775,7033 1698,7087 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g379"
   class="Graphic">
       <g
   id="id25">
        <rect
   id="rect374"
   height="661"
   width="661"
   y="13174"
   x="14403"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path376"
   d="M 14971,13557 C 14971,13455 14888,13372 14786,13372 L 14759,13372 14759,13338 C 14775,13329 14786,13312 14786,13293 14786,13264 14762,13240 14733,13240 14704,13240 14680,13264 14680,13293 14680,13312 14691,13329 14707,13338 L 14707,13372 14680,13372 C 14578,13372 14495,13455 14495,13557 L 14469,13557 C 14454,13557 14443,13569 14443,13583 L 14443,13662 C 14443,13677 14454,13689 14469,13689 L 14495,13689 14495,13715 C 14495,13745 14519,13768 14548,13768 L 14918,13768 C 14947,13768 14971,13745 14971,13715 L 14971,13689 14997,13689 C 15012,13689 15023,13677 15023,13662 L 15023,13583 C 15023,13569 15012,13557 14997,13557 L 14971,13557 Z M 14653,13614 L 14614,13653 14556,13595 C 14546,13585 14546,13567 14556,13557 14567,13546 14584,13546 14595,13557 L 14614,13576 14633,13557 C 14644,13546 14661,13546 14672,13557 14683,13567 14683,13585 14672,13595 L 14653,13614 Z M 14910,13595 L 14891,13614 14852,13653 14794,13595 C 14783,13585 14783,13567 14794,13557 14805,13546 14822,13546 14833,13557 L 14852,13576 14871,13557 C 14882,13546 14899,13546 14910,13557 14920,13567 14920,13585 14910,13595 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g386"
   class="Graphic">
       <g
   id="id26">
        <rect
   id="rect381"
   height="661"
   width="661"
   y="11461"
   x="15574"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path383"
   d="M 16097,11996 C 16084,12018 16060,12030 16036,12029 L 15983,12029 15983,12081 15917,11963 15983,11844 15983,11897 16058,11897 15999,11795 16113,11729 16161,11811 C 16175,11832 16176,11859 16163,11881 L 16097,11996 Z M 15962,11555 C 15988,11555 16011,11570 16021,11592 L 16048,11638 16094,11611 16024,11728 15888,11730 15934,11704 15896,11639 15838,11741 15723,11675 15771,11592 C 15782,11570 15804,11555 15830,11555 L 15962,11555 Z M 15721,11996 L 15655,11882 C 15642,11859 15643,11832 15657,11812 L 15683,11766 15638,11740 15773,11742 15843,11859 15798,11832 15760,11897 15878,11897 15878,12029 15783,12029 C 15758,12030 15734,12018 15721,11996 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g393"
   class="Graphic">
       <g
   id="id27">
        <rect
   id="rect388"
   height="661"
   width="661"
   y="10846"
   x="13339"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path390"
   d="M 13827,10938 L 13511,10938 13511,11044 13827,11044 13827,10938 Z M 13841,11172 C 13837,11170 13833,11167 13831,11163 13829,11159 13827,11154 13827,11150 13827,11145 13829,11140 13831,11136 13833,11132 13837,11129 13841,11127 13845,11124 13849,11123 13854,11123 13858,11123 13863,11124 13867,11127 13871,11129 13874,11132 13877,11136 13879,11140 13880,11145 13880,11150 13880,11154 13879,11159 13877,11163 13874,11167 13871,11170 13867,11172 13863,11175 13858,11176 13854,11176 13849,11176 13845,11175 13841,11172 Z M 13775,11361 L 13563,11361 13563,11229 13775,11229 13775,11361 Z M 13854,11070 L 13484,11070 C 13470,11070 13457,11074 13445,11081 13433,11088 13423,11098 13416,11110 13409,11122 13405,11136 13405,11150 L 13405,11308 13511,11308 13511,11414 13827,11414 13827,11308 13933,11308 13933,11150 C 13933,11136 13929,11122 13922,11110 13915,11098 13905,11088 13893,11081 13881,11074 13868,11070 13854,11070 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g400"
   class="Graphic">
       <g
   id="id28">
        <rect
   id="rect395"
   height="1666"
   width="1666"
   y="342"
   x="28064"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path397"
   d="M 28297,1041 L 28297,1039 C 28297,856 28447,708 28630,708 28739,708 28836,761 28897,842 28957,761 29054,708 29163,708 29347,708 29496,857 29496,1041 29496,1190 29442,1326 29353,1430 L 29443,1521 29349,1615 29255,1521 C 29156,1596 29030,1641 28897,1641 28763,1641 28637,1596 28538,1521 L 28444,1615 28350,1521 28440,1430 C 28351,1326 28297,1190 28297,1041 Z M 28897,1163 L 28633,1426 C 28708,1478 28799,1508 28897,1508 28994,1508 29085,1478 29160,1426 L 28897,1163 Z M 28630,842 C 28520,842 28430,931 28430,1041 28430,1153 28470,1255 28535,1336 L 28830,1041 C 28830,931 28740,842 28630,842 Z M 29258,1336 C 29323,1255 29363,1153 29363,1041 29363,930 29273,842 29163,842 29053,842 28963,931 28963,1041 L 29258,1336 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g407"
   class="Graphic">
       <g
   id="id29">
        <rect
   id="rect402"
   height="661"
   width="661"
   y="8963"
   x="19953"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path404"
   d="M 20072,9029 C 20043,9029 20019,9053 20019,9082 L 20019,9504 C 20019,9534 20043,9557 20072,9557 L 20494,9557 C 20524,9557 20547,9534 20547,9504 L 20547,9082 C 20547,9053 20524,9029 20494,9029 L 20072,9029 Z M 20362,9346 L 20362,9504 20204,9504 20204,9346 20212,9346 C 20227,9346 20238,9334 20238,9319 L 20238,9082 20329,9082 20329,9319 C 20329,9334 20341,9346 20355,9346 L 20362,9346 Z M 20146,9082 L 20146,9319 C 20146,9334 20157,9346 20172,9346 L 20177,9346 20177,9504 20072,9504 20072,9082 20146,9082 Z M 20494,9504 L 20389,9504 20389,9346 20395,9346 C 20410,9346 20422,9334 20422,9319 L 20422,9082 20494,9082 20494,9504 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g414"
   class="Graphic">
       <g
   id="id30">
        <rect
   id="rect409"
   height="661"
   width="661"
   y="10197"
   x="21056"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path411"
   d="M 21285,10529 C 21305,10533 21323,10542 21340,10553 21340,10571 21325,10586 21307,10586 21289,10586 21274,10572 21274,10553 21274,10544 21278,10535 21285,10529 Z M 21487,10529 C 21494,10535 21498,10544 21498,10553 21498,10572 21483,10587 21465,10587 21447,10587 21432,10572 21432,10553 21449,10542 21467,10534 21487,10529 Z M 21177,10501 L 21175,10527 C 21175,10559 21182,10591 21197,10620 21260,10611 21323,10606 21386,10606 21449,10606 21512,10611 21575,10620 21590,10591 21597,10559 21597,10527 L 21595,10501 C 21531,10465 21459,10447 21386,10448 21313,10447 21241,10465 21177,10501 Z M 21518,10298 C 21558,10322 21591,10355 21615,10395 21638,10435 21650,10481 21650,10527 21650,10573 21638,10619 21615,10659 21591,10699 21558,10732 21518,10756 21478,10779 21432,10791 21386,10791 21340,10791 21294,10779 21254,10756 21214,10732 21181,10699 21157,10659 21134,10619 21122,10573 21122,10527 21122,10481 21134,10435 21157,10395 21181,10355 21214,10322 21254,10298 21294,10275 21340,10263 21386,10263 21432,10263 21478,10275 21518,10298 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g421"
   class="Graphic">
       <g
   id="id31">
        <rect
   id="rect416"
   height="661"
   width="661"
   y="13873"
   x="18753"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path418"
   d="M 19215,13974 C 19255,13998 19288,14031 19312,14071 19335,14111 19347,14157 19347,14203 19347,14212 19345,14221 19340,14229 19335,14237 19329,14244 19321,14249 19313,14253 19303,14256 19294,14256 L 18872,14256 C 18863,14256 18853,14253 18845,14249 18837,14244 18831,14237 18826,14229 18821,14221 18819,14212 18819,14203 18819,14157 18831,14111 18854,14071 18878,14031 18911,13998 18951,13974 18991,13951 19037,13939 19083,13939 19129,13939 19175,13951 19215,13974 Z M 19109,14090 C 19117,14086 19124,14079 19129,14071 19133,14063 19136,14054 19136,14045 19136,14035 19133,14026 19129,14018 19124,14010 19117,14004 19109,13999 19101,13994 19092,13992 19083,13992 19074,13992 19065,13994 19057,13999 19049,14004 19042,14010 19037,14018 19033,14026 19030,14035 19030,14045 19030,14054 19033,14063 19037,14071 19042,14079 19049,14086 19057,14090 19065,14095 19074,14097 19083,14097 19092,14097 19101,14095 19109,14090 Z M 19241,14196 C 19249,14191 19256,14185 19261,14177 19265,14169 19268,14159 19268,14150 19268,14141 19265,14132 19261,14124 19256,14116 19249,14109 19241,14104 19233,14100 19224,14097 19215,14097 19206,14097 19197,14100 19189,14104 19181,14109 19174,14116 19169,14124 19165,14132 19162,14141 19162,14150 19162,14159 19165,14169 19169,14177 19174,14185 19181,14191 19189,14196 19197,14201 19206,14203 19215,14203 19224,14203 19233,14201 19241,14196 Z M 18977,14196 C 18985,14191 18992,14185 18997,14177 19001,14169 19004,14159 19004,14150 19004,14141 19001,14132 18997,14124 18992,14116 18985,14109 18977,14104 18969,14100 18960,14097 18951,14097 18942,14097 18933,14100 18925,14104 18917,14109 18910,14116 18905,14124 18901,14132 18898,14141 18898,14150 18898,14159 18901,14169 18905,14177 18910,14185 18917,14191 18925,14196 18933,14201 18942,14203 18951,14203 18960,14203 18969,14201 18977,14196 Z M 19162,14282 L 19196,14400 19198,14414 C 19198,14443 19174,14467 19145,14467 L 19021,14467 C 19012,14467 19003,14465 18995,14460 18987,14455 18980,14449 18975,14441 18971,14433 18968,14423 18968,14414 L 18970,14400 19004,14282 19162,14282 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g428"
   class="Graphic">
       <g
   id="id32">
        <rect
   id="rect423"
   height="910"
   width="910"
   y="13846"
   x="24105"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path425"
   d="M 24396,13981 C 24346,14009 24305,14051 24276,14101 24247,14150 24232,14207 24232,14264 L 24232,14664 24341,14555 24450,14664 24560,14555 24669,14664 24778,14555 24887,14664 24887,14264 C 24887,14207 24872,14150 24843,14101 24814,14051 24773,14009 24723,13981 24673,13952 24617,13937 24560,13937 24502,13937 24446,13952 24396,13981 Z M 24487,14165 C 24498,14171 24507,14180 24513,14191 24520,14202 24523,14215 24523,14228 24523,14241 24520,14253 24513,14264 24507,14275 24498,14284 24487,14291 24476,14297 24463,14301 24450,14301 24438,14301 24425,14297 24414,14291 24403,14284 24394,14275 24387,14264 24381,14253 24378,14241 24378,14228 24378,14215 24381,14202 24387,14191 24394,14180 24403,14171 24414,14165 24425,14158 24438,14155 24450,14155 24463,14155 24476,14158 24487,14165 Z M 24669,14155 C 24681,14155 24694,14158 24705,14165 24716,14171 24725,14180 24732,14191 24738,14202 24741,14215 24741,14228 24741,14241 24738,14253 24732,14264 24725,14275 24716,14284 24705,14291 24694,14297 24681,14301 24669,14301 24656,14301 24643,14297 24632,14291 24621,14284 24612,14275 24606,14264 24599,14253 24596,14241 24596,14228 24596,14215 24599,14202 24606,14191 24612,14180 24621,14171 24632,14165 24643,14158 24656,14155 24669,14155 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g435"
   class="Graphic">
       <g
   id="id33">
        <rect
   id="rect430"
   height="661"
   width="661"
   y="13265"
   x="21269"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path432"
   d="M 21487,13416 C 21481,13419 21476,13424 21472,13430 21469,13436 21467,13443 21467,13450 21467,13457 21469,13464 21472,13470 21476,13476 21481,13481 21487,13484 21493,13488 21500,13489 21507,13489 21514,13489 21520,13488 21526,13484 21532,13481 21537,13476 21541,13470 21544,13464 21546,13457 21546,13450 21546,13443 21544,13436 21541,13430 21537,13424 21532,13419 21526,13416 21520,13412 21514,13410 21507,13410 21500,13410 21493,13412 21487,13416 Z M 21546,13331 C 21569,13331 21592,13337 21612,13349 21632,13360 21649,13377 21661,13397 21672,13417 21678,13440 21678,13463 21678,13508 21656,13547 21622,13571 21663,13575 21710,13585 21757,13608 21837,13648 21863,13595 21863,13595 21863,13595 21837,13833 21678,13833 L 21520,13833 C 21520,13833 21388,13833 21388,13701 21388,13621 21467,13595 21441,13542 21335,13542 21335,13450 21335,13450 21361,13463 21394,13463 21414,13454 21419,13385 21477,13331 21546,13331 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g442"
   class="Graphic">
       <g
   id="id34">
        <rect
   id="rect437"
   height="1442"
   width="1442"
   y="1571"
   x="25382"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path439"
   d="M 26544,2162 C 26532,2184 26513,2202 26492,2215 26470,2227 26445,2234 26420,2234 26357,2234 26304,2194 26285,2139 26259,2162 26226,2176 26189,2176 26157,2176 26127,2165 26103,2147 26078,2165 26049,2176 26016,2176 25979,2176 25946,2162 25920,2139 25901,2194 25848,2234 25785,2234 25760,2234 25735,2227 25713,2215 25692,2202 25673,2184 25661,2162 25648,2140 25641,2115 25641,2090 25641,2018 25694,1959 25762,1948 25759,1938 25757,1928 25757,1917 25757,1902 25761,1887 25768,1874 25776,1860 25787,1850 25800,1842 25813,1834 25828,1830 25843,1830 25855,1830 25866,1833 25875,1837 25885,1800 25919,1773 25958,1773 25973,1773 25987,1777 25998,1783 26016,1744 26056,1715 26103,1715 26149,1715 26189,1744 26207,1783 26218,1777 26232,1773 26247,1773 26286,1773 26320,1800 26330,1837 26339,1833 26350,1830 26362,1830 26377,1830 26392,1834 26405,1842 26418,1850 26429,1860 26437,1874 26444,1887 26448,1902 26448,1917 26448,1928 26446,1938 26443,1948 26511,1959 26564,2018 26564,2090 26564,2115 26557,2140 26544,2162 Z M 25958,2299 C 25950,2304 25942,2312 25937,2320 25932,2329 25930,2339 25930,2349 25930,2359 25932,2369 25937,2378 25942,2387 25950,2394 25958,2399 25967,2404 25977,2407 25987,2407 25997,2407 26007,2404 26016,2399 26025,2394 26032,2387 26037,2378 26042,2369 26045,2359 26045,2349 26045,2339 26042,2329 26037,2320 26032,2312 26025,2304 26016,2299 26007,2294 25997,2292 25987,2292 25977,2292 25967,2294 25958,2299 Z M 26189,2299 C 26180,2304 26173,2312 26168,2320 26163,2329 26160,2339 26160,2349 26160,2359 26163,2369 26168,2378 26173,2387 26180,2394 26189,2399 26198,2404 26208,2407 26218,2407 26228,2407 26238,2404 26247,2399 26255,2394 26263,2387 26268,2378 26273,2369 26275,2359 26275,2349 26275,2339 26273,2329 26268,2320 26263,2312 26255,2304 26247,2299 26238,2294 26228,2292 26218,2292 26208,2292 26198,2294 26189,2299 Z M 26577,2214 C 26540,2261 26484,2292 26420,2292 26394,2292 26369,2286 26345,2276 26345,2423 26323,2600 26244,2692 26214,2726 26177,2745 26131,2750 L 26131,2637 26074,2637 26074,2750 C 26028,2745 25991,2727 25961,2692 25881,2600 25860,2423 25859,2277 25836,2286 25811,2292 25785,2292 25721,2292 25665,2261 25628,2214 25577,2266 25526,2292 25526,2292 25526,2292 25584,2407 25699,2407 25720,2407 25736,2404 25750,2402 25769,2622 25848,2868 26103,2868 26357,2868 26436,2622 26455,2402 26469,2404 26485,2407 26506,2407 26621,2407 26679,2292 26679,2292 26679,2292 26628,2266 26577,2214 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g449"
   class="Graphic">
       <g
   id="id35">
        <rect
   id="rect444"
   height="661"
   width="661"
   y="7228"
   x="19664"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path446"
   d="M 19756,7373 L 19756,7532 C 19756,7678 19858,7815 19994,7848 20130,7815 20232,7678 20232,7532 L 20232,7373 19994,7268 19756,7373 Z M 20068,7492 L 20068,7532 C 20084,7532 20100,7547 20100,7566 L 20100,7658 C 20100,7674 20084,7690 20065,7690 L 19920,7690 C 19904,7690 19888,7674 19888,7656 L 19888,7563 C 19888,7547 19904,7532 19920,7532 L 19920,7492 C 19920,7455 19957,7426 19994,7426 20031,7426 20068,7455 20068,7492 Z M 19994,7458 C 19973,7458 19954,7471 19954,7492 L 19954,7532 20034,7532 20034,7492 C 20034,7471 20015,7458 19994,7458 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g456"
   class="Graphic">
       <g
   id="id36">
        <rect
   id="rect451"
   height="1182"
   width="1182"
   y="2362"
   x="16016"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path453"
   d="M 16890,3189 C 16942,3189 16984,3146 16984,3094 16984,3042 16942,3000 16890,3000 L 16890,2811 C 16890,2764 16890,2716 16839,2676 16841,2666 16843,2656 16843,2645 16843,2554 16748,2480 16630,2480 16523,2480 16435,2542 16421,2622 L 16323,2622 16215,2517 16181,2551 16276,2645 16181,2740 16215,2773 16323,2669 16421,2669 C 16435,2749 16523,2811 16630,2811 16654,2811 16677,2807 16698,2801 16700,2805 16701,2808 16701,2811 L 16701,3000 16418,3000 C 16366,3000 16323,3042 16323,3094 16323,3146 16366,3189 16418,3189 L 16347,3189 C 16281,3189 16229,3242 16229,3307 16229,3315 16229,3323 16231,3330 L 16229,3330 C 16177,3330 16134,3373 16134,3425 L 16961,3425 C 17026,3425 17079,3372 17079,3307 17079,3242 17026,3189 16961,3189 L 16890,3189 Z M 16607,2622 C 16581,2622 16559,2601 16559,2575 16559,2549 16581,2527 16607,2527 16632,2527 16654,2549 16654,2575 16654,2601 16632,2622 16607,2622 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g463"
   class="Graphic">
       <g
   id="id37">
        <rect
   id="rect458"
   height="661"
   width="661"
   y="11044"
   x="37874"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path460"
   d="M 38494,11118 L 38447,11113 C 38444,11113 38428,11110 38402,11110 38294,11110 38215,11142 38170,11197 38135,11176 38088,11163 38032,11163 38006,11163 37988,11165 37988,11165 L 37937,11173 37940,11218 C 37943,11297 37982,11448 38120,11448 L 38125,11448 38125,11538 C 38024,11551 37940,11585 37940,11585 L 37940,11638 38468,11638 38468,11585 C 38468,11585 38384,11551 38283,11538 L 38283,11453 C 38450,11451 38494,11263 38494,11165 L 38494,11118 Z M 38204,11532 L 38178,11532 38178,11385 C 38178,11385 38172,11295 38098,11295 38098,11295 38138,11316 38149,11392 38138,11395 38127,11395 38120,11395 37998,11395 37993,11218 37993,11218 37993,11218 38009,11216 38032,11216 38083,11216 38164,11226 38188,11297 38201,11179 38336,11163 38402,11163 38426,11163 38442,11165 38442,11165 38442,11165 38442,11403 38275,11403 L 38257,11403 C 38257,11350 38310,11271 38310,11271 38230,11297 38230,11400 38230,11400 L 38230,11532 38204,11532 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g470"
   class="Graphic">
       <g
   id="id38">
        <rect
   id="rect465"
   height="661"
   width="661"
   y="6909"
   x="25321"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path467"
   d="M 25436,7012 C 25426,7020 25420,7029 25417,7041 L 25390,7157 C 25383,7186 25389,7211 25406,7233 L 25413,7240 25413,7424 C 25413,7437 25419,7450 25430,7460 25440,7471 25453,7477 25466,7477 L 25836,7477 C 25849,7477 25862,7471 25872,7460 25883,7450 25889,7437 25889,7424 L 25889,7240 25896,7233 C 25913,7211 25919,7186 25912,7157 L 25885,7041 C 25881,7029 25875,7020 25866,7012 25856,7005 25846,7001 25834,7001 L 25468,7001 C 25456,7001 25446,7005 25436,7012 Z M 25861,7170 C 25864,7181 25861,7191 25854,7201 25847,7209 25839,7213 25829,7213 25821,7213 25814,7210 25808,7204 25802,7198 25799,7190 25798,7182 L 25782,7054 25833,7053 25861,7170 Z M 25520,7054 L 25504,7182 C 25501,7203 25490,7213 25473,7213 25462,7213 25454,7209 25448,7201 25441,7191 25438,7181 25441,7170 L 25468,7054 25520,7054 Z M 25625,7054 L 25625,7178 C 25625,7188 25622,7195 25615,7203 25608,7209 25600,7213 25590,7213 25581,7213 25574,7209 25568,7202 25562,7194 25559,7186 25559,7177 L 25559,7173 25573,7054 25625,7054 Z M 25729,7054 L 25743,7173 C 25746,7184 25743,7193 25736,7201 25729,7209 25720,7213 25709,7213 25701,7213 25694,7209 25687,7203 25680,7195 25677,7188 25677,7178 L 25677,7054 25729,7054 Z M 25531,7240 C 25548,7257 25568,7265 25593,7265 25615,7265 25635,7257 25651,7240 25669,7257 25689,7265 25712,7265 25735,7265 25754,7257 25771,7240 25786,7257 25806,7265 25831,7265 L 25837,7265 25837,7424 25466,7424 25466,7265 25473,7265 C 25497,7265 25516,7257 25531,7240 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g477"
   class="Graphic">
       <g
   id="id39">
        <rect
   id="rect472"
   height="661"
   width="661"
   y="3423"
   x="31805"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path474"
   d="M 32001,3581 L 32061,3642 32024,3679 31963,3619 31903,3679 31865,3642 31926,3581 31865,3521 31903,3483 31963,3544 32024,3483 32061,3521 32001,3581 Z M 32405,3864 L 32367,3827 32307,3887 32246,3827 32209,3864 32269,3925 32209,3985 32246,4023 32307,3962 32367,4023 32405,3985 32344,3925 32405,3864 Z M 32357,3617 L 32272,3727 32230,3693 32261,3653 C 32236,3659 32211,3668 32189,3681 32152,3702 32122,3732 32101,3769 32095,3779 32090,3790 32085,3802 32099,3812 32110,3824 32119,3839 32129,3857 32134,3877 32134,3898 32134,3919 32129,3940 32119,3958 32108,3976 32093,3991 32075,4001 32057,4012 32036,4017 32016,4017 31995,4017 31974,4012 31956,4001 31938,3991 31923,3976 31913,3958 31902,3940 31897,3919 31897,3898 31897,3877 31902,3857 31913,3839 31923,3821 31938,3806 31956,3795 31974,3785 31995,3779 32016,3779 32016,3779 32016,3779 32016,3779 32023,3779 32030,3780 32037,3782 32042,3769 32048,3756 32055,3744 32081,3699 32119,3661 32164,3635 32191,3619 32221,3608 32252,3601 L 32214,3573 32248,3531 32357,3617 Z M 32082,3898 C 32082,3887 32079,3875 32073,3865 32068,3855 32059,3847 32049,3841 32039,3835 32028,3832 32016,3832 32005,3832 31993,3835 31983,3841 31973,3847 31965,3855 31959,3865 31953,3875 31950,3887 31950,3898 31950,3910 31953,3921 31959,3931 31965,3941 31973,3950 31983,3955 31993,3961 32005,3964 32016,3964 32028,3964 32039,3961 32049,3955 32059,3950 32068,3941 32073,3931 32079,3921 32082,3910 32082,3898 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g484"
   class="Graphic">
       <g
   id="id40">
        <rect
   id="rect479"
   height="661"
   width="661"
   y="514"
   x="22812"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path481"
   d="M 23036,1027 C 23004,1008 22978,982 22959,950 22941,917 22931,881 22931,844 22931,807 22941,771 22959,738 22978,706 23004,680 23036,661 23069,643 23105,633 23142,633 23179,633 23215,643 23248,661 23280,680 23306,706 23325,738 23343,771 23353,807 23353,844 23353,881 23343,917 23325,950 23306,982 23280,1008 23248,1027 23215,1045 23179,1055 23142,1055 23105,1055 23069,1045 23036,1027 Z M 23010,615 C 22970,639 22937,672 22913,712 22890,752 22878,798 22878,844 22878,890 22890,936 22913,976 22937,1016 22970,1049 23010,1073 23050,1096 23096,1108 23142,1108 23188,1108 23234,1096 23274,1073 23314,1049 23347,1016 23371,976 23394,936 23406,890 23406,844 23406,798 23394,752 23371,712 23347,672 23314,639 23274,615 23234,592 23188,580 23142,580 23096,580 23050,592 23010,615 Z M 23254,732 C 23223,701 23182,686 23142,686 L 23142,844 23030,956 C 23092,1018 23192,1018 23254,956 23316,894 23316,794 23254,732 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g491"
   class="Graphic">
       <g
   id="id41">
        <rect
   id="rect486"
   height="661"
   width="661"
   y="2164"
   x="18403"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path488"
   d="M 18865,2265 C 18905,2289 18938,2322 18962,2362 18985,2402 18997,2448 18997,2494 18997,2540 18985,2586 18962,2626 18938,2666 18905,2699 18865,2723 18825,2746 18779,2758 18733,2758 18687,2758 18641,2746 18601,2723 18561,2699 18528,2666 18504,2626 18481,2586 18469,2540 18469,2494 18469,2448 18481,2402 18504,2362 18528,2322 18561,2289 18601,2265 18641,2242 18687,2230 18733,2230 18779,2230 18825,2242 18865,2265 Z M 18627,2311 C 18595,2330 18569,2356 18550,2388 18532,2421 18522,2457 18522,2494 18522,2531 18532,2567 18550,2600 18569,2632 18595,2658 18627,2677 18660,2695 18696,2705 18733,2705 18714,2705 18696,2700 18680,2691 18664,2682 18651,2668 18642,2652 18632,2636 18627,2618 18627,2600 18627,2581 18632,2563 18642,2547 18651,2531 18664,2517 18680,2508 18696,2499 18714,2494 18733,2494 18752,2494 18770,2489 18786,2480 18802,2471 18815,2457 18824,2441 18834,2425 18839,2407 18839,2388 18839,2370 18834,2352 18824,2336 18815,2320 18802,2306 18786,2297 18770,2288 18752,2283 18733,2283 18696,2283 18660,2293 18627,2311 Z M 18753,2354 C 18759,2358 18764,2363 18767,2369 18771,2375 18773,2381 18773,2388 18773,2395 18771,2402 18767,2408 18764,2414 18759,2419 18753,2423 18747,2426 18740,2428 18733,2428 18726,2428 18719,2426 18713,2423 18707,2419 18702,2414 18699,2408 18695,2402 18693,2395 18693,2388 18693,2381 18695,2375 18699,2369 18702,2363 18707,2358 18713,2354 18719,2351 18726,2349 18733,2349 18740,2349 18747,2351 18753,2354 Z M 18733,2560 C 18726,2560 18719,2562 18713,2565 18707,2569 18702,2574 18699,2580 18695,2586 18693,2593 18693,2600 18693,2607 18695,2613 18699,2619 18702,2625 18707,2630 18713,2634 18719,2637 18726,2639 18733,2639 18740,2639 18747,2637 18753,2634 18759,2630 18764,2625 18767,2619 18771,2613 18773,2607 18773,2600 18773,2593 18771,2586 18767,2580 18764,2574 18759,2569 18753,2565 18747,2562 18740,2560 18733,2560 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g498"
   class="Graphic">
       <g
   id="id42">
        <rect
   id="rect493"
   height="661"
   width="661"
   y="3489"
   x="28833"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path495"
   d="M 28925,4083 L 28925,4030 29401,4030 29401,4083 28925,4083 Z M 28978,4004 L 29139,3571 C 29145,3560 29152,3555 29163,3555 L 29321,3634 29213,3634 29348,4004 28978,4004 Z M 29138,3713 L 29150,3740 29162,3713 29189,3700 29162,3688 29150,3661 29138,3688 29110,3700 29138,3713 Z M 29135,3874 L 29110,3819 29086,3874 29031,3898 29086,3923 29110,3977 29135,3923 29189,3898 29135,3874 Z M 29242,3806 L 29215,3793 29203,3766 29190,3793 29163,3806 29190,3818 29203,3845 29215,3818 29242,3806 Z M 29268,3924 L 29295,3911 29268,3899 29255,3872 29243,3899 29216,3911 29243,3924 29255,3951 29268,3924 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g505"
   class="Graphic">
       <g
   id="id43">
        <rect
   id="rect500"
   height="661"
   width="661"
   y="3397"
   x="24682"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path502"
   d="M 24751,3725 C 24751,3771 24764,3816 24786,3855 L 24749,3991 24888,3955 C 24926,3975 24969,3987 25013,3987 25157,3987 25275,3869 25275,3725 25275,3655 25247,3589 25198,3540 25149,3490 25083,3463 25013,3463 24869,3463 24751,3580 24751,3725 Z M 25167,3571 C 25208,3612 25231,3667 25231,3725 25231,3845 25133,3942 25013,3942 24974,3942 24936,3932 24902,3912 L 24895,3907 24812,3929 24834,3849 24829,3840 C 24807,3806 24796,3766 24796,3725 24796,3605 24893,3507 25013,3507 25071,3507 25126,3530 25167,3571 Z M 24920,3604 C 24916,3604 24909,3605 24903,3612 24897,3618 24880,3635 24880,3667 24880,3699 24903,3730 24906,3734 24910,3739 24953,3805 25019,3833 25034,3840 25046,3844 25056,3847 25071,3852 25086,3851 25097,3849 25110,3847 25136,3833 25141,3818 25147,3803 25147,3790 25145,3787 25143,3784 25139,3783 25132,3780 25126,3776 25094,3760 25088,3758 25082,3756 25078,3755 25073,3761 25069,3768 25056,3783 25052,3787 25048,3791 25045,3792 25038,3789 25032,3785 25010,3778 24986,3756 24966,3739 24953,3717 24949,3711 24946,3705 24949,3701 24952,3698 24955,3695 24959,3690 24962,3686 24965,3682 24966,3679 24968,3675 24971,3671 24969,3667 24968,3664 24966,3661 24953,3628 24948,3615 24942,3603 24937,3604 24933,3604 24929,3604 24925,3604 24920,3604 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g512"
   class="Graphic">
       <g
   id="id44">
        <rect
   id="rect507"
   height="1380"
   width="1380"
   y="447"
   x="10025"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path509"
   d="M 10990,916 L 10990,695 10218,695 C 10157,695 10108,745 10108,806 L 10108,1412 10218,1412 C 10218,1506 10290,1578 10384,1578 10477,1578 10549,1506 10549,1412 L 10880,1412 C 10880,1506 10952,1578 11045,1578 11139,1578 11211,1506 11211,1412 L 11321,1412 11321,1137 11156,916 10990,916 Z M 10301,1412 C 10301,1368 10339,1330 10384,1330 10428,1330 10466,1368 10466,1412 10466,1456 10428,1495 10384,1495 10339,1495 10301,1456 10301,1412 Z M 10505,1302 C 10477,1269 10433,1247 10384,1247 10334,1247 10290,1269 10262,1302 L 10218,1302 10218,806 10880,806 10880,1302 10505,1302 Z M 10963,1412 C 10963,1368 11001,1330 11045,1330 11090,1330 11128,1368 11128,1412 11128,1456 11090,1495 11045,1495 11001,1495 10963,1456 10963,1412 Z M 10990,999 L 11128,999 11239,1137 10990,1137 10990,999 Z M 10494,1081 L 10384,1081 10384,971 10494,971 10494,861 10604,861 10604,971 10715,971 10715,1081 10604,1081 10604,1192 10494,1192 10494,1081 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g519"
   class="Graphic">
       <g
   id="id45">
        <rect
   id="rect514"
   height="661"
   width="661"
   y="6159"
   x="30005"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path516"
   d="M 30546,6397 C 30546,6390 30545,6383 30544,6376 L 30625,6397 30544,6417 C 30545,6410 30546,6403 30546,6397 Z M 30427,6599 L 30449,6513 C 30442,6515 30435,6515 30427,6515 30420,6515 30413,6515 30406,6513 L 30427,6599 Z M 30197,6589 L 30179,6571 30045,6705 30119,6779 30253,6645 30235,6627 30364,6497 C 30349,6487 30337,6475 30327,6460 L 30197,6589 Z M 30427,6199 L 30407,6280 C 30414,6279 30421,6278 30427,6278 30434,6278 30441,6279 30448,6280 L 30427,6199 Z M 30311,6417 C 30309,6410 30309,6403 30309,6397 30309,6390 30309,6383 30311,6376 L 30229,6397 30311,6417 Z M 30510,6437 C 30516,6425 30520,6411 30520,6397 30520,6382 30516,6368 30510,6356 L 30573,6251 30468,6314 C 30456,6308 30442,6304 30427,6304 30413,6304 30399,6308 30387,6314 L 30282,6251 30345,6356 C 30339,6368 30335,6382 30335,6397 30335,6448 30376,6489 30427,6489 30442,6489 30456,6485 30468,6479 L 30573,6542 30510,6437 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g526"
   class="Graphic">
       <g
   id="id46">
        <rect
   id="rect521"
   height="1093"
   width="1093"
   y="13995"
   x="1055"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path523"
   d="M 1863,14364 C 1863,14559 1601,14847 1601,14847 1601,14847 1339,14559 1339,14364 1339,14220 1456,14104 1601,14104 1746,14104 1863,14220 1863,14364 Z M 1557,14291 C 1544,14298 1533,14309 1525,14323 1518,14336 1514,14351 1514,14366 1514,14382 1518,14397 1525,14410 1533,14423 1544,14434 1557,14442 1571,14450 1586,14454 1601,14454 1616,14454 1631,14450 1645,14442 1658,14434 1669,14423 1677,14410 1684,14397 1688,14382 1688,14366 1688,14351 1684,14336 1677,14323 1669,14309 1658,14298 1645,14291 1631,14283 1616,14279 1601,14279 1586,14279 1571,14283 1557,14291 Z M 1950,14847 C 1950,14943 1794,15021 1601,15021 1408,15021 1252,14943 1252,14847 1252,14790 1305,14740 1387,14708 L 1415,14748 C 1368,14768 1339,14795 1339,14825 1339,14885 1456,14934 1601,14934 1746,14934 1863,14885 1863,14825 1863,14795 1834,14768 1787,14748 L 1815,14708 C 1897,14740 1950,14790 1950,14847 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g533"
   class="Graphic">
       <g
   id="id47">
        <rect
   id="rect528"
   height="2018"
   width="2018"
   y="9986"
   x="313"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path530"
   d="M 595,11075 C 551,11075 515,11039 515,10995 515,10950 551,10914 595,10914 L 918,10914 C 962,10914 999,10950 999,10995 999,11039 962,11075 918,11075 L 595,11075 Z M 757,10591 L 676,10591 C 632,10591 595,10627 595,10672 595,10716 632,10752 676,10752 L 757,10752 C 801,10752 837,10716 837,10672 837,10627 801,10591 757,10591 Z M 1725,11398 L 676,11398 C 632,11398 595,11362 595,11317 595,11273 632,11237 676,11237 L 1402,11237 C 1368,11190 1342,11135 1330,11075 L 1160,11075 C 1116,11075 1079,11039 1079,10995 1079,10950 1116,10914 1160,10914 L 1330,10914 C 1342,10854 1368,10799 1402,10752 L 999,10752 C 954,10752 918,10716 918,10672 918,10627 954,10591 999,10591 L 1725,10591 C 1948,10591 2128,10772 2128,10995 2128,11217 1948,11398 1725,11398 Z M 1967,10995 C 1967,10861 1858,10752 1725,10752 1592,10752 1483,10861 1483,10995 1483,11128 1592,11237 1725,11237 1858,11237 1967,11128 1967,10995 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g540"
   class="Graphic">
       <g
   id="id48">
        <rect
   id="rect535"
   height="661"
   width="661"
   y="14664"
   x="2877"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path537"
   d="M 3265,15152 L 3207,15210 3149,15152 C 3172,15140 3192,15122 3207,15100 3222,15122 3242,15140 3265,15152 Z M 3313,14980 C 3305,14985 3298,14991 3293,14999 3289,15007 3286,15016 3286,15026 3286,15035 3289,15044 3293,15052 3298,15060 3305,15067 3313,15071 3321,15076 3330,15078 3339,15078 3348,15078 3357,15076 3365,15071 3373,15067 3380,15060 3385,15052 3389,15044 3392,15035 3392,15026 3392,14996 3368,14973 3339,14973 3330,14973 3321,14975 3313,14980 Z M 3049,14980 C 3041,14985 3034,14991 3029,14999 3025,15007 3022,15016 3022,15026 3022,15035 3025,15044 3029,15052 3034,15060 3041,15067 3049,15071 3057,15076 3066,15078 3075,15078 3084,15078 3093,15076 3101,15071 3109,15067 3116,15060 3121,15052 3125,15044 3128,15035 3128,15026 3128,14996 3104,14973 3075,14973 3066,14973 3057,14975 3049,14980 Z M 3392,14921 C 3408,14930 3421,14944 3430,14960 3440,14976 3445,14994 3445,15012 3445,15031 3440,15049 3430,15065 3421,15081 3408,15095 3392,15104 3376,15113 3358,15118 3339,15118 3320,15118 3302,15113 3286,15104 3270,15095 3257,15081 3248,15065 3238,15049 3233,15031 3233,15012 3233,14994 3238,14976 3248,14960 3257,14944 3270,14930 3286,14921 3302,14912 3320,14907 3339,14907 3358,14907 3376,14912 3392,14921 Z M 3128,14921 C 3144,14930 3157,14944 3166,14960 3176,14976 3181,14994 3181,15012 3181,15031 3176,15049 3166,15065 3157,15081 3144,15095 3128,15104 3112,15113 3094,15118 3075,15118 3056,15118 3038,15113 3022,15104 3006,15095 2993,15081 2984,15065 2974,15049 2969,15031 2969,15012 2969,14994 2974,14976 2984,14960 2993,14944 3006,14930 3022,14921 3038,14912 3056,14907 3075,14907 3094,14907 3112,14912 3128,14921 Z M 2949,14704 C 2996,14801 2962,14874 2931,14946 2922,14968 2917,14990 2917,15012 2917,15040 2924,15068 2938,15092 2952,15116 2972,15136 2996,15150 3020,15164 3047,15171 3075,15171 3081,15171 3086,15170 3092,15170 L 3170,15248 3207,15284 3244,15248 3322,15170 C 3328,15170 3333,15171 3339,15171 3367,15171 3394,15164 3418,15150 3442,15136 3462,15116 3476,15092 3490,15068 3497,15040 3497,15012 3497,14990 3492,14968 3483,14946 3452,14874 3418,14801 3465,14704 3395,14758 3296,14801 3207,14801 3118,14801 3019,14758 2949,14704 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g547"
   class="Graphic">
       <g
   id="id49">
        <rect
   id="rect542"
   height="1062"
   width="1062"
   y="4128"
   x="5883"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path544"
   d="M 6032,4531 L 6032,5040 6414,5040 6414,4720 C 6460,4762 6520,4786 6583,4786 6724,4786 6838,4672 6838,4531 6838,4391 6724,4277 6583,4277 L 6286,4277 C 6146,4277 6037,4391 6032,4531 Z M 6753,4531 C 6753,4625 6677,4701 6583,4701 6489,4701 6414,4625 6414,4531 6414,4437 6489,4361 6583,4361 6677,4361 6753,4437 6753,4531 Z M 6509,4531 C 6509,4572 6542,4605 6583,4605 6624,4605 6658,4572 6658,4531 6658,4490 6624,4457 6583,4457 6542,4457 6509,4490 6509,4531 Z M 6116,4659 L 6116,4701 6074,4701 6074,4659 6116,4659 Z M 6201,4659 L 6201,4701 6159,4701 6159,4659 6201,4659 Z M 6286,4659 L 6286,4701 6244,4701 6244,4659 6286,4659 Z M 6329,4659 L 6371,4659 6371,4701 6329,4701 6329,4659 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g554"
   class="Graphic">
       <g
   id="id50">
        <rect
   id="rect549"
   height="661"
   width="661"
   y="12535"
   x="1296"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path551"
   d="M 1751,12663 C 1768,12641 1794,12627 1824,12627 1840,12627 1856,12632 1870,12640 1884,12648 1896,12660 1904,12674 1912,12688 1916,12704 1916,12720 1916,12759 1891,12793 1856,12806 1861,12825 1864,12845 1864,12865 1864,12907 1853,12948 1832,12984 1811,13020 1781,13050 1745,13071 1709,13092 1668,13103 1626,13103 1584,13103 1543,13092 1507,13071 1471,13050 1441,13020 1420,12984 1399,12948 1388,12907 1388,12865 1388,12845 1391,12825 1396,12806 1361,12793 1336,12759 1336,12720 1336,12704 1340,12688 1348,12674 1356,12660 1368,12648 1382,12640 1396,12632 1412,12627 1428,12627 1458,12627 1484,12641 1501,12663 1537,12641 1580,12627 1626,12627 1672,12627 1715,12641 1751,12663 Z M 1534,12705 C 1506,12721 1482,12745 1466,12773 1450,12801 1441,12833 1441,12865 1441,12897 1450,12929 1466,12957 1482,12985 1506,13009 1534,13025 1562,13041 1594,13050 1626,13050 1658,13050 1690,13041 1718,13025 1746,13009 1770,12985 1786,12957 1802,12929 1811,12897 1811,12865 1811,12833 1802,12801 1786,12773 1770,12745 1746,12721 1718,12705 1690,12689 1658,12680 1626,12680 1594,12680 1562,12689 1534,12705 Z M 1709,12896 C 1684,12902 1657,12879 1647,12844 1638,12809 1650,12775 1675,12768 1700,12762 1727,12785 1737,12820 1746,12855 1734,12889 1709,12896 Z M 1577,12768 C 1602,12775 1614,12809 1605,12844 1595,12879 1568,12902 1543,12896 1518,12889 1506,12855 1515,12820 1525,12785 1552,12762 1577,12768 Z M 1626,12918 C 1642,12918 1656,12923 1666,12931 L 1639,12957 C 1639,12968 1648,12977 1659,12977 1662,12977 1666,12976 1669,12975 1672,12973 1674,12970 1676,12967 1678,12964 1679,12961 1679,12957 1679,12955 1679,12953 1681,12951 1682,12949 1683,12947 1685,12946 1687,12945 1690,12944 1692,12944 1694,12944 1697,12945 1699,12946 1701,12947 1702,12949 1703,12951 1705,12953 1705,12955 1705,12957 1705,12966 1703,12973 1699,12981 1695,12988 1689,12993 1682,12997 1675,13001 1667,13004 1659,13004 1646,13004 1634,12998 1626,12990 1618,12998 1606,13004 1593,13004 1585,13004 1577,13001 1570,12997 1563,12993 1557,12988 1553,12981 1549,12973 1547,12966 1547,12957 1547,12955 1547,12953 1549,12951 1550,12949 1551,12947 1553,12946 1555,12945 1558,12944 1560,12944 1562,12944 1565,12945 1567,12946 1569,12947 1570,12949 1571,12951 1573,12953 1573,12955 1573,12957 1573,12961 1574,12964 1576,12967 1578,12970 1580,12973 1583,12975 1586,12976 1590,12977 1593,12977 1596,12977 1600,12976 1603,12975 1606,12973 1608,12970 1610,12967 1612,12964 1613,12961 1613,12957 L 1586,12931 C 1596,12923 1610,12918 1626,12918 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g561"
   class="Graphic">
       <g
   id="id51">
        <rect
   id="rect556"
   height="661"
   width="661"
   y="8278"
   x="4718"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path558"
   d="M 4739,8494 C 4734,8498 4731,8505 4731,8512 4731,8520 4734,8526 4739,8531 L 4804,8597 C 4809,8601 4816,8604 4824,8604 4830,8604 4837,8601 4842,8597 4862,8577 4886,8561 4912,8548 4920,8544 4927,8535 4927,8524 L 4927,8442 C 4965,8430 5005,8423 5048,8423 5090,8423 5131,8430 5169,8442 L 5169,8524 C 5169,8534 5175,8544 5184,8548 5210,8561 5233,8577 5254,8597 5259,8601 5266,8604 5272,8604 5280,8604 5287,8601 5292,8596 L 5357,8531 C 5362,8526 5365,8520 5365,8512 5365,8505 5362,8498 5357,8494 5276,8417 5168,8370 5048,8370 4928,8370 4819,8417 4739,8494 Z M 4969,8555 C 4969,8555 4810,8687 4810,8766 L 4810,8872 5286,8872 5286,8766 C 5286,8687 5127,8555 5127,8555 L 5127,8476 5074,8476 5074,8529 5022,8529 5022,8476 4969,8476 4969,8555 Z M 5101,8622 C 5117,8631 5130,8645 5139,8661 5149,8677 5154,8695 5154,8714 5154,8732 5149,8750 5139,8766 5130,8782 5117,8796 5101,8805 5085,8814 5067,8819 5048,8819 5029,8819 5011,8814 4995,8805 4979,8796 4966,8782 4957,8766 4947,8750 4942,8732 4942,8714 4942,8695 4947,8677 4957,8661 4966,8645 4979,8631 4995,8622 5011,8613 5029,8608 5048,8608 5067,8608 5085,8613 5101,8622 Z M 5048,8648 C 5036,8648 5025,8651 5015,8656 5005,8662 4997,8671 4991,8681 4985,8691 4982,8702 4982,8714 4982,8725 4985,8737 4991,8747 4997,8757 5005,8765 5015,8771 5025,8777 5036,8780 5048,8780 5060,8780 5071,8777 5081,8771 5091,8765 5099,8757 5105,8747 5111,8737 5114,8725 5114,8714 5114,8702 5111,8691 5105,8681 5099,8671 5091,8662 5081,8656 5071,8651 5060,8648 5048,8648 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g568"
   class="Graphic">
       <g
   id="id52">
        <rect
   id="rect563"
   height="954"
   width="954"
   y="5023"
   x="16388"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path565"
   d="M 16704,5538 C 16704,5564 16731,5583 16754,5583 16777,5583 16800,5564 16800,5538 16777,5522 16750,5511 16720,5503 16708,5511 16701,5526 16704,5538 Z M 17284,5309 C 17284,5309 17208,5309 17093,5233 16979,5156 16979,5080 16865,5080 16750,5080 16750,5156 16636,5233 16521,5309 16445,5309 16445,5309 L 16483,5461 16487,5461 C 16483,5473 16483,5488 16483,5500 16483,5633 16552,5751 16655,5820 L 16636,5854 C 16880,6010 17093,5854 17093,5854 L 17074,5820 C 17177,5751 17246,5633 17246,5500 L 17246,5461 17284,5309 Z M 16784,5160 L 16811,5134 16865,5187 16918,5134 16945,5160 16891,5214 16945,5267 16918,5294 16865,5240 16811,5294 16784,5267 16838,5214 16784,5160 Z M 16865,5347 C 16948,5347 17089,5408 17162,5439 17166,5450 17166,5461 17166,5473 L 16762,5366 C 16800,5355 16838,5347 16865,5347 Z M 16842,5801 C 16823,5785 16823,5755 16842,5740 16857,5724 16891,5717 16910,5736 16922,5740 16925,5759 16925,5770 16899,5785 16872,5797 16842,5801 Z M 17169,5553 C 17150,5633 17101,5705 17036,5751 L 16979,5652 16750,5652 16693,5751 C 16613,5698 16560,5606 16560,5500 16560,5480 16563,5461 16567,5442 16586,5435 16609,5423 16636,5412 L 16906,5484 16906,5576 C 16906,5595 16922,5614 16945,5614 L 17021,5614 C 17040,5614 17059,5599 17059,5576 L 17059,5522 17169,5553 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g575"
   class="Graphic">
       <g
   id="id53">
        <rect
   id="rect570"
   height="661"
   width="661"
   y="8673"
   x="438"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path572"
   d="M 874,8887 C 874,8866 852,8823 852,8802 852,8781 874,8760 874,8760 L 852,8739 C 840,8746 825,8750 810,8750 795,8750 780,8746 768,8739 756,8746 741,8750 726,8750 711,8750 696,8746 684,8739 L 662,8760 C 662,8760 684,8781 684,8802 684,8823 662,8866 662,8887 662,8929 768,8950 768,8950 768,8950 874,8929 874,8887 Z M 768,8792 L 783,8827 821,8830 791,8855 800,8892 768,8872 735,8892 744,8855 715,8830 753,8827 768,8792 Z M 891,8845 C 896,8860 900,8874 900,8887 900,8946 803,8970 773,8977 L 768,8977 763,8977 C 733,8970 636,8946 636,8887 636,8874 640,8860 645,8845 L 530,8845 C 516,8845 504,8856 504,8871 L 504,9267 715,9267 715,9135 821,9135 821,9267 1032,9267 1032,8871 C 1032,8856 1020,8845 1006,8845 L 891,8845 Z M 557,9214 L 557,9135 662,9135 662,9214 557,9214 Z M 557,9082 L 557,9003 662,9003 662,9082 557,9082 Z M 715,9082 L 715,9003 821,9003 821,9082 715,9082 Z M 874,9214 L 874,9135 979,9135 979,9214 874,9214 Z M 979,9082 L 874,9082 874,9003 979,9003 979,9082 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g582"
   class="Graphic">
       <g
   id="id54">
        <rect
   id="rect577"
   height="1152"
   width="1152"
   y="4447"
   x="3036"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path579"
   d="M 3519,4654 L 3519,4930 3243,4930 3243,4654 3519,4654 Z M 3980,4930 L 3704,4930 3704,4654 3980,4654 3980,4930 Z M 3796,5161 L 3796,5161 3796,5069 3704,5069 3704,4976 3796,4976 3796,5069 3888,5069 3888,4976 3980,4976 3980,5069 3888,5069 3888,5161 3980,5161 3980,5299 3888,5299 3888,5391 3796,5391 3796,5299 3658,5299 3658,5391 3565,5391 3565,5207 3704,5207 3704,5161 3796,5161 Z M 3796,5299 L 3888,5299 3888,5161 3796,5161 3796,5299 Z M 3243,5115 L 3519,5115 3519,5391 3243,5391 3243,5115 Z M 3335,4838 L 3427,4838 3427,4746 3335,4746 3335,4838 Z M 3796,4838 L 3888,4838 3888,4746 3796,4746 3796,4838 Z M 3335,5299 L 3427,5299 3427,5207 3335,5207 3335,5299 Z M 3335,4976 L 3335,5069 3243,5069 3243,4976 3335,4976 Z M 3658,4976 L 3658,5161 3565,5161 3565,5069 3473,5069 3473,4976 3658,4976 Z M 3658,4746 L 3658,4930 3565,4930 3565,4746 3658,4746 Z M 3151,4746 L 3059,4746 3059,4562 C 3059,4546 3063,4530 3071,4516 3079,4502 3091,4490 3105,4482 3119,4474 3135,4470 3151,4470 L 3335,4470 3335,4562 3151,4562 3151,4746 Z M 4118,4482 C 4132,4490 4144,4502 4152,4516 4160,4530 4164,4546 4164,4562 L 4164,4746 4072,4746 4072,4562 3888,4562 3888,4470 4072,4470 C 4088,4470 4104,4474 4118,4482 Z M 3151,5483 L 3335,5483 3335,5575 3151,5575 C 3135,5575 3119,5571 3105,5563 3091,5555 3079,5543 3071,5529 3063,5515 3059,5499 3059,5483 L 3059,5299 3151,5299 3151,5483 Z M 4072,5483 L 4072,5299 4164,5299 4164,5483 C 4164,5499 4160,5515 4152,5529 4144,5543 4132,5555 4118,5563 4104,5571 4088,5575 4072,5575 L 3888,5575 3888,5483 4072,5483 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g589"
   class="Graphic">
       <g
   id="id55">
        <rect
   id="rect584"
   height="661"
   width="661"
   y="11343"
   x="2991"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path586"
   d="M 3409,11704 C 3444,11704 3494,11696 3494,11655 3494,11652 3494,11649 3493,11646 L 3473,11556 C 3468,11536 3464,11527 3429,11510 3402,11496 3343,11473 3326,11473 3310,11473 3305,11494 3286,11494 3267,11494 3254,11478 3236,11478 3220,11478 3209,11490 3200,11513 3200,11513 3177,11579 3174,11589 3174,11590 3173,11592 3173,11594 3173,11619 3274,11703 3409,11703 L 3409,11704 Z M 3504,11699 C 3504,11739 3461,11760 3403,11760 3273,11760 3160,11684 3160,11634 3160,11627 3161,11620 3164,11614 3117,11616 3057,11624 3057,11678 3057,11765 3264,11873 3428,11873 3554,11873 3585,11816 3585,11771 3585,11736 3555,11696 3500,11672 3504,11695 3504,11697 3504,11699 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g596"
   class="Graphic">
       <g
   id="id56">
        <rect
   id="rect591"
   height="661"
   width="661"
   y="9449"
   x="2954"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path593"
   d="M 3493,10017 L 3259,10017 C 3185,10017 3126,9957 3126,9883 L 3126,9882 C 3065,9869 3020,9816 3020,9753 3020,9680 3079,9621 3152,9621 L 3218,9621 C 3226,9621 3231,9615 3231,9607 3231,9600 3226,9594 3218,9594 L 3152,9594 3152,9541 3218,9541 C 3254,9541 3284,9571 3284,9607 3284,9644 3254,9673 3218,9673 L 3152,9673 C 3108,9673 3073,9709 3073,9753 3073,9789 3097,9819 3129,9828 3144,9770 3196,9726 3259,9726 3280,9726 3301,9732 3320,9741 3283,9762 3258,9800 3258,9845 3258,9878 3271,9908 3293,9929 L 3311,9910 C 3294,9894 3284,9871 3284,9845 3284,9777 3346,9753 3376,9753 3431,9753 3481,9802 3467,9864 L 3530,9921 C 3567,9955 3543,10017 3493,10017 Z M 3442,9964 C 3457,9964 3469,9952 3469,9937 3469,9923 3457,9911 3442,9911 3428,9911 3416,9923 3416,9937 3416,9952 3428,9964 3442,9964 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g603"
   class="Graphic">
       <g
   id="id57">
        <rect
   id="rect598"
   height="1045"
   width="1045"
   y="2942"
   x="8342"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path600"
   d="M 9198,3297 L 9198,3339 9156,3339 9156,3297 9198,3297 Z M 9156,3172 L 9156,3255 9198,3255 9198,3213 9219,3213 C 9231,3213 9240,3204 9240,3193 L 9240,3109 C 9240,3097 9231,3088 9219,3088 L 9115,3088 9115,3130 9198,3130 9198,3172 9156,3172 Z M 9031,3088 L 9031,3255 9073,3255 9073,3088 9031,3088 Z M 9010,3694 C 9056,3694 9094,3657 9094,3610 9094,3564 9057,3527 9010,3527 8964,3527 8927,3564 8927,3610 8927,3657 8964,3694 9010,3694 Z M 9031,3297 L 9031,3339 9073,3339 9073,3297 9031,3297 Z M 9240,3548 C 9240,3485 9220,3428 9187,3380 L 9072,3380 C 9122,3418 9156,3479 9156,3548 L 9156,3631 9240,3631 9240,3673 9156,3673 9156,3798 8572,3798 8572,3673 8488,3673 8488,3631 8572,3631 8572,3548 C 8572,3432 8665,3339 8780,3339 L 8948,3339 C 8962,3339 8976,3340 8989,3343 L 8989,3259 C 8975,3256 8962,3255 8948,3255 L 8906,3255 8906,3202 C 8931,3188 8948,3161 8948,3130 8948,3084 8910,3046 8864,3046 8818,3046 8780,3084 8780,3130 8780,3161 8797,3188 8822,3202 L 8822,3255 8780,3255 C 8619,3255 8488,3386 8488,3548 L 8446,3548 C 8423,3548 8405,3566 8405,3589 L 8405,3715 C 8405,3738 8423,3756 8446,3756 L 8488,3756 8488,3798 C 8488,3844 8526,3882 8572,3882 L 9156,3882 C 9203,3882 9240,3844 9240,3798 L 9240,3756 9282,3756 C 9305,3756 9323,3738 9323,3715 L 9323,3589 C 9323,3566 9305,3548 9282,3548 L 9240,3548 Z M 8718,3527 C 8672,3527 8634,3564 8634,3610 8634,3656 8672,3694 8718,3694 8764,3694 8801,3657 8801,3610 8801,3564 8764,3527 8718,3527 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g610"
   class="Graphic">
       <g
   id="id58">
        <rect
   id="rect605"
   height="661"
   width="661"
   y="13737"
   x="4398"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path607"
   d="M 4939,13922 C 4939,13945 4933,13967 4921,13985 L 5002,14067 4966,14104 4883,14023 C 4865,14034 4843,14041 4820,14041 4754,14041 4702,13988 4702,13922 4702,13856 4754,13803 4820,13803 4886,13803 4939,13856 4939,13922 Z M 4787,13865 C 4777,13870 4769,13879 4763,13889 4757,13899 4754,13910 4754,13922 4754,13933 4757,13945 4763,13955 4769,13965 4777,13973 4787,13979 4797,13985 4809,13988 4820,13988 4832,13988 4843,13985 4853,13979 4863,13973 4872,13965 4878,13955 4883,13945 4886,13933 4886,13922 4886,13910 4883,13899 4878,13889 4872,13879 4863,13870 4853,13865 4843,13859 4832,13856 4820,13856 4809,13856 4797,13859 4787,13865 Z M 4517,14252 L 4886,14252 4768,14093 4675,14212 4609,14133 4517,14252 Z M 4939,14278 C 4939,14287 4937,14297 4932,14305 4927,14313 4921,14319 4913,14324 4905,14329 4896,14331 4886,14331 L 4517,14331 C 4508,14331 4498,14329 4490,14324 4482,14319 4476,14313 4471,14305 4466,14297 4464,14287 4464,14278 L 4464,13909 C 4464,13899 4466,13890 4471,13882 4476,13874 4482,13868 4490,13863 4498,13858 4508,13856 4517,13856 L 4662,13856 C 4654,13876 4649,13898 4649,13922 4649,13952 4657,13982 4672,14008 4687,14034 4709,14055 4735,14070 4761,14085 4790,14093 4820,14093 4838,14093 4856,14090 4872,14085 L 4939,14153 4939,14278 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g617"
   class="Graphic">
       <g
   id="id59">
        <rect
   id="rect612"
   height="1319"
   width="1319"
   y="3272"
   x="1017"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path614"
   d="M 2019,3868 C 1798,3952 1554,3952 1333,3868 1333,3657 1476,3509 1676,3509 1876,3509 2019,3657 2019,3868 Z M 1228,3873 C 1231,3915 1257,3952 1296,3968 L 1386,3994 1386,4116 C 1386,4120 1385,4125 1383,4129 1380,4133 1377,4136 1373,4138 1369,4141 1364,4142 1360,4142 1355,4142 1351,4141 1347,4138 1342,4136 1339,4133 1337,4129 1335,4125 1333,4120 1333,4116 1337,4085 1311,4059 1281,4063 1250,4059 1224,4085 1228,4116 1225,4187 1283,4247 1354,4247 L 1360,4247 C 1434,4250 1495,4190 1491,4116 L 1491,4021 1544,4021 1544,4321 C 1544,4356 1491,4356 1491,4321 1495,4291 1469,4265 1439,4268 1408,4265 1382,4291 1386,4321 1380,4395 1439,4458 1513,4458 L 1518,4458 C 1592,4461 1653,4401 1650,4326 L 1650,4036 1702,4036 1702,4326 C 1699,4401 1760,4461 1834,4458 L 1839,4458 C 1912,4458 1969,4398 1966,4326 1966,4256 1861,4256 1861,4326 1861,4362 1808,4362 1808,4326 L 1808,4026 1861,4026 1861,4121 C 1861,4192 1920,4250 1992,4247 L 1998,4247 C 2070,4247 2127,4187 2124,4116 2124,4045 2019,4045 2019,4116 2019,4151 1966,4151 1966,4116 L 1966,3994 2056,3968 C 2094,3950 2119,3914 2124,3873 2124,3588 1924,3404 1676,3404 1428,3404 1228,3588 1228,3873 Z M 1676,3625 C 1599,3646 1530,3695 1486,3762 1465,3790 1423,3759 1444,3731 1497,3653 1575,3597 1665,3573 1680,3569 1694,3579 1697,3594 1702,3609 1692,3620 1676,3625 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g624"
   class="Graphic">
       <g
   id="id60">
        <rect
   id="rect619"
   height="661"
   width="661"
   y="11791"
   x="9963"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path621"
   d="M 10214,12147 L 10108,12227 C 10082,12250 10078,12283 10082,12306 10085,12332 10106,12364 10135,12377 10176,12394 10216,12382 10241,12356 L 10478,12147 C 10527,12111 10504,12042 10451,12042 L 10293,12042 10490,11926 C 10502,11917 10506,11905 10506,11893 10504,11875 10490,11857 10467,11857 L 10466,11857 C 10456,11857 10448,11860 10440,11865 L 10108,12042 C 10087,12054 10080,12075 10082,12095 10083,12122 10101,12147 10135,12147 Z M 10108,12293 C 10108,12256 10138,12227 10174,12227 10211,12227 10240,12256 10240,12293 10240,12329 10211,12359 10174,12359 10138,12359 10108,12329 10108,12293 L 10108,12293 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g631"
   class="Graphic">
       <g
   id="id61">
        <rect
   id="rect626"
   height="661"
   width="661"
   y="11289"
   x="6983"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path628"
   d="M 7519,11529 L 7446,11562 C 7462,11598 7462,11640 7447,11676 L 7519,11709 C 7544,11652 7544,11586 7519,11529 Z M 7223,11413 L 7256,11485 C 7292,11470 7334,11470 7371,11486 L 7403,11413 C 7346,11388 7280,11388 7223,11413 Z M 7107,11709 L 7180,11676 C 7164,11640 7164,11598 7180,11561 L 7107,11529 C 7082,11586 7082,11652 7107,11709 Z M 7403,11824 L 7371,11752 C 7334,11768 7292,11768 7256,11753 L 7223,11825 C 7280,11850 7346,11850 7403,11824 Z M 7445,11390 C 7485,11414 7518,11447 7542,11487 7565,11527 7577,11573 7577,11619 7577,11665 7565,11711 7542,11751 7518,11791 7485,11824 7445,11848 7405,11871 7359,11883 7313,11883 7267,11883 7221,11871 7181,11848 7141,11824 7108,11791 7084,11751 7061,11711 7049,11665 7049,11619 7049,11573 7061,11527 7084,11487 7108,11447 7141,11414 7181,11390 7221,11367 7267,11355 7313,11355 7359,11355 7405,11367 7445,11390 Z M 7313,11513 C 7294,11513 7276,11518 7260,11528 7244,11537 7231,11550 7222,11566 7212,11582 7207,11600 7207,11619 7207,11638 7212,11656 7222,11672 7231,11688 7244,11701 7260,11710 7276,11720 7294,11725 7313,11725 7332,11725 7350,11720 7366,11710 7382,11701 7395,11688 7404,11672 7414,11656 7419,11638 7419,11619 7419,11600 7414,11582 7404,11566 7395,11550 7382,11537 7366,11528 7350,11518 7332,11513 7313,11513 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g638"
   class="Graphic">
       <g
   id="id62">
        <rect
   id="rect633"
   height="1163"
   width="1163"
   y="12535"
   x="5645"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path635"
   d="M 6257,13002 C 6239,13016 6222,13015 6204,13001 6195,12994 6133,12958 6114,12946 6091,12931 6093,12913 6117,12903 6193,12871 6270,12873 6345,12905 6368,12914 6369,12932 6348,12946 6328,12959 6266,12995 6257,13002 Z M 6505,13022 C 6480,12996 6465,12967 6456,12934 6451,12919 6448,12903 6444,12887 6435,12846 6431,12805 6412,12766 6378,12693 6319,12654 6233,12651 6149,12654 6087,12689 6050,12763 6040,12783 6033,12804 6028,12825 6021,12860 6014,12897 6005,12933 5998,12963 5984,12989 5961,13012 5886,13085 5826,13169 5780,13261 5774,13274 5767,13288 5763,13302 5754,13333 5777,13354 5809,13347 5830,13342 5850,13338 5869,13332 5889,13325 5896,13330 5901,13348 5931,13448 5997,13519 6098,13558 6289,13630 6513,13527 6561,13345 6564,13332 6569,13327 6583,13332 6604,13339 6626,13343 6648,13348 6671,13353 6688,13341 6691,13319 6692,13307 6688,13296 6683,13285 6640,13188 6581,13099 6505,13022 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g645"
   class="Graphic">
       <g
   id="id63">
        <rect
   id="rect640"
   height="661"
   width="661"
   y="9363"
   x="8038"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path642"
   d="M 8500,9482 C 8500,9482 8540,9526 8540,9548 8540,9570 8522,9587 8500,9587 8478,9587 8460,9570 8460,9548 8460,9526 8500,9482 8500,9482 Z M 8632,9706 C 8632,9662 8566,9587 8566,9587 8566,9587 8500,9662 8500,9706 8500,9743 8530,9772 8566,9772 8602,9772 8632,9743 8632,9706 Z M 8474,9904 C 8474,9933 8450,9957 8421,9957 L 8210,9957 C 8181,9957 8157,9933 8157,9904 L 8157,9693 C 8157,9615 8214,9550 8289,9537 L 8289,9482 8236,9482 8236,9429 8394,9429 C 8424,9429 8451,9439 8474,9455 L 8436,9493 C 8423,9486 8409,9482 8394,9482 L 8342,9482 8342,9537 C 8417,9550 8474,9615 8474,9693 L 8474,9904 Z M 8421,9693 C 8421,9635 8374,9587 8315,9587 8257,9587 8210,9635 8210,9693 L 8210,9904 8421,9904 8421,9693 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g652"
   class="Graphic">
       <g
   id="id64">
        <rect
   id="rect647"
   height="1091"
   width="1091"
   y="432"
   x="16365"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path649"
   d="M 17266,882 C 17254,882 17242,883 17230,885 17220,824 17169,793 17167,792 L 17155,785 17147,796 C 17136,812 17128,830 17125,848 17116,883 17121,916 17139,945 17118,957 17083,960 17075,960 L 16501,960 C 16486,960 16474,972 16474,987 16474,1038 16482,1088 16499,1135 16519,1187 16549,1225 16586,1249 16629,1275 16699,1290 16779,1290 16814,1290 16849,1287 16885,1280 16934,1271 16981,1254 17024,1229 17060,1209 17091,1183 17118,1151 17164,1100 17191,1042 17211,992 L 17219,992 C 17269,992 17300,972 17317,955 17328,945 17336,932 17343,917 L 17346,907 17338,901 C 17335,899 17313,882 17266,882 Z M 16631,944 C 16635,944 16638,941 16638,937 L 16638,868 C 16638,865 16635,861 16631,861 L 16555,861 C 16551,861 16548,864 16548,868 L 16548,937 C 16548,941 16551,944 16555,944 L 16631,944 Z M 16737,944 C 16741,944 16744,941 16744,937 L 16744,868 C 16744,865 16741,861 16737,861 L 16661,861 C 16657,861 16654,864 16654,868 L 16654,937 C 16654,941 16657,944 16661,944 L 16737,944 Z M 16845,944 C 16849,944 16852,941 16852,937 L 16852,868 C 16852,865 16849,861 16845,861 L 16768,861 C 16765,861 16762,864 16762,868 L 16762,937 C 16762,941 16764,944 16768,944 L 16845,944 Z M 16952,944 C 16955,944 16958,941 16958,937 L 16958,868 C 16958,865 16956,861 16952,861 L 16875,861 C 16871,861 16868,864 16868,868 L 16868,937 C 16868,941 16871,944 16875,944 L 16952,944 Z M 16737,846 C 16741,846 16744,842 16744,838 L 16744,770 C 16744,766 16741,763 16737,763 L 16661,763 C 16657,763 16654,766 16654,770 L 16654,838 C 16654,842 16657,846 16661,846 L 16737,846 Z M 16845,846 C 16849,846 16852,842 16852,838 L 16852,770 C 16852,766 16849,763 16845,763 L 16768,763 C 16765,763 16762,766 16762,770 L 16762,838 C 16762,842 16764,846 16768,846 L 16845,846 Z M 16952,846 C 16955,846 16958,842 16958,838 L 16958,770 C 16958,766 16955,763 16952,763 L 16875,763 C 16871,763 16868,766 16868,770 L 16868,838 C 16868,842 16871,846 16875,846 L 16952,846 Z M 16952,747 C 16955,747 16958,744 16958,740 L 16958,672 C 16958,667 16955,664 16952,664 L 16875,664 C 16871,664 16868,667 16868,672 L 16868,740 C 16868,743 16871,747 16875,747 L 16952,747 Z M 17059,944 C 17063,944 17066,941 17066,937 L 17066,868 C 17066,865 17063,861 17059,861 L 16982,861 C 16978,861 16975,864 16975,868 L 16975,937 C 16975,941 16978,944 16982,944 L 17059,944 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g659"
   class="Graphic">
       <g
   id="id65">
        <rect
   id="rect654"
   height="661"
   width="661"
   y="1459"
   x="3487"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path656"
   d="M 3749,1842 L 3738,1842 3738,1789 3764,1789 C 3780,1720 3791,1634 3791,1525 L 3843,1525 C 3843,1634 3854,1720 3870,1789 L 3896,1789 3896,1842 3885,1842 C 3895,1872 3905,1899 3917,1921 L 3949,1921 3949,1974 4002,2053 3938,2053 C 3918,2007 3871,1974 3817,1974 3763,1974 3716,2007 3696,2053 L 3632,2053 3685,1974 3684,1921 3717,1921 C 3729,1899 3739,1872 3749,1842 Z M 3833,1842 L 3801,1842 C 3792,1872 3782,1898 3772,1921 L 3862,1921 C 3852,1898 3842,1872 3833,1842 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g666"
   class="Graphic">
       <g
   id="id66">
        <rect
   id="rect661"
   height="2439"
   width="2439"
   y="-979"
   x="2928"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path663"
   d="M 4488,-314 C 4525,-262 4568,-205 4629,-144 4677,-96 4718,-59 4753,-29 4859,63 4878,80 4878,240 4878,526 4878,570 4726,722 4537,909 4477,971 4245,971 4135,971 4098,940 4039,892 3978,844 3896,776 3757,776 3460,776 3416,440 3416,240 3416,108 3464,-61 3608,-109 3781,-167 3874,-276 3948,-364 4025,-454 4060,-491 4147,-491 4359,-491 4399,-436 4488,-314 Z M 3562,-248 C 3355,-178 3269,45 3269,240 3269,533 3367,923 3757,923 3952,923 3952,1118 4245,1118 4537,1118 4635,1020 4830,825 5025,630 5025,533 5025,240 5025,-53 4927,-53 4732,-248 4537,-443 4537,-638 4147,-638 3854,-638 3854,-345 3562,-248 Z M 3757,240 C 3757,456 3931,630 4147,630 4363,630 4537,456 4537,240 4537,24 4363,-150 4147,-150 3931,-150 3757,24 3757,240 Z M 4147,45 C 4040,45 3952,133 3952,240 L 3854,240 C 3854,79 3986,-53 4147,-53 L 4147,45 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g673"
   class="Graphic">
       <g
   id="id67">
        <rect
   id="rect668"
   height="661"
   width="661"
   y="7233"
   x="22665"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path670"
   d="M 22887,7720 C 22885,7714 22888,7708 22893,7707 22898,7705 22904,7707 22906,7713 22927,7772 22961,7807 22995,7807 23020,7807 23044,7789 23064,7756 23067,7751 23073,7750 23078,7753 23083,7755 23084,7762 23082,7767 23058,7806 23027,7827 22995,7827 22951,7827 22912,7787 22887,7720 Z M 23095,7713 C 23090,7712 23087,7706 23088,7701 23101,7664 23106,7621 23106,7576 23106,7475 23073,7385 23026,7355 23020,7365 23008,7372 22995,7372 22975,7372 22958,7356 22958,7336 22958,7315 22975,7299 22995,7299 23015,7299 23032,7315 23032,7335 23088,7365 23127,7463 23127,7576 23127,7622 23120,7668 23108,7707 23107,7711 23103,7714 23098,7714 23097,7714 23096,7714 23095,7713 Z M 22979,7336 C 22979,7345 22986,7352 22995,7352 23004,7352 23012,7345 23012,7336 23012,7327 23004,7319 22995,7319 22986,7319 22979,7327 22979,7336 Z M 22749,7699 C 22749,7686 22756,7674 22766,7668 22762,7604 22828,7521 22929,7463 22971,7439 23015,7422 23056,7414 23061,7412 23067,7416 23068,7421 23069,7427 23066,7432 23061,7433 23021,7442 22979,7458 22940,7481 22849,7533 22786,7607 22786,7662 22807,7663 22823,7679 22823,7699 22823,7719 22806,7736 22786,7736 22766,7736 22749,7719 22749,7699 Z M 22770,7699 C 22770,7708 22777,7715 22786,7715 22795,7715 22803,7708 22803,7699 22803,7690 22795,7683 22786,7683 22777,7683 22770,7690 22770,7699 Z M 23161,7599 C 23156,7595 23156,7589 23159,7584 23200,7537 23214,7491 23197,7461 23184,7440 23156,7428 23117,7427 23111,7427 23107,7423 23107,7417 23107,7411 23112,7407 23117,7407 23164,7408 23198,7423 23214,7451 23237,7489 23222,7542 23175,7597 23173,7600 23170,7601 23167,7601 23165,7601 23162,7600 23161,7599 Z M 22929,7689 C 22888,7665 22852,7637 22823,7606 22819,7602 22820,7595 22823,7592 22828,7588 22834,7588 22838,7592 22865,7621 22900,7649 22939,7671 23027,7721 23121,7738 23171,7714 23168,7710 23167,7704 23167,7699 23167,7679 23184,7662 23204,7662 23224,7662 23241,7679 23241,7699 23241,7719 23224,7736 23204,7736 23197,7736 23190,7734 23184,7730 23166,7740 23142,7745 23114,7745 23061,7745 22993,7726 22929,7689 Z M 23204,7715 C 23213,7715 23221,7708 23221,7699 23221,7690 23213,7683 23204,7683 23195,7683 23188,7690 23188,7699 23188,7703 23189,7706 23191,7709 23192,7710 23193,7711 23193,7712 23196,7714 23200,7715 23204,7715 Z M 22787,7558 C 22763,7517 22760,7479 22776,7451 22798,7413 22852,7398 22924,7411 22929,7412 22933,7418 22932,7423 22931,7429 22926,7432 22921,7431 22858,7420 22810,7431 22794,7461 22781,7482 22785,7513 22805,7547 22808,7552 22806,7559 22801,7561 22799,7562 22798,7563 22796,7563 22793,7563 22789,7561 22787,7558 Z M 23001,7600 C 22987,7603 22974,7594 22972,7581 22969,7568 22977,7555 22990,7552 23003,7550 23016,7558 23019,7571 23021,7584 23013,7597 23001,7600 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g680"
   class="Graphic">
       <g
   id="id68">
        <rect
   id="rect675"
   height="661"
   width="661"
   y="6971"
   x="6237"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path677"
   d="M 6673,7407 L 6646,7407 6646,7327 C 6646,7323 6645,7318 6643,7314 6640,7310 6637,7307 6633,7305 6629,7302 6624,7301 6620,7301 L 6461,7301 6461,7248 6514,7248 C 6519,7248 6523,7247 6527,7245 6531,7242 6535,7239 6537,7235 6539,7231 6541,7226 6541,7222 L 6541,7169 6593,7169 C 6603,7169 6612,7167 6620,7162 6628,7157 6634,7151 6639,7143 6644,7135 6646,7125 6646,7116 L 6646,7105 C 6724,7137 6778,7212 6778,7301 6778,7356 6757,7406 6723,7443 6716,7422 6696,7407 6673,7407 Z M 6541,7510 C 6436,7497 6356,7409 6356,7301 6356,7285 6358,7269 6361,7254 L 6488,7380 6488,7407 C 6488,7416 6490,7425 6495,7433 6500,7441 6506,7448 6514,7452 6522,7457 6531,7459 6541,7459 L 6541,7510 Z M 6435,7072 C 6395,7096 6362,7129 6338,7169 6315,7209 6303,7255 6303,7301 6303,7347 6315,7393 6338,7433 6362,7473 6395,7506 6435,7530 6475,7553 6521,7565 6567,7565 6613,7565 6659,7553 6699,7530 6739,7506 6772,7473 6796,7433 6819,7393 6831,7347 6831,7301 6831,7255 6819,7209 6796,7169 6772,7129 6739,7096 6699,7072 6659,7049 6613,7037 6567,7037 6521,7037 6475,7049 6435,7072 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g687"
   class="Graphic">
       <g
   id="id69">
        <rect
   id="rect682"
   height="1105"
   width="1105"
   y="7652"
   x="33167"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path684"
   d="M 33836,7878 C 33802,7861 33763,7851 33719,7851 33675,7851 33636,7861 33602,7878 33575,7865 33530,7851 33454,7851 33322,7851 33233,8204 33233,8292 33233,8329 33292,8363 33372,8376 33400,8475 33534,8551 33697,8557 L 33697,8368 C 33671,8352 33631,8322 33631,8292 33631,8248 33719,8248 33719,8248 33719,8248 33807,8248 33807,8292 33807,8322 33767,8352 33741,8368 L 33741,8557 C 33904,8551 34038,8475 34066,8376 34146,8363 34205,8329 34205,8292 34205,8204 34116,7851 33984,7851 33908,7851 33863,7865 33836,7878 Z M 33322,8270 C 33333,8148 33419,7957 33456,7939 33480,7939 33498,7942 33515,7944 33422,8046 33385,8206 33372,8287 33350,8281 33333,8275 33322,8270 Z M 33564,8198 C 33558,8194 33552,8189 33548,8182 33544,8175 33542,8168 33542,8160 33542,8136 33562,8116 33587,8116 33594,8116 33602,8118 33609,8122 33615,8125 33621,8131 33625,8138 33629,8144 33631,8152 33631,8160 33631,8185 33611,8204 33587,8204 33579,8204 33571,8202 33564,8198 Z M 33829,8198 C 33823,8194 33817,8189 33813,8182 33809,8175 33807,8168 33807,8160 33807,8136 33827,8116 33851,8116 33859,8116 33867,8118 33874,8122 33880,8125 33886,8131 33890,8138 33894,8144 33896,8152 33896,8160 33896,8185 33876,8204 33851,8204 33844,8204 33836,8202 33829,8198 Z M 34066,8287 C 34053,8206 34016,8046 33923,7944 33940,7942 33958,7939 33982,7939 34019,7957 34105,8148 34116,8270 34105,8275 34088,8281 34066,8287 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g694"
   class="Graphic">
       <g
   id="id70">
        <rect
   id="rect689"
   height="1244"
   width="1244"
   y="10786"
   x="24105"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path691"
   d="M 24876,10960 C 24800,10960 24734,10969 24677,10985 24652,10963 24491,10826 24329,10988 L 24456,11116 C 24254,11334 24329,11706 24329,11706 24329,11706 24180,11706 24180,11905 L 24378,11855 24577,11905 C 24577,11706 24428,11706 24428,11706 24428,11706 24470,11419 24776,11367 L 24776,11507 C 24876,11507 24909,11417 24920,11358 L 25025,11358 C 25224,11358 25273,11308 25273,11258 25273,11209 25174,11159 25124,11159 25124,11159 25124,10960 24876,10960 Z M 25025,11209 C 24997,11209 24975,11186 24975,11159 24975,11132 24997,11109 25025,11109 25052,11109 25075,11132 25075,11159 25075,11186 25052,11209 25025,11209 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g701"
   class="Graphic">
       <g
   id="id71">
        <rect
   id="rect696"
   height="954"
   width="954"
   y="7319"
   x="11915"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path698"
   d="M 12506,7786 C 12532,7786 12554,7807 12554,7834 12554,7860 12532,7881 12506,7881 12480,7881 12458,7860 12458,7834 12458,7807 12480,7786 12506,7786 Z M 12773,8177 L 12010,8177 12010,7796 C 12010,7586 12182,7414 12392,7414 12601,7414 12773,7586 12773,7796 L 12773,8177 Z M 12392,8100 C 12560,8100 12696,7964 12696,7796 12696,7765 12692,7736 12684,7709 12656,7716 12628,7719 12598,7719 12470,7719 12356,7656 12287,7558 12250,7649 12178,7723 12088,7763 12087,7773 12087,7784 12087,7796 12087,7964 12223,8100 12392,8100 Z M 12277,7881 C 12303,7881 12325,7860 12325,7834 12325,7807 12303,7786 12277,7786 12251,7786 12229,7807 12229,7834 12229,7860 12251,7881 12277,7881 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g708"
   class="Graphic">
       <g
   id="id72">
        <rect
   id="rect703"
   height="954"
   width="954"
   y="4984"
   x="8204"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path705"
   d="M 8957,5461 C 8957,5433 8953,5407 8946,5382 8921,5388 8895,5391 8868,5391 8751,5391 8648,5334 8585,5245 8551,5327 8486,5394 8405,5431 8403,5440 8403,5451 8403,5461 8403,5509 8416,5557 8440,5599 8465,5641 8500,5676 8542,5701 8584,5725 8632,5738 8681,5738 8721,5738 8759,5729 8794,5713 8815,5755 8825,5775 8825,5775 8762,5796 8714,5807 8681,5807 8588,5807 8500,5770 8435,5705 8396,5666 8366,5617 8350,5565 L 8299,5565 8299,5391 8341,5391 C 8373,5233 8513,5114 8681,5114 8772,5114 8860,5151 8925,5216 8974,5264 9006,5325 9019,5391 L 9062,5391 9062,5562 9062,5563 9062,5565 9059,5565 8924,5689 8722,5666 8722,5603 8906,5603 8937,5566 C 8950,5533 8957,5499 8957,5461 Z M 8607,5465 C 8615,5473 8620,5484 8620,5495 8620,5507 8615,5518 8607,5526 8599,5534 8588,5538 8576,5538 8552,5538 8533,5519 8533,5495 8533,5471 8552,5452 8576,5452 8588,5452 8599,5456 8607,5465 Z M 8784,5452 C 8808,5452 8827,5471 8827,5495 8827,5519 8808,5538 8784,5538 8760,5538 8741,5519 8741,5495 8741,5488 8743,5480 8747,5473 8750,5467 8756,5461 8762,5458 8769,5454 8777,5452 8784,5452 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g715"
   class="Graphic">
       <g
   id="id73">
        <rect
   id="rect710"
   height="661"
   width="661"
   y="7185"
   x="37312"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path712"
   d="M 37642,7779 C 37540,7779 37457,7696 37457,7594 37457,7521 37500,7457 37563,7427 L 37563,7330 C 37563,7316 37575,7304 37589,7304 L 37602,7304 37576,7251 37708,7251 37682,7304 37695,7304 C 37709,7304 37721,7316 37721,7330 L 37721,7427 C 37784,7457 37827,7521 37827,7594 37827,7696 37744,7779 37642,7779 Z M 37616,7465 C 37555,7477 37510,7530 37510,7594 L 37512,7618 37563,7566 37670,7673 37772,7571 C 37763,7518 37721,7475 37668,7465 L 37668,7357 37616,7357 37616,7465 Z M 37670,7515 C 37685,7515 37697,7527 37697,7541 37697,7556 37685,7568 37670,7568 37655,7568 37644,7556 37644,7541 37644,7527 37655,7515 37670,7515 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g722"
   class="Graphic">
       <g
   id="id74">
        <rect
   id="rect717"
   height="1275"
   width="1275"
   y="1134"
   x="38060"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path719"
   d="M 38300,2051 C 38340,2121 38398,2179 38468,2219 38537,2259 38616,2281 38697,2281 38697,2026 38492,1822 38238,1822 38238,1902 38260,1982 38300,2051 Z M 38761,1457 C 38780,1468 38796,1484 38807,1503 38819,1523 38824,1545 38824,1567 38824,1590 38819,1611 38807,1631 38796,1650 38780,1666 38761,1677 38741,1689 38719,1695 38697,1695 38675,1695 38653,1689 38633,1677 38614,1666 38598,1650 38587,1631 38575,1611 38570,1590 38570,1567 38570,1545 38575,1523 38587,1503 38598,1484 38614,1468 38633,1457 38653,1446 38675,1440 38697,1440 38719,1440 38741,1446 38761,1457 Z M 38388,1746 C 38399,1765 38415,1781 38435,1792 38454,1803 38476,1809 38498,1809 38525,1809 38550,1801 38570,1787 L 38570,1796 C 38570,1819 38575,1841 38587,1860 38598,1880 38614,1896 38633,1907 38653,1918 38675,1924 38697,1924 38719,1924 38741,1918 38761,1907 38780,1896 38796,1880 38807,1860 38819,1841 38824,1819 38824,1796 L 38824,1787 C 38844,1801 38869,1809 38896,1809 38966,1809 39023,1752 39023,1682 39023,1631 38993,1588 38950,1567 38993,1547 39023,1503 39023,1453 39023,1382 38966,1325 38896,1325 38869,1325 38844,1333 38824,1348 L 38824,1338 C 38824,1315 38819,1294 38807,1274 38796,1255 38780,1239 38761,1228 38741,1216 38719,1210 38697,1210 38675,1210 38653,1216 38633,1228 38614,1239 38598,1255 38587,1274 38575,1294 38570,1315 38570,1338 L 38570,1348 C 38550,1333 38525,1325 38498,1325 38476,1325 38454,1331 38435,1342 38415,1353 38399,1369 38388,1389 38377,1408 38371,1430 38371,1453 38371,1503 38401,1547 38444,1567 38401,1588 38371,1631 38371,1682 38371,1704 38377,1726 38388,1746 Z M 38697,2281 C 38778,2281 38857,2259 38926,2219 38996,2179 39054,2121 39094,2051 39134,1982 39156,1902 39156,1822 38901,1822 38697,2026 38697,2281 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g729"
   class="Graphic">
       <g
   id="id75">
        <rect
   id="rect724"
   height="1535"
   width="1535"
   y="-625"
   x="23640"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path726"
   d="M 24223,-472 L 24100,-472 24100,-343 C 24057,-334 24022,-316 23997,-293 L 23836,-454 23750,-367 23931,-186 C 23916,-141 23916,-103 23916,-103 L 23793,-103 23793,19 23919,19 C 23922,58 23929,103 23941,151 L 23774,206 23812,323 23977,268 C 23992,299 24008,331 24028,362 L 23882,459 23950,561 24104,458 C 24139,492 24179,523 24227,549 L 24168,667 24278,722 24339,599 24329,594 C 24387,613 24454,627 24530,631 L 24530,756 24652,756 24652,629 C 24699,623 24764,611 24822,583 L 24916,676 25002,589 24921,507 C 24944,476 24959,437 24959,387 24959,357 24956,331 24952,306 L 25048,259 24993,148 24909,190 C 24875,140 24831,111 24793,98 L 24833,-22 24717,-62 24670,78 C 24589,70 24540,39 24511,5 L 24619,-48 24563,-159 24468,-110 C 24467,-129 24460,-182 24424,-234 L 24519,-376 24417,-445 24331,-315 C 24301,-329 24266,-340 24223,-345 L 24223,-472 Z M 24181,360 C 24019,186 24039,-91 24039,-93 L 24039,-97 24039,-102 C 24039,-159 24063,-226 24162,-226 24323,-226 24344,-138 24346,-103 24346,19 24444,203 24714,203 24734,203 24837,213 24837,387 24837,503 24593,510 24591,510 24411,510 24273,460 24181,360 Z M 24146,-91 C 24132,-83 24121,-71 24113,-57 24104,-43 24100,-28 24100,-11 24100,5 24104,21 24113,35 24121,49 24132,60 24146,68 24160,76 24176,81 24192,81 24208,81 24224,76 24238,68 24252,60 24264,49 24272,35 24280,21 24284,5 24284,-11 24284,-28 24280,-43 24272,-57 24264,-71 24252,-83 24238,-91 24224,-99 24208,-103 24192,-103 24176,-103 24160,-99 24146,-91 Z M 24315,150 C 24306,156 24298,163 24293,173 24287,182 24284,193 24284,203 24284,214 24287,225 24293,234 24298,243 24306,251 24315,256 24324,262 24335,265 24346,265 24356,265 24367,262 24376,256 24386,251 24393,243 24399,234 24404,225 24407,214 24407,203 24407,193 24404,182 24399,173 24393,163 24386,156 24376,150 24367,145 24356,142 24346,142 24335,142 24324,145 24315,150 Z M 24622,265 C 24606,265 24590,269 24576,277 24562,285 24550,297 24542,311 24534,325 24530,341 24530,357 24530,373 24534,389 24542,403 24550,417 24562,428 24576,436 24590,445 24606,449 24622,449 24638,449 24654,445 24668,436 24682,428 24693,417 24701,403 24710,389 24714,373 24714,357 24714,341 24710,325 24701,311 24693,297 24682,285 24668,277 24654,269 24638,265 24622,265 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g736"
   class="Graphic">
       <g
   id="id76">
        <rect
   id="rect731"
   height="1350"
   width="1350"
   y="4811"
   x="10198"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path733"
   d="M 11396,5272 C 11417,5251 11417,5216 11396,5196 L 11162,4962 C 11142,4941 11107,4941 11086,4962 L 10873,5176 10657,4962 C 10646,4951 10632,4946 10618,4946 10605,4946 10591,4951 10581,4962 L 10346,5196 C 10325,5216 10325,5251 10346,5272 L 10561,5486 10346,5701 C 10325,5722 10325,5755 10346,5777 L 10581,6012 C 10603,6033 10636,6033 10657,6012 L 10873,5797 11086,6012 C 11097,6022 11110,6027 11124,6027 11139,6027 11152,6022 11163,6012 L 11397,5777 C 11418,5755 11418,5722 11397,5701 L 11182,5486 11396,5272 Z M 10899,5331 C 10908,5336 10914,5342 10919,5351 10924,5359 10926,5368 10926,5378 10926,5387 10924,5396 10919,5405 10914,5413 10908,5420 10899,5424 10891,5429 10882,5432 10873,5432 10863,5432 10854,5429 10846,5424 10837,5420 10831,5413 10826,5405 10821,5396 10819,5387 10819,5378 10819,5368 10821,5359 10826,5351 10831,5342 10837,5336 10846,5331 10854,5326 10863,5324 10873,5324 10882,5324 10891,5326 10899,5331 Z M 10422,5234 L 10618,5038 10814,5234 10618,5429 10422,5234 Z M 10738,5532 C 10729,5527 10723,5521 10718,5512 10713,5504 10711,5495 10711,5486 10711,5476 10713,5467 10718,5459 10723,5450 10729,5444 10738,5439 10746,5434 10755,5432 10765,5432 10774,5432 10783,5434 10792,5439 10800,5444 10807,5450 10811,5459 10816,5467 10819,5476 10819,5486 10819,5495 10816,5504 10811,5512 10807,5521 10800,5527 10792,5532 10783,5537 10774,5539 10765,5539 10755,5539 10746,5537 10738,5532 Z M 10846,5640 C 10837,5635 10831,5629 10826,5620 10821,5612 10819,5603 10819,5593 10819,5584 10821,5575 10826,5566 10831,5558 10837,5551 10846,5547 10854,5542 10863,5539 10873,5539 10882,5539 10891,5542 10899,5547 10908,5551 10914,5558 10919,5566 10924,5575 10926,5584 10926,5593 10926,5603 10924,5612 10919,5620 10914,5629 10908,5635 10899,5640 10891,5645 10882,5647 10873,5647 10863,5647 10854,5645 10846,5640 Z M 11007,5439 C 11016,5444 11022,5450 11027,5459 11032,5467 11034,5476 11034,5486 11034,5495 11032,5504 11027,5512 11022,5521 11016,5527 11007,5532 10999,5537 10990,5539 10980,5539 10971,5539 10962,5537 10953,5532 10945,5527 10938,5521 10934,5512 10929,5504 10926,5495 10926,5486 10926,5476 10929,5467 10934,5459 10938,5450 10945,5444 10953,5439 10962,5434 10971,5432 10980,5432 10990,5432 10999,5434 11007,5439 Z M 11124,5936 L 10928,5740 11124,5544 11319,5740 11124,5936 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g743"
   class="Graphic">
       <g
   id="id77">
        <rect
   id="rect738"
   height="1289"
   width="1289"
   y="9363"
   x="9574"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path740"
   d="M 10682,9904 L 10295,9852 10295,9646 10063,9646 10063,9724 10218,9724 10218,10125 10166,10125 10063,9904 C 10079,9899 10089,9883 10089,9868 10089,9847 10074,9827 10053,9827 L 9950,9827 C 9924,9827 9909,9842 9909,9863 9909,9883 9924,9904 9950,9904 L 9981,9904 10084,10120 10007,10120 C 9991,10028 9909,9955 9806,9955 9692,9955 9600,10048 9600,10162 9600,10275 9692,10368 9806,10368 9909,10368 9991,10296 10007,10203 L 10450,10203 C 10460,10079 10558,9981 10682,9981 L 10682,9904 Z M 9806,10296 C 9734,10296 9677,10239 9677,10167 9677,10095 9734,10038 9806,10038 9863,10038 9914,10074 9929,10131 L 9806,10131 9806,10208 9928,10208 C 9911,10257 9861,10296 9806,10296 Z M 10527,10213 C 10527,10301 10594,10368 10682,10368 10769,10368 10836,10301 10836,10213 10836,10125 10769,10059 10682,10059 10594,10059 10527,10125 10527,10213 Z M 10682,10290 C 10640,10290 10604,10254 10604,10213 10604,10172 10640,10136 10682,10136 10723,10136 10759,10172 10759,10213 10759,10254 10723,10290 10682,10290 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g750"
   class="Graphic">
       <g
   id="id78">
        <rect
   id="rect745"
   height="1203"
   width="1203"
   y="12761"
   x="38507"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path747"
   d="M 38687,13748 C 38662,13733 38640,13712 38626,13687 38611,13661 38603,13632 38603,13602 38603,13573 38611,13544 38626,13518 38640,13493 38662,13471 38687,13457 38713,13442 38742,13434 38771,13434 38801,13434 38830,13442 38856,13457 38881,13471 38902,13493 38917,13518 38932,13544 38940,13573 38940,13602 38940,13632 38932,13661 38917,13687 38902,13712 38881,13733 38856,13748 38830,13763 38801,13771 38771,13771 38742,13771 38713,13763 38687,13748 Z M 38651,13394 C 38615,13415 38584,13446 38563,13482 38542,13519 38531,13560 38531,13602 38531,13645 38542,13686 38563,13723 38584,13759 38615,13789 38651,13811 38688,13832 38729,13843 38771,13843 38814,13843 38855,13832 38892,13811 38928,13789 38959,13759 38980,13723 39001,13686 39012,13645 39012,13602 39012,13560 39001,13519 38980,13482 38959,13446 38928,13415 38892,13394 38855,13373 38814,13362 38771,13362 38729,13362 38688,13373 38651,13394 Z M 39243,13266 L 39445,13266 39445,13179 39291,13179 39197,13022 C 39183,12998 39156,12982 39127,12982 39105,12982 39084,12991 39070,13006 L 38892,13184 C 38877,13199 38868,13218 38868,13242 38868,13272 38883,13298 38908,13312 L 39070,13410 39070,13650 39156,13650 39156,13338 39048,13259 39159,13146 39243,13266 Z M 39360,13748 C 39335,13733 39314,13712 39299,13687 39284,13661 39276,13632 39276,13602 39276,13573 39284,13544 39299,13518 39314,13493 39335,13471 39360,13457 39386,13442 39415,13434 39445,13434 39474,13434 39503,13442 39529,13457 39554,13471 39576,13493 39590,13518 39605,13544 39613,13573 39613,13602 39613,13632 39605,13661 39590,13687 39576,13712 39554,13733 39529,13748 39503,13763 39474,13771 39445,13771 39415,13771 39386,13763 39360,13748 Z M 39324,13394 C 39288,13415 39257,13446 39236,13482 39215,13519 39204,13560 39204,13602 39204,13645 39215,13686 39236,13723 39257,13759 39288,13789 39324,13811 39361,13832 39402,13843 39445,13843 39487,13843 39528,13832 39565,13811 39601,13789 39632,13759 39653,13723 39674,13686 39685,13645 39685,13602 39685,13560 39674,13519 39653,13482 39632,13446 39601,13415 39565,13394 39528,13373 39487,13362 39445,13362 39402,13362 39361,13373 39324,13394 Z M 39300,13016 C 39348,13016 39387,12977 39387,12929 39387,12881 39348,12843 39300,12843 39252,12843 39214,12881 39214,12929 39214,12977 39252,13016 39300,13016 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g757"
   class="Graphic">
       <g
   id="id79">
        <rect
   id="rect752"
   height="661"
   width="661"
   y="1176"
   x="5811"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path754"
   d="M 6194,1295 C 6194,1285 6191,1276 6186,1268 L 6141,1189 6096,1268 C 6091,1276 6088,1285 6088,1295 6088,1304 6091,1313 6095,1321 6100,1329 6107,1336 6115,1341 6123,1345 6132,1348 6141,1348 6170,1348 6194,1324 6194,1295 Z M 6234,1583 L 6206,1612 C 6171,1646 6111,1646 6077,1612 L 6049,1583 6020,1612 C 6002,1628 5979,1638 5955,1638 5936,1638 5918,1632 5903,1622 L 5903,1744 C 5903,1748 5905,1753 5907,1757 5909,1761 5913,1764 5917,1766 5921,1769 5925,1770 5930,1770 L 6352,1770 C 6357,1770 6361,1769 6365,1766 6369,1764 6373,1761 6375,1757 6377,1753 6379,1748 6379,1744 L 6379,1622 C 6364,1632 6346,1638 6327,1638 6303,1638 6280,1628 6262,1612 L 6234,1583 Z M 6299,1427 L 6167,1427 6167,1374 6115,1374 6115,1427 5983,1427 C 5969,1427 5955,1430 5943,1437 5931,1444 5921,1454 5914,1466 5907,1478 5903,1492 5903,1506 L 5903,1547 C 5903,1575 5927,1598 5955,1598 5969,1598 5983,1593 5992,1583 L 6049,1527 6104,1583 C 6124,1603 6158,1603 6177,1583 L 6233,1527 6290,1583 C 6299,1593 6313,1598 6327,1598 6355,1598 6379,1575 6379,1547 L 6379,1506 C 6379,1492 6375,1478 6368,1466 6361,1454 6351,1444 6339,1437 6327,1430 6313,1427 6299,1427 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g764"
   class="Graphic">
       <g
   id="id80">
        <rect
   id="rect759"
   height="661"
   width="661"
   y="2925"
   x="4306"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path761"
   d="M 4729,3348 C 4678,3400 4594,3400 4543,3348 4491,3297 4491,3213 4543,3162 4595,3110 4678,3110 4729,3162 4781,3213 4781,3297 4729,3348 Z M 4779,3080 C 4775,3052 4762,3025 4740,3002 4707,3035 4703,3076 4711,3106 4747,3115 4776,3144 4785,3180 4815,3188 4856,3184 4889,3151 4867,3129 4840,3116 4812,3112 4823,3097 4831,3079 4833,3058 4833,3058 4808,3061 4779,3080 Z M 4439,3452 C 4439,3452 4464,3449 4493,3430 4497,3458 4510,3485 4532,3508 4565,3475 4569,3434 4561,3404 4525,3395 4496,3366 4487,3330 4457,3322 4416,3326 4383,3359 4405,3381 4432,3394 4460,3398 4449,3413 4441,3431 4439,3452 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g771"
   class="Graphic">
       <g
   id="id81">
        <rect
   id="rect766"
   height="1295"
   width="1295"
   y="8194"
   x="14816"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path768"
   d="M 15394,8639 C 15350,8586 15225,8453 15101,8453 15101,8453 14999,8606 15099,8810 15070,8853 15053,8876 15049,8927 L 14949,8942 14960,8993 15051,8979 15058,9016 14977,9065 15001,9111 15076,9065 C 15136,9191 15286,9255 15463,9255 15640,9255 15790,9191 15850,9065 L 15925,9111 15949,9065 15868,9016 15875,8979 15966,8993 15977,8942 15877,8927 C 15873,8876 15856,8853 15827,8810 15927,8606 15825,8453 15825,8453 15701,8453 15576,8586 15532,8639 L 15463,8634 15394,8639 Z M 15334,8796 C 15341,8801 15348,8807 15353,8815 15357,8823 15359,8832 15359,8841 15359,8850 15357,8859 15353,8867 15348,8875 15341,8881 15334,8886 15326,8890 15317,8893 15308,8893 15299,8893 15290,8890 15282,8886 15274,8881 15267,8875 15263,8867 15258,8859 15256,8850 15256,8841 15256,8832 15258,8823 15263,8815 15267,8807 15274,8801 15282,8796 15290,8792 15299,8789 15308,8789 15317,8789 15326,8792 15334,8796 Z M 15644,8796 C 15652,8801 15659,8807 15663,8815 15668,8823 15670,8832 15670,8841 15670,8850 15668,8859 15663,8867 15659,8875 15652,8881 15644,8886 15636,8890 15627,8893 15618,8893 15609,8893 15600,8890 15592,8886 15585,8881 15578,8875 15573,8867 15569,8859 15567,8850 15567,8841 15567,8832 15569,8823 15573,8815 15578,8807 15585,8801 15592,8796 15600,8792 15609,8789 15618,8789 15627,8789 15636,8792 15644,8796 Z M 15411,8945 L 15515,8945 15479,9016 C 15489,9050 15518,9074 15554,9074 15567,9074 15581,9070 15592,9064 15604,9057 15614,9047 15621,9035 15628,9023 15631,9010 15631,8996 L 15657,8996 C 15657,9014 15652,9032 15643,9048 15634,9064 15621,9077 15605,9086 15590,9095 15572,9100 15554,9100 15515,9100 15481,9079 15463,9048 15445,9079 15411,9100 15372,9100 15354,9100 15336,9095 15321,9086 15305,9077 15292,9064 15283,9048 15274,9032 15269,9014 15269,8996 L 15295,8996 C 15295,9010 15298,9023 15305,9035 15312,9047 15322,9057 15334,9064 15345,9070 15359,9074 15372,9074 15408,9074 15437,9050 15447,9016 L 15411,8945 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g778"
   class="Graphic">
       <g
   id="id82">
        <rect
   id="rect773"
   height="661"
   width="661"
   y="567"
   x="7272"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path775"
   d="M 7708,1161 C 7708,1161 7496,1108 7496,871 L 7496,844 C 7496,825 7507,808 7523,799 L 7556,818 7602,791 7648,818 7681,799 C 7697,808 7708,825 7708,844 L 7708,1161 Z M 7602,752 L 7648,778 7688,755 C 7674,730 7652,711 7628,703 7623,664 7590,633 7549,633 L 7549,686 C 7561,686 7570,693 7574,704 7550,712 7530,731 7516,755 L 7556,778 7602,752 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g785"
   class="Graphic">
       <g
   id="id83">
        <rect
   id="rect780"
   height="661"
   width="661"
   y="355"
   x="27024"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path782"
   d="M 27169,949 L 27169,896 27539,896 27539,949 27169,949 Z M 27486,632 C 27449,632 27414,653 27395,685 L 27380,685 27380,553 27460,553 27460,500 27380,500 27380,421 27328,421 27328,500 27248,500 27248,553 27328,553 27328,685 27313,685 C 27284,635 27219,617 27169,646 27118,675 27101,740 27130,791 27149,823 27184,843 27222,843 L 27486,843 C 27505,843 27523,839 27539,829 27555,820 27568,807 27577,791 27587,775 27592,756 27592,738 27592,719 27587,701 27577,685 27568,669 27555,656 27539,646 27523,637 27505,632 27486,632 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g792"
   class="Graphic">
       <g
   id="id84">
        <rect
   id="rect787"
   height="661"
   width="661"
   y="371"
   x="36407"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path789"
   d="M 36922,569 C 36922,560 36919,551 36915,543 36910,535 36903,528 36895,523 36887,519 36878,516 36869,516 L 36843,516 36843,437 36790,437 36790,516 36763,516 C 36754,516 36745,519 36737,523 36729,528 36722,535 36718,543 36713,551 36711,560 36711,569 L 36711,622 C 36701,622 36692,624 36684,629 36676,634 36670,640 36665,648 36660,656 36658,665 36658,675 L 36658,701 36552,701 C 36543,701 36534,703 36526,708 36518,713 36511,719 36506,727 36502,735 36499,745 36499,754 L 36499,965 36579,965 36579,912 36631,912 36631,965 36737,965 36737,912 36790,912 36790,965 36843,965 36843,912 36895,912 36895,965 36975,965 36975,675 C 36975,665 36972,656 36968,648 36963,640 36956,634 36948,629 36940,624 36931,622 36922,622 L 36922,569 Z M 36579,859 L 36579,807 36631,807 36631,859 36579,859 Z M 36737,859 L 36737,807 36790,807 36790,859 36737,859 Z M 36737,754 L 36737,701 36790,701 36790,754 36737,754 Z M 36763,569 L 36869,569 36869,622 36763,622 36763,569 Z M 36843,859 L 36843,807 36895,807 36895,859 36843,859 Z M 36895,754 L 36843,754 36843,701 36895,701 36895,754 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g799"
   class="Graphic">
       <g
   id="id85">
        <rect
   id="rect794"
   height="661"
   width="661"
   y="796"
   x="18844"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path796"
   d="M 19055,920 C 19019,941 18989,971 18968,1007 18947,1043 18936,1084 18936,1126 18936,1168 18947,1209 18968,1245 18989,1281 19019,1311 19055,1332 19091,1353 19132,1364 19174,1364 19216,1364 19257,1353 19293,1332 19329,1311 19359,1281 19380,1245 19401,1209 19412,1168 19412,1126 19412,1113 19411,1100 19408,1086 19401,1073 19385,1073 19385,1073 L 19332,1073 19332,1047 C 19332,1020 19306,1020 19306,1020 L 19253,1020 19253,994 C 19253,968 19227,968 19227,968 L 19200,968 19200,915 C 19200,888 19174,888 19174,888 19132,888 19091,899 19055,920 Z M 19128,973 C 19134,976 19139,981 19142,987 19146,993 19148,1000 19148,1007 19148,1014 19146,1021 19142,1027 19139,1033 19134,1038 19128,1041 19122,1045 19115,1047 19108,1047 19101,1047 19094,1045 19088,1041 19082,1038 19077,1033 19074,1027 19070,1021 19068,1014 19068,1007 19068,1000 19070,993 19074,987 19077,981 19082,976 19088,973 19094,969 19101,968 19108,968 19115,968 19122,969 19128,973 Z M 19049,1079 C 19055,1082 19060,1087 19063,1093 19067,1099 19068,1106 19068,1113 19068,1120 19067,1127 19063,1133 19060,1139 19055,1144 19049,1147 19043,1151 19036,1152 19029,1152 19022,1152 19015,1151 19009,1147 19003,1144 18998,1139 18995,1133 18991,1127 18989,1120 18989,1113 18989,1106 18991,1099 18995,1093 18998,1087 19003,1082 19009,1079 19015,1075 19022,1073 19029,1073 19036,1073 19043,1075 19049,1079 Z M 19181,1105 C 19187,1108 19192,1113 19195,1119 19199,1125 19200,1132 19200,1139 19200,1146 19199,1153 19195,1159 19192,1165 19187,1170 19181,1173 19175,1177 19168,1179 19161,1179 19154,1179 19147,1177 19141,1173 19135,1170 19130,1165 19127,1159 19123,1153 19121,1146 19121,1139 19121,1132 19123,1125 19127,1119 19130,1113 19135,1108 19141,1105 19147,1101 19154,1100 19161,1100 19168,1100 19175,1101 19181,1105 Z M 19313,1158 C 19319,1161 19324,1166 19327,1172 19331,1178 19332,1185 19332,1192 19332,1199 19331,1206 19327,1212 19324,1218 19319,1223 19313,1226 19307,1230 19300,1232 19293,1232 19286,1232 19279,1230 19273,1226 19267,1223 19262,1218 19259,1212 19255,1206 19253,1199 19253,1192 19253,1185 19255,1178 19259,1172 19262,1166 19267,1161 19273,1158 19279,1154 19286,1152 19293,1152 19300,1152 19307,1154 19313,1158 Z M 19148,1232 C 19155,1232 19161,1233 19167,1237 19173,1240 19178,1245 19182,1251 19185,1257 19187,1264 19187,1271 19187,1278 19185,1285 19182,1291 19178,1297 19173,1302 19167,1305 19161,1309 19155,1311 19148,1311 19141,1311 19134,1309 19128,1305 19122,1302 19117,1297 19113,1291 19110,1285 19108,1278 19108,1271 19108,1264 19110,1257 19113,1251 19117,1245 19122,1240 19128,1237 19134,1233 19141,1232 19148,1232 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g806"
   class="Graphic">
       <g
   id="id86">
        <rect
   id="rect801"
   height="661"
   width="661"
   y="1784"
   x="11575"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path803"
   d="M 11641,2114 C 11641,2259 11760,2378 11905,2378 12050,2378 12169,2259 12169,2114 12169,1969 12050,1850 11905,1850 11759,1850 11641,1969 11641,2114 Z M 11694,2114 C 11694,1997 11788,1903 11905,1903 12022,1903 12116,1997 12116,2114 12116,2231 12022,2325 11905,2325 11788,2325 11694,2231 11694,2114 Z M 11773,2008 L 11852,2061 11905,1982 11958,2061 12037,2008 12011,2167 11799,2167 11773,2008 Z M 11814,2220 C 11805,2220 11799,2214 11799,2205 L 11799,2193 12011,2193 12011,2205 C 12011,2214 12005,2220 11996,2220 L 11814,2220 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g813"
   class="Graphic">
       <g
   id="id87">
        <rect
   id="rect808"
   height="661"
   width="661"
   y="1526"
   x="24181"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path810"
   d="M 24602,1909 C 24593,1925 24580,1938 24564,1947 24548,1957 24530,1962 24511,1962 24492,1962 24474,1957 24458,1947 24442,1938 24429,1925 24420,1909 24410,1893 24405,1875 24405,1856 24405,1837 24410,1819 24420,1803 24429,1787 24442,1774 24458,1765 24474,1755 24492,1750 24511,1750 24530,1750 24548,1755 24564,1765 24580,1774 24593,1787 24602,1803 24612,1819 24617,1837 24617,1856 24617,1875 24612,1893 24602,1909 Z M 24671,1766 L 24678,1777 24722,1777 24722,1935 24678,1935 C 24665,1962 24646,1986 24622,2004 24665,2017 24698,2038 24713,2064 24688,2096 24607,2120 24511,2120 24415,2120 24334,2096 24309,2064 24324,2038 24357,2017 24400,2004 24376,1986 24357,1962 24344,1935 L 24300,1935 24300,1777 24344,1777 C 24362,1738 24393,1707 24432,1689 L 24432,1645 24590,1645 24590,1689 C 24608,1698 24624,1710 24638,1724 L 24684,1701 C 24720,1682 24722,1647 24722,1592 L 24775,1592 C 24775,1646 24775,1714 24708,1747 L 24671,1766 Z M 24643,1856 C 24643,1833 24637,1810 24625,1790 24614,1770 24597,1753 24577,1742 24557,1730 24534,1724 24511,1724 24488,1724 24465,1730 24445,1742 24425,1753 24408,1770 24397,1790 24385,1810 24379,1833 24379,1856 24379,1879 24385,1902 24397,1922 24408,1942 24425,1959 24445,1970 24465,1982 24488,1988 24511,1988 24534,1988 24557,1982 24577,1970 24597,1959 24614,1942 24625,1922 24637,1902 24643,1879 24643,1856 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g820"
   class="Graphic">
       <g
   id="id88">
        <rect
   id="rect815"
   height="661"
   width="661"
   y="446"
   x="20668"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path817"
   d="M 20760,565 L 20760,789 20840,710 20919,802 C 20945,829 20945,855 20945,855 L 20945,1014 21051,1014 21051,829 C 21051,829 21051,802 21037,776 21023,750 20998,723 20998,723 L 20919,633 20985,565 Z M 21156,565 L 21039,683 21051,697 C 21051,697 21075,723 21090,750 21095,760 21098,770 21100,779 L 21236,644 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g827"
   class="Graphic">
       <g
   id="id89">
        <rect
   id="rect822"
   height="661"
   width="661"
   y="5968"
   x="4459"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path824"
   d="M 4578,6060 C 4549,6060 4525,6084 4525,6113 L 4525,6483 C 4525,6512 4549,6536 4578,6536 L 5000,6536 C 5029,6536 5053,6512 5053,6483 L 5053,6113 C 5053,6084 5029,6060 5000,6060 L 4578,6060 Z M 4604,6483 L 4604,6430 4683,6430 4683,6483 4604,6483 Z M 4604,6404 L 4604,6351 4683,6351 4683,6404 4604,6404 Z M 4604,6324 L 4604,6272 4683,6272 4683,6324 4604,6324 Z M 4749,6483 L 4749,6430 4829,6430 4829,6483 4749,6483 Z M 4749,6404 L 4749,6351 4829,6351 4829,6404 4749,6404 Z M 4749,6324 L 4749,6272 4829,6272 4829,6324 4749,6324 Z M 4895,6483 L 4895,6430 4974,6430 4974,6483 4895,6483 Z M 4895,6404 L 4895,6351 4974,6351 4974,6404 4895,6404 Z M 4895,6324 L 4895,6272 4974,6272 4974,6324 4895,6324 Z M 4974,6219 L 4604,6219 4604,6113 4974,6113 4974,6219 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g834"
   class="Graphic">
       <g
   id="id90">
        <rect
   id="rect829"
   height="661"
   width="661"
   y="14254"
   x="10451"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path831"
   d="M 10768,14561 C 10764,14563 10760,14567 10758,14571 10756,14575 10755,14579 10755,14584 10755,14589 10756,14593 10758,14597 10760,14601 10764,14605 10768,14607 10772,14609 10776,14610 10781,14610 10786,14610 10790,14609 10794,14607 10798,14605 10802,14601 10804,14597 10806,14593 10807,14589 10807,14584 10807,14579 10806,14575 10804,14571 10802,14567 10798,14563 10794,14561 10790,14559 10786,14558 10781,14558 10776,14558 10772,14559 10768,14561 Z M 10662,14584 C 10662,14518 10715,14465 10781,14465 10847,14465 10900,14518 10900,14584 10900,14650 10847,14703 10781,14703 10715,14703 10662,14650 10662,14584 Z M 10649,14355 C 10609,14379 10576,14412 10552,14452 10529,14492 10517,14538 10517,14584 10517,14630 10529,14676 10552,14716 10576,14756 10609,14789 10649,14813 10689,14836 10735,14848 10781,14848 10827,14848 10873,14836 10913,14813 10953,14789 10986,14756 11010,14716 11033,14676 11045,14630 11045,14584 11045,14538 11033,14492 11010,14452 10986,14412 10953,14379 10913,14355 10873,14332 10827,14320 10781,14320 10735,14320 10689,14332 10649,14355 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g841"
   class="Graphic">
       <g
   id="id91">
        <rect
   id="rect836"
   height="925"
   width="925"
   y="670"
   x="8716"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path838"
   d="M 9049,1393 C 9009,1370 8977,1338 8954,1298 8931,1259 8919,1214 8919,1169 8919,1124 8931,1079 8954,1040 8977,1000 9009,968 9049,945 9088,922 9133,910 9178,910 9223,910 9268,922 9307,945 9347,968 9379,1000 9402,1040 9425,1079 9437,1124 9437,1169 9437,1214 9425,1259 9402,1298 9379,1338 9347,1370 9307,1393 9268,1416 9223,1428 9178,1428 9133,1428 9088,1416 9049,1393 Z M 9012,881 C 8961,910 8919,952 8890,1003 8861,1053 8845,1111 8845,1169 8845,1227 8861,1285 8890,1335 8919,1386 8961,1428 9012,1457 9062,1486 9120,1502 9178,1502 9236,1502 9294,1486 9344,1457 9395,1428 9437,1386 9466,1335 9495,1285 9511,1227 9511,1169 9511,1111 9495,1053 9466,1003 9437,952 9395,910 9344,881 9294,852 9236,836 9178,836 9120,836 9062,852 9012,881 Z M 9141,984 L 9141,1206 9317,1311 9344,1266 9196,1178 9196,984 9141,984 Z M 8978,757 L 8808,900 8856,956 9026,814 8978,757 Z M 9548,900 L 9378,757 9330,814 9500,956 9548,900 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g848"
   class="Graphic">
       <g
   id="id92">
        <rect
   id="rect843"
   height="661"
   width="661"
   y="7319"
   x="3213"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path845"
   d="M 3464,7887 L 3464,7834 3622,7834 3622,7887 C 3622,7916 3598,7939 3569,7939 L 3517,7939 C 3488,7939 3464,7916 3464,7887 Z M 3564,7413 C 3580,7444 3596,7497 3596,7570 3596,7625 3569,7755 3569,7755 L 3517,7755 C 3517,7755 3490,7625 3490,7570 3490,7497 3506,7444 3522,7413 3528,7411 3536,7411 3543,7411 3550,7411 3558,7411 3564,7413 Z M 3489,7365 C 3458,7407 3437,7483 3437,7570 3437,7630 3447,7685 3464,7755 3464,7784 3488,7807 3517,7807 L 3569,7807 C 3598,7807 3622,7784 3622,7755 3639,7685 3649,7630 3649,7570 3649,7483 3628,7407 3597,7365 3580,7361 3562,7359 3543,7359 3524,7359 3506,7361 3489,7365 Z M 3452,7787 C 3437,7760 3427,7719 3420,7675 3399,7637 3385,7586 3385,7543 3385,7508 3396,7482 3423,7459 3430,7429 3440,7402 3452,7379 3381,7414 3332,7459 3332,7543 3332,7627 3381,7752 3452,7787 Z M 3634,7379 C 3646,7402 3656,7429 3663,7459 3690,7482 3701,7508 3701,7543 3701,7586 3687,7637 3666,7675 3659,7719 3649,7760 3634,7787 3705,7752 3754,7627 3754,7543 3754,7459 3705,7414 3634,7379 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g855"
   class="Graphic">
       <g
   id="id93">
        <rect
   id="rect850"
   height="661"
   width="661"
   y="12140"
   x="4139"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path852"
   d="M 4429,12217 C 4417,12224 4407,12234 4400,12246 4393,12258 4390,12271 4390,12285 4390,12285 4390,12285 4390,12285 4390,12299 4393,12313 4400,12325 4407,12337 4417,12347 4429,12354 4434,12356 4438,12358 4443,12360 L 4443,12391 4363,12391 4363,12444 4443,12444 4443,12679 C 4423,12676 4403,12670 4384,12662 4365,12653 4348,12643 4332,12631 4317,12618 4305,12605 4296,12590 L 4337,12549 4231,12470 4231,12549 C 4231,12575 4239,12599 4253,12621 4268,12643 4287,12663 4311,12680 4334,12697 4359,12710 4387,12719 4414,12729 4442,12734 4469,12734 4496,12734 4524,12729 4551,12719 4579,12710 4604,12697 4627,12680 4652,12663 4670,12643 4685,12621 4699,12599 4707,12575 4707,12549 L 4707,12470 4601,12549 4642,12590 C 4633,12605 4621,12618 4606,12631 4590,12643 4573,12653 4554,12662 4535,12670 4515,12676 4495,12679 L 4495,12444 4575,12444 4575,12391 4495,12391 4495,12360 C 4500,12358 4504,12356 4509,12354 4521,12347 4531,12337 4538,12325 4545,12313 4548,12299 4548,12285 4548,12271 4545,12258 4538,12246 4531,12234 4521,12224 4509,12217 4497,12210 4483,12206 4469,12206 4455,12206 4441,12210 4429,12217 Z M 4469,12259 C 4474,12259 4478,12260 4482,12262 4486,12265 4490,12268 4492,12272 4494,12276 4495,12281 4495,12285 4495,12290 4494,12294 4492,12298 4490,12302 4486,12306 4482,12308 4478,12310 4474,12312 4469,12312 4464,12312 4460,12310 4456,12308 4452,12306 4448,12302 4446,12298 4444,12294 4443,12290 4443,12285 4443,12281 4444,12276 4446,12272 4448,12268 4452,12265 4456,12262 4460,12260 4464,12259 4469,12259 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g862"
   class="Graphic">
       <g
   id="id94">
        <rect
   id="rect857"
   height="661"
   width="661"
   y="10027"
   x="6253"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path859"
   d="M 6715,10128 C 6755,10152 6788,10185 6812,10225 6835,10265 6847,10311 6847,10357 6847,10403 6835,10449 6812,10489 6788,10529 6755,10562 6715,10586 6675,10609 6629,10621 6583,10621 6537,10621 6491,10609 6451,10586 6411,10562 6378,10529 6354,10489 6331,10449 6319,10403 6319,10357 6319,10311 6331,10265 6354,10225 6378,10185 6411,10152 6451,10128 6491,10105 6537,10093 6583,10093 6629,10093 6675,10105 6715,10128 Z M 6477,10174 C 6445,10193 6419,10219 6400,10251 6382,10284 6372,10320 6372,10357 6372,10412 6393,10463 6428,10500 L 6527,10301 6726,10202 C 6689,10167 6638,10146 6583,10146 6546,10146 6510,10156 6477,10174 Z M 6689,10540 C 6721,10521 6747,10495 6766,10463 6784,10430 6794,10394 6794,10357 6794,10302 6773,10251 6738,10214 L 6639,10413 6440,10512 C 6477,10547 6528,10568 6583,10568 6620,10568 6656,10558 6689,10540 Z M 6563,10337 L 6522,10418 6603,10377 6583,10357 6563,10337 Z M 6609,10502 L 6609,10542 6583,10542 6583,10502 6609,10502 Z M 6704,10441 L 6732,10469 6713,10488 6685,10460 6704,10441 Z M 6728,10331 L 6768,10331 6768,10357 6728,10357 6728,10331 Z M 6557,10212 L 6557,10172 6583,10172 6583,10212 6557,10212 Z M 6462,10273 L 6434,10245 6453,10226 6481,10254 6462,10273 Z M 6438,10357 L 6438,10383 6398,10383 6398,10357 6438,10357 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g869"
   class="Graphic">
       <g
   id="id95">
        <rect
   id="rect864"
   height="1062"
   width="1062"
   y="5419"
   x="13361"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path866"
   d="M 13594,6374 C 13538,6374 13516,6274 13511,6234 13510,6224 13509,6214 13509,6203 13509,6175 13515,6146 13525,6119 13527,6113 13530,6107 13533,6102 13542,6085 13556,6072 13572,6063 13582,6057 13593,6053 13604,6051 13654,6042 13689,6072 13734,6082 13739,6084 13744,6084 13750,6084 13759,6084 13768,6082 13775,6077 13783,6073 13790,6066 13794,6059 13799,6051 13801,6042 13801,6033 13801,6030 13801,6027 13800,6024 13782,5951 13649,5950 13594,5950 13594,5871 13681,5860 13743,5866 13780,5870 13816,5878 13851,5890 13872,5897 13897,5916 13920,5914 13955,5911 13962,5874 13947,5848 13910,5785 13805,5780 13743,5780 13743,5695 13816,5679 13887,5691 13923,5699 13959,5710 13993,5725 14014,5734 14040,5752 14064,5744 14125,5725 14061,5660 14034,5644 14015,5634 13995,5626 13974,5620 13951,5613 13923,5615 13944,5589 13955,5579 13966,5571 13979,5563 14004,5549 14031,5540 14060,5536 14140,5517 14251,5514 14270,5615 14271,5624 14272,5633 14272,5642 14272,5682 14261,5721 14242,5755 14239,5759 14237,5763 14234,5767 14155,5902 14057,6026 13943,6133 13883,6195 13818,6252 13748,6303 13706,6333 13650,6374 13594,6374 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g876"
   class="Graphic">
       <g
   id="id96">
        <rect
   id="rect871"
   height="661"
   width="661"
   y="12901"
   x="9781"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path873"
   d="M 10142,13251 L 10164,13284 10124,13284 C 10120,13355 10111,13427 10098,13497 L 10071,13493 C 10085,13424 10094,13354 10098,13284 L 10058,13284 10080,13251 C 10022,13225 9979,13135 9979,13073 9979,13049 9985,13027 9997,13007 10008,12987 10025,12970 10045,12958 10065,12947 10088,12941 10111,12941 10134,12941 10157,12947 10177,12958 10197,12970 10214,12987 10225,13007 10237,13027 10243,13049 10243,13073 10243,13135 10200,13225 10142,13251 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g883"
   class="Graphic">
       <g
   id="id97">
        <rect
   id="rect878"
   height="661"
   width="661"
   y="14634"
   x="11712"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path880"
   d="M 12029,14674 L 11778,14806 11778,14858 12280,14858 12280,14806 Z M 12148,14911 L 12148,15096 12227,15096 12227,14911 Z M 11778,15228 L 12280,15228 12280,15149 11778,15149 Z M 11989,14911 L 11989,15096 12068,15096 12068,14911 Z M 11831,14911 L 11831,15096 11910,15096 11910,14911 11831,14911 11831,14911 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g964"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id98">
        <rect
   id="rect885"
   height="3887"
   width="7545"
   y="6574"
   x="25517"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path887"
   d="M 33034,8030 C 32931,7989 32825,7996 32720,8011"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path889"
   d="M 32563,8037 C 32542,8040 32522,8043 32502,8045 32415,8054 32333,8077 32253,8105"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path891"
   d="M 32105,8163 C 32035,8191 31965,8220 31894,8243 31865,8252 31836,8262 31807,8273"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path893"
   d="M 31659,8331 C 31562,8374 31468,8423 31379,8481"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path895"
   d="M 31250,8574 C 31168,8639 31086,8710 31017,8790"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path897"
   d="M 30924,8919 C 30898,8964 30876,9013 30860,9064 30844,9115 30824,9164 30801,9212"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path899"
   d="M 30724,9351 C 30686,9414 30644,9475 30601,9535 30582,9561 30562,9586 30542,9611"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path901"
   d="M 30434,9728 C 30358,9802 30276,9870 30192,9933"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path903"
   d="M 30063,10026 C 29976,10086 29884,10140 29786,10182"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path905"
   d="M 29637,10236 C 29594,10248 29551,10258 29507,10265 29446,10275 29384,10280 29323,10282"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path907"
   d="M 29164,10278 C 29100,10272 29036,10263 28974,10250 28931,10241 28892,10226 28856,10206"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path909"
   d="M 28733,10106 C 28663,10029 28608,9934 28557,9842"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path911"
   d="M 28479,9703 C 28427,9610 28400,9507 28382,9402"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path913"
   d="M 28357,9245 C 28355,9230 28353,9216 28351,9201 28334,9098 28352,9011 28390,8935"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path915"
   d="M 28482,8805 C 28554,8727 28644,8662 28726,8602"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path917"
   d="M 28858,8515 C 28948,8464 29048,8426 29156,8408"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path919"
   d="M 29315,8395 C 29425,8396 29529,8427 29616,8482"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path921"
   d="M 29736,8586 C 29766,8620 29791,8658 29811,8699 29837,8753 29860,8810 29879,8868"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path923"
   d="M 29916,9022 C 29932,9127 29929,9234 29897,9337"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path925"
   d="M 29834,9483 C 29784,9576 29720,9661 29650,9741"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path927"
   d="M 29543,9859 C 29521,9883 29498,9907 29476,9931 29425,9984 29371,10033 29313,10077"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path929"
   d="M 29181,10166 C 29105,10211 29025,10250 28944,10280 28927,10286 28910,10293 28892,10299"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path931"
   d="M 28742,10351 C 28641,10383 28538,10410 28433,10424"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path933"
   d="M 28274,10433 C 28166,10431 28062,10412 27961,10384"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path935"
   d="M 27810,10335 C 27762,10318 27714,10299 27667,10280 27615,10259 27564,10240 27512,10222"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path937"
   d="M 27363,10169 C 27262,10134 27163,10098 27066,10056"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path939"
   d="M 26922,9987 C 26907,9978 26891,9970 26876,9961 26799,9917 26724,9871 26650,9822"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path941"
   d="M 26519,9732 C 26433,9670 26349,9606 26267,9538"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path943"
   d="M 26146,9436 C 26120,9413 26095,9391 26070,9368 26016,9320 25964,9270 25915,9218"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path945"
   d="M 25810,9098 C 25744,9013 25687,8923 25647,8826"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path947"
   d="M 25596,8676 C 25565,8576 25538,8466 25545,8363"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path949"
   d="M 25588,8211 C 25620,8154 25672,8102 25751,8060 25778,8045 25806,8031 25833,8016"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path951"
   d="M 25974,7942 C 26068,7893 26161,7843 26255,7794"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path953"
   d="M 26398,7724 C 26496,7683 26598,7654 26700,7624"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path955"
   d="M 26851,7577 C 26855,7576 26858,7575 26861,7574 26957,7541 27059,7520 27158,7493"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path957"
   d="M 27309,7442 C 27343,7427 27376,7411 27408,7391 27461,7357 27520,7316 27572,7267"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path959"
   d="M 27672,7144 C 27707,7081 27725,7012 27712,6935 L 27685,6837"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path961"
   d="M 27599,6713 L 27499,6631 27454,6601"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g971"
   class="Graphic">
       <g
   id="id99">
        <rect
   id="rect966"
   height="1244"
   width="1244"
   y="11471"
   x="21831"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path968"
   d="M 22254,12192 L 22254,12192 C 22254,12218 22247,12244 22234,12267 22221,12289 22202,12308 22179,12321 22156,12334 22131,12341 22104,12341 L 22104,12341 C 22078,12341 22053,12334 22030,12321 22007,12308 21988,12289 21975,12267 21962,12244 21955,12218 21955,12192 21955,12154 21970,12119 21993,12093 21970,12066 21955,12031 21955,11993 L 21955,11993 C 21955,11967 21962,11941 21975,11918 21988,11896 22007,11877 22030,11864 22053,11851 22078,11844 22104,11844 L 22104,11844 C 22131,11844 22156,11851 22179,11864 22202,11877 22221,11896 22234,11918 22247,11941 22254,11967 22254,11993 L 22254,11993 C 22320,11997 22386,12002 22453,12002 22519,12002 22585,11997 22651,11993 L 22651,11993 C 22651,11967 22658,11941 22671,11918 22684,11896 22703,11877 22726,11864 22749,11851 22774,11844 22801,11844 L 22801,11844 C 22827,11844 22852,11851 22875,11864 22898,11877 22917,11896 22930,11918 22943,11941 22950,11967 22950,11993 L 22950,11993 C 22950,12031 22935,12066 22912,12093 22935,12119 22950,12154 22950,12192 L 22950,12192 C 22950,12218 22943,12244 22930,12267 22917,12289 22898,12308 22875,12321 22852,12334 22827,12341 22801,12341 L 22801,12341 C 22774,12341 22749,12334 22726,12321 22703,12308 22684,12289 22671,12267 22658,12244 22651,12218 22651,12192 22585,12188 22519,12183 22453,12183 22386,12183 22320,12188 22254,12192 L 22254,12192 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g978"
   class="Graphic">
       <g
   id="id100">
        <rect
   id="rect973"
   height="1244"
   width="1244"
   y="3594"
   x="26280"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path975"
   d="M 26886,3836 C 26900,3812 26920,3791 26945,3777 26970,3763 26997,3756 27026,3756 27054,3756 27082,3763 27107,3777 27131,3791 27152,3812 27166,3836 27180,3861 27187,3889 27187,3917 27187,3938 27204,3954 27225,3954 27246,3954 27262,3938 27262,3917 L 27262,3880 27337,3880 27337,3917 C 27337,3937 27331,3956 27322,3973 27312,3990 27298,4004 27281,4014 27264,4024 27244,4029 27225,4029 27205,4029 27186,4024 27169,4014 27152,4004 27138,3990 27128,3973 27118,3956 27113,3937 27113,3917 27113,3902 27109,3887 27101,3874 27094,3860 27083,3849 27069,3842 27056,3834 27041,3830 27026,3830 27011,3830 26996,3834 26982,3842 26969,3849 26958,3860 26950,3874 26943,3887 26939,3902 26939,3917 L 27001,3917 27001,3981 C 27145,4024 27250,4157 27250,4315 27250,4376 27233,4436 27203,4489 27172,4542 27128,4586 27076,4616 27023,4647 26963,4663 26902,4663 26840,4663 26780,4647 26727,4616 26675,4586 26631,4542 26600,4489 26570,4436 26553,4376 26553,4315 26553,4157 26658,4024 26802,3981 L 26802,3917 26864,3917 C 26864,3889 26872,3861 26886,3836 Z M 27498,3917 L 27498,3967 27399,3967 27399,3917 27498,3917 Z M 27250,3718 L 27299,3718 27299,3818 27250,3818 27250,3718 Z M 27345,3837 L 27415,3766 27450,3801 27380,3872 27345,3837 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g985"
   class="Graphic">
       <g
   id="id101">
        <rect
   id="rect980"
   height="661"
   width="661"
   y="8315"
   x="27069"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path982"
   d="M 27455,8532 L 27427,8473 27359,8473 27359,8434 27452,8434 27471,8473 27656,8473 27630,8566 27516,8566 27534,8602 C 27549,8596 27566,8592 27584,8592 27657,8592 27716,8651 27716,8724 27716,8797 27657,8856 27584,8856 27511,8856 27452,8797 27452,8724 27452,8683 27471,8647 27500,8623 L 27478,8579 27406,8751 27344,8751 C 27331,8811 27278,8856 27214,8856 27141,8856 27082,8797 27082,8724 27082,8651 27141,8592 27214,8592 27283,8592 27339,8644 27346,8711 L 27362,8711 27301,8566 27280,8566 C 27269,8566 27260,8557 27260,8546 27260,8535 27269,8526 27280,8526 L 27353,8526 C 27364,8526 27373,8535 27373,8546 27373,8557 27364,8566 27353,8566 L 27345,8566 27392,8681 27455,8532 Z M 27122,8724 C 27122,8775 27163,8817 27214,8817 27256,8817 27292,8789 27303,8751 L 27188,8751 27188,8711 27306,8711 C 27299,8666 27261,8632 27214,8632 27163,8632 27122,8673 27122,8724 Z M 27584,8632 C 27572,8632 27561,8634 27551,8638 L 27602,8742 27567,8760 27518,8660 C 27501,8676 27491,8699 27491,8724 27491,8775 27533,8817 27584,8817 27635,8817 27676,8775 27676,8724 27676,8673 27635,8632 27584,8632 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g992"
   class="Graphic">
       <g
   id="id102">
        <rect
   id="rect987"
   height="661"
   width="661"
   y="14513"
   x="6648"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path989"
   d="M 6793,14605 L 6793,15081 C 6793,15110 6817,15133 6846,15133 L 7031,15133 C 7104,15133 7163,15074 7163,15001 L 7163,14605 C 7163,14576 7139,14553 7110,14553 L 6846,14553 C 6817,14553 6793,14576 6793,14605 Z M 7084,14632 L 7084,14817 6872,14817 6872,14632 7084,14632 Z M 6925,14896 L 6925,14949 6978,14949 6978,14975 6925,14975 6925,15028 6899,15028 6899,14975 6846,14975 6846,14949 6899,14949 6899,14896 6925,14896 Z M 7110,14949 C 7110,14963 7098,14975 7084,14975 7069,14975 7057,14963 7057,14949 7057,14934 7069,14922 7084,14922 7098,14922 7110,14934 7110,14949 Z M 7031,14975 C 7045,14975 7057,14987 7057,15001 7057,15016 7045,15028 7031,15028 7016,15028 7004,15016 7004,15001 7004,14987 7016,14975 7031,14975 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g999"
   class="Graphic">
       <g
   id="id103">
        <rect
   id="rect994"
   height="661"
   width="661"
   y="11507"
   x="19626"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path996"
   d="M 20183,11664 L 20184,11663 C 20204,11642 20204,11609 20184,11589 20163,11568 20130,11568 20109,11589 L 20089,11608 C 20053,11581 20002,11584 19969,11617 L 19736,11850 C 19703,11883 19700,11934 19727,11970 L 19708,11990 C 19687,12011 19687,12044 19708,12065 19728,12085 19761,12085 19782,12065 L 19783,12064 C 19786,12067 19788,12071 19792,12075 19827,12110 19886,12110 19922,12075 L 20193,11803 C 20229,11767 20229,11709 20194,11673 20190,11669 20186,11667 20183,11664 Z M 19773,11887 L 20006,11654 C 20018,11642 20037,11639 20051,11646 L 19765,11932 C 19758,11918 19761,11899 19773,11887 Z M 20156,11766 L 19885,12037 C 19869,12052 19844,12052 19829,12037 19813,12022 19813,11995 19829,11981 L 20100,11710 C 20114,11694 20141,11694 20156,11710 20171,11725 20171,11750 20156,11766 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1124"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id104">
        <rect
   id="rect1001"
   height="9146"
   width="6868"
   y="6128"
   x="19884"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1003"
   d="M 26724,6312 C 26617,6300 26516,6268 26413,6245"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1005"
   d="M 26256,6221 C 26250,6220 26243,6220 26237,6220 26137,6217 26038,6206 25939,6195"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1007"
   d="M 25781,6175 C 25731,6169 25680,6164 25629,6160 25574,6156 25519,6154 25464,6155"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1009"
   d="M 25305,6161 C 25231,6165 25156,6171 25082,6175 25050,6177 25019,6180 24988,6184"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1011"
   d="M 24833,6216 C 24728,6245 24631,6290 24548,6353"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1013"
   d="M 24429,6459 C 24352,6530 24274,6603 24212,6690"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1015"
   d="M 24136,6829 C 24125,6858 24116,6888 24109,6920 24092,6997 24086,7071 24087,7142"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1017"
   d="M 24104,7300 C 24113,7346 24125,7391 24139,7437 24156,7493 24179,7547 24207,7599"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1019"
   d="M 24295,7732 C 24342,7791 24397,7845 24458,7893 24481,7911 24505,7928 24531,7943"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1021"
   d="M 24669,8021 C 24760,8072 24848,8127 24909,8223"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1023"
   d="M 24959,8373 C 24958,8479 24872,8561 24774,8613"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1025"
   d="M 24624,8666 C 24619,8667 24614,8668 24610,8669 24509,8685 24409,8688 24307,8687"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1027"
   d="M 24149,8684 C 24115,8684 24081,8684 24048,8684 23975,8685 23903,8687 23831,8696"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1029"
   d="M 23675,8727 C 23632,8739 23588,8755 23546,8775 23493,8800 23435,8818 23377,8837"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1031"
   d="M 23230,8896 C 23165,8930 23110,8976 23075,9049 23060,9080 23050,9110 23045,9141"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1033"
   d="M 23053,9299 C 23077,9399 23131,9496 23181,9581 23182,9583 23183,9585 23184,9587"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1035"
   d="M 23286,9709 C 23363,9779 23458,9831 23553,9880"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1037"
   d="M 23694,9952 C 23791,9998 23891,10033 23991,10067"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1039"
   d="M 24141,10120 C 24160,10128 24180,10135 24200,10143 24278,10174 24363,10189 24447,10204"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1041"
   d="M 24602,10237 C 24642,10248 24680,10261 24717,10280 24774,10309 24834,10336 24893,10364"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1043"
   d="M 25037,10432 C 25122,10475 25204,10523 25279,10584 25287,10591 25295,10597 25304,10604"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1045"
   d="M 25438,10689 C 25531,10739 25630,10777 25727,10820"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1047"
   d="M 25870,10889 C 25962,10944 26041,11015 26111,11096"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1049"
   d="M 26209,11221 C 26224,11242 26238,11263 26253,11284 26304,11361 26299,11442 26265,11514"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1051"
   d="M 26166,11637 C 26118,11678 26062,11709 26009,11725 25965,11738 25922,11752 25879,11767"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1053"
   d="M 25730,11823 C 25644,11858 25559,11896 25477,11938 25465,11944 25453,11950 25441,11955"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1055"
   d="M 25292,12011 C 25191,12044 25087,12074 24995,12123"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1057"
   d="M 24865,12214 C 24780,12296 24773,12403 24795,12510"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1059"
   d="M 24841,12662 C 24855,12702 24870,12739 24884,12774 24907,12836 24927,12899 24947,12962"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1061"
   d="M 24995,13113 C 25029,13213 25067,13311 25122,13405"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1063"
   d="M 25194,13546 C 25236,13643 25269,13744 25309,13843"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1065"
   d="M 25371,13989 C 25410,14089 25437,14191 25460,14294"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1067"
   d="M 25494,14449 C 25498,14469 25502,14488 25507,14508 25524,14588 25521,14680 25493,14763"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1069"
   d="M 25413,14899 C 25378,14935 25334,14963 25279,14979 25227,14994 25177,15012 25128,15032"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1071"
   d="M 24983,15097 C 24886,15141 24789,15185 24687,15214"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1073"
   d="M 24531,15242 C 24427,15252 24319,15242 24217,15208"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1075"
   d="M 24074,15139 C 24043,15119 24014,15096 23987,15070 23937,15023 23883,14980 23828,14938"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1077"
   d="M 23700,14843 C 23614,14780 23531,14714 23460,14636"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1079"
   d="M 23363,14510 C 23300,14426 23232,14343 23176,14253"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1081"
   d="M 23104,14111 C 23092,14077 23081,14043 23075,14006 23062,13939 23049,13870 23041,13800"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1083"
   d="M 23032,13641 C 23033,13559 23045,13477 23075,13398 23083,13376 23093,13355 23104,13335"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1085"
   d="M 23206,13214 C 23286,13145 23385,13098 23481,13056"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1087"
   d="M 23630,13001 C 23737,12981 23840,13029 23920,13101"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1089"
   d="M 24021,13224 C 24031,13241 24040,13259 24048,13276 24079,13349 24112,13438 24115,13525"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1091"
   d="M 24078,13678 C 24061,13708 24036,13736 24002,13762 23947,13803 23893,13844 23838,13883"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1093"
   d="M 23706,13971 C 23631,14018 23553,14060 23470,14097 23454,14104 23439,14110 23423,14117"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1095"
   d="M 23274,14172 C 23174,14206 23073,14236 22974,14276"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1097"
   d="M 22826,14335 C 22727,14368 22619,14381 22517,14408"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1099"
   d="M 22367,14462 C 22263,14498 22158,14495 22053,14498"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1101"
   d="M 21895,14514 C 21882,14517 21870,14520 21858,14523 21767,14547 21674,14546 21580,14541"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1103"
   d="M 21421,14533 C 21378,14532 21336,14533 21295,14538 21230,14546 21166,14547 21103,14544"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1105"
   d="M 20946,14524 C 20868,14509 20792,14488 20718,14462 20692,14453 20667,14443 20642,14431"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1107"
   d="M 20504,14353 C 20417,14294 20336,14224 20259,14151"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1109"
   d="M 20144,14040 C 20127,14024 20110,14007 20094,13991 20035,13935 19991,13863 19961,13784"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1111"
   d="M 19921,13631 C 19912,13574 19909,13515 19912,13458 19914,13407 19923,13360 19938,13316"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1113"
   d="M 20003,13171 C 20048,13090 20101,13012 20140,12926 20145,12915 20150,12903 20156,12893"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1115"
   d="M 20251,12766 C 20323,12691 20414,12632 20506,12578"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1117"
   d="M 20645,12500 C 20654,12495 20663,12490 20672,12485 20756,12437 20848,12409 20941,12388"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1119"
   d="M 21098,12360 C 21154,12351 21209,12343 21265,12333 L 21414,12333"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1121"
   d="M 21571,12350 L 21645,12364 21782,12318"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1237"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id105">
        <rect
   id="rect1126"
   height="5528"
   width="10650"
   y="9280"
   x="12230"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1128"
   d="M 22451,11786 C 22507,11697 22574,11614 22636,11528"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1130"
   d="M 22723,11395 C 22747,11354 22768,11313 22786,11269 22808,11214 22819,11156 22825,11096"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1132"
   d="M 22831,10938 C 22831,10849 22831,10761 22846,10676 22849,10657 22851,10639 22851,10621"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1134"
   d="M 22828,10464 C 22799,10369 22747,10281 22710,10189 22707,10183 22705,10178 22702,10172"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1136"
   d="M 22619,10037 C 22554,9956 22471,9886 22389,9819"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1138"
   d="M 22267,9717 C 22187,9646 22092,9597 21991,9562"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1140"
   d="M 21837,9522 C 21798,9515 21759,9509 21721,9505 21654,9498 21588,9495 21521,9495"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1142"
   d="M 21362,9497 C 21263,9500 21165,9505 21067,9505 21059,9505 21052,9505 21044,9505"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1144"
   d="M 20887,9527 C 20784,9552 20684,9592 20586,9629"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1146"
   d="M 20438,9688 C 20342,9733 20251,9791 20172,9861"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1148"
   d="M 20064,9977 C 20053,9992 20043,10007 20033,10022 19985,10095 19935,10168 19884,10239"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1150"
   d="M 19790,10367 C 19736,10436 19681,10504 19623,10569 19610,10583 19598,10597 19585,10611"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1152"
   d="M 19480,10730 C 19411,10810 19344,10893 19283,10979"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1154"
   d="M 19198,11114 C 19198,11115 19197,11116 19197,11117 19144,11209 19089,11298 19034,11386"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1156"
   d="M 18951,11522 C 18926,11563 18902,11606 18878,11649 18850,11700 18824,11750 18801,11802"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1158"
   d="M 18745,11951 C 18719,12036 18701,12122 18695,12211 18693,12229 18691,12246 18689,12263"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1160"
   d="M 18652,12418 C 18621,12518 18582,12616 18562,12722"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1162"
   d="M 18538,12879 C 18524,12984 18509,13090 18476,13191"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1164"
   d="M 18415,13337 C 18371,13433 18330,13531 18288,13629"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1166"
   d="M 18223,13774 C 18204,13816 18184,13858 18163,13899 18135,13952 18106,14005 18075,14056"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1168"
   d="M 17990,14190 C 17939,14267 17884,14342 17828,14416 17820,14426 17811,14437 17803,14447"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1170"
   d="M 17688,14556 C 17605,14621 17509,14672 17410,14710"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1172"
   d="M 17259,14756 C 17155,14781 17049,14787 16943,14771"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1174"
   d="M 16789,14731 C 16740,14712 16691,14689 16642,14660 16598,14634 16552,14611 16505,14589"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1176"
   d="M 16361,14521 C 16263,14474 16168,14422 16094,14351"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1178"
   d="M 15998,14224 C 15948,14132 15911,14031 15886,13928"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1180"
   d="M 15859,13771 C 15855,13738 15853,13704 15852,13671 15849,13599 15852,13526 15862,13454"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1182"
   d="M 15897,13299 C 15916,13244 15940,13190 15973,13139 15998,13099 16025,13061 16055,13025"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1184"
   d="M 16166,12911 C 16246,12840 16336,12783 16434,12743"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1186"
   d="M 16585,12694 C 16686,12663 16787,12628 16891,12607"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1188"
   d="M 17049,12588 C 17154,12578 17259,12554 17358,12519"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1190"
   d="M 17505,12456 C 17598,12403 17654,12309 17686,12205"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1192"
   d="M 17716,12048 C 17719,12016 17721,11984 17722,11953 17723,11879 17718,11805 17705,11732"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1194"
   d="M 17665,11578 C 17651,11540 17635,11502 17616,11466 17584,11407 17543,11356 17497,11311"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1196"
   d="M 17374,11211 C 17287,11150 17192,11099 17104,11043"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1198"
   d="M 16970,10957 C 16879,10901 16785,10852 16688,10812"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1200"
   d="M 16538,10759 C 16512,10751 16486,10744 16460,10737 16384,10718 16306,10702 16227,10692"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1202"
   d="M 16069,10679 C 15971,10676 15872,10684 15776,10706 15768,10708 15761,10709 15753,10711"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1204"
   d="M 15601,10758 C 15502,10794 15406,10840 15315,10895"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1206"
   d="M 15183,10983 C 15177,10987 15172,10991 15167,10995 15086,11056 15015,11125 14949,11198"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1208"
   d="M 14845,11318 C 14781,11394 14718,11470 14650,11542 14645,11547 14640,11552 14635,11557"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1210"
   d="M 14514,11659 C 14428,11722 14335,11773 14242,11824"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1212"
   d="M 14104,11903 C 14094,11910 14083,11916 14073,11923 13994,11972 13908,12012 13818,12039"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1214"
   d="M 13662,12073 C 13587,12083 13510,12084 13434,12075 13404,12072 13375,12067 13346,12061"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1216"
   d="M 13193,12020 C 13105,11991 13019,11957 12932,11923 12919,11918 12907,11914 12895,11909"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1218"
   d="M 12745,11856 C 12642,11820 12541,11778 12463,11713"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1220"
   d="M 12362,11590 C 12312,11499 12278,11396 12264,11290"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1222"
   d="M 12258,11131 C 12259,11116 12261,11101 12263,11086 12274,10994 12307,10909 12354,10831"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1224"
   d="M 12449,10703 C 12503,10641 12565,10586 12628,10539 12647,10524 12667,10509 12688,10495"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1226"
   d="M 12819,10406 C 12908,10349 13000,10297 13096,10248"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1228"
   d="M 13239,10181 C 13337,10138 13437,10101 13537,10068"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1230"
   d="M 13688,10020 C 13720,10010 13752,10001 13784,9991 13853,9970 13923,9949 13992,9926"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1232"
   d="M 14141,9872 C 14217,9841 14291,9806 14362,9763 14382,9751 14403,9738 14423,9726"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1234"
   d="M 14557,9640 C 14645,9580 14728,9513 14794,9430"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1318"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id106">
        <rect
   id="rect1239"
   height="2797"
   width="7222"
   y="6041"
   x="8904"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1241"
   d="M 15502,8334 C 15547,8231 15617,8155 15691,8081"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1243"
   d="M 15802,7968 C 15856,7910 15905,7848 15943,7771 15954,7748 15964,7725 15974,7702"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1245"
   d="M 16025,7551 C 16054,7448 16070,7345 16085,7239"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1247"
   d="M 16097,7081 C 16088,6971 16033,6879 15963,6798"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1249"
   d="M 15851,6685 C 15826,6661 15800,6638 15776,6616 15719,6564 15656,6529 15591,6507"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1251"
   d="M 15436,6478 C 15370,6475 15305,6481 15243,6494 15202,6502 15162,6513 15123,6526"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1253"
   d="M 14975,6584 C 14880,6629 14789,6685 14703,6748"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1255"
   d="M 14576,6843 C 14491,6908 14410,6977 14339,7055"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1257"
   d="M 14242,7181 C 14182,7268 14118,7353 14051,7435"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1259"
   d="M 13949,7557 C 13904,7609 13859,7660 13814,7711 13789,7739 13763,7766 13736,7793"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1261"
   d="M 13624,7906 C 13549,7981 13474,8057 13408,8139"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1263"
   d="M 13315,8268 C 13314,8269 13313,8271 13312,8273 13255,8364 13180,8435 13098,8498"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1265"
   d="M 12968,8589 C 12920,8621 12872,8652 12826,8684 12785,8713 12740,8734 12694,8750"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1267"
   d="M 12539,8783 C 12472,8791 12405,8792 12339,8790 12300,8789 12261,8785 12222,8780"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1269"
   d="M 12067,8746 C 11981,8720 11898,8684 11822,8638 11807,8629 11794,8620 11780,8611"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1271"
   d="M 11664,8503 C 11594,8423 11542,8328 11502,8231"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1273"
   d="M 11450,8081 C 11424,7979 11415,7872 11425,7765"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1275"
   d="M 11455,7609 C 11460,7592 11465,7575 11472,7558 11502,7473 11551,7400 11612,7337"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1277"
   d="M 11731,7232 C 11789,7189 11851,7151 11913,7118 11943,7102 11974,7086 12005,7071"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1279"
   d="M 12150,7007 C 12250,6969 12353,6942 12459,6936"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1281"
   d="M 12618,6937 C 12723,6937 12832,6934 12935,6957"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1283"
   d="M 13082,7015 C 13087,7019 13093,7022 13099,7026 13181,7081 13251,7156 13301,7242"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1285"
   d="M 13360,7389 C 13374,7444 13378,7501 13373,7558 13367,7610 13353,7657 13332,7699"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1287"
   d="M 13242,7830 C 13172,7908 13087,7977 13012,8050"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1289"
   d="M 12905,8167 C 12830,8243 12743,8303 12651,8358"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1291"
   d="M 12514,8437 C 12459,8468 12405,8499 12354,8532 12316,8556 12278,8577 12238,8596"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1293"
   d="M 12091,8656 C 12002,8688 11911,8715 11822,8745 11811,8749 11800,8752 11789,8755"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1295"
   d="M 11634,8792 C 11529,8809 11422,8814 11317,8807"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1297"
   d="M 11159,8790 C 11053,8774 10947,8745 10859,8691"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1299"
   d="M 10738,8588 C 10657,8506 10563,8466 10467,8428"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1301"
   d="M 10321,8366 C 10278,8345 10235,8320 10195,8288 10150,8253 10100,8226 10048,8204"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1303"
   d="M 9896,8155 C 9799,8131 9697,8114 9602,8091 9596,8090 9591,8088 9586,8087"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1305"
   d="M 9431,8049 C 9328,8023 9226,7993 9129,7952"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1307"
   d="M 8998,7863 C 8932,7783 8922,7672 8936,7560"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1309"
   d="M 8970,7405 C 8977,7379 8985,7354 8994,7330 9020,7253 9056,7182 9097,7115"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1311"
   d="M 9186,6983 C 9250,6898 9320,6818 9388,6738"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1313"
   d="M 9491,6616 C 9561,6536 9633,6458 9715,6391"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1315"
   d="M 9845,6299 C 9864,6287 9885,6276 9906,6266 L 10073,6160 10109,6124"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1325"
   class="Graphic">
       <g
   id="id107">
        <rect
   id="rect1320"
   height="1137"
   width="1137"
   y="1570"
   x="22340"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1322"
   d="M 23099,1684 C 23244,1684 23362,1802 23362,1947 L 23362,2329 C 23362,2375 23350,2421 23327,2461 23304,2501 23271,2534 23231,2557 23191,2580 23145,2592 23099,2592 L 22717,2592 C 22572,2592 22454,2474 22454,2329 L 22454,1947 C 22454,1901 22466,1855 22489,1815 22512,1775 22545,1742 22585,1719 22625,1696 22671,1684 22717,1684 L 23099,1684 Z M 22626,1796 C 22601,1811 22581,1831 22566,1856 22552,1881 22544,1909 22544,1938 L 22544,2338 C 22544,2428 22618,2502 22708,2502 L 23108,2502 C 23137,2502 23165,2494 23190,2480 23215,2465 23235,2445 23250,2420 23264,2395 23272,2367 23272,2338 L 23272,1938 C 23272,1848 23198,1774 23108,1774 L 22708,1774 C 22679,1774 22651,1782 22626,1796 Z M 23175,1850 C 23184,1855 23191,1862 23196,1871 23201,1880 23203,1889 23203,1899 23203,1909 23201,1919 23196,1928 23191,1936 23184,1944 23175,1949 23166,1954 23157,1956 23147,1956 23137,1956 23127,1954 23118,1949 23110,1944 23102,1936 23097,1928 23092,1919 23090,1909 23090,1899 23090,1889 23092,1880 23097,1871 23102,1862 23110,1855 23118,1850 23127,1845 23137,1843 23147,1843 23157,1843 23166,1845 23175,1850 Z M 23022,1941 C 23056,1961 23085,1990 23105,2024 23125,2059 23135,2098 23135,2138 23135,2178 23125,2217 23105,2252 23085,2286 23056,2315 23022,2335 22987,2355 22948,2365 22908,2365 22868,2365 22829,2355 22794,2335 22760,2315 22731,2286 22711,2252 22691,2217 22681,2178 22681,2138 22681,2098 22691,2059 22711,2024 22731,1990 22760,1961 22794,1941 22829,1921 22868,1911 22908,1911 22948,1911 22987,1921 23022,1941 Z M 22908,2002 C 22884,2002 22861,2008 22840,2020 22819,2032 22802,2049 22790,2070 22778,2091 22772,2114 22772,2138 22772,2162 22778,2185 22790,2206 22802,2227 22819,2244 22840,2256 22861,2268 22884,2274 22908,2274 22932,2274 22955,2268 22976,2256 22997,2244 23014,2227 23026,2206 23038,2185 23044,2162 23044,2138 23044,2114 23038,2091 23026,2070 23014,2049 22997,2032 22976,2020 22955,2008 22932,2002 22908,2002 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1332"
   class="Graphic">
       <g
   id="id108">
        <rect
   id="rect1327"
   height="661"
   width="661"
   y="4453"
   x="23680"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1329"
   d="M 23918,4823 L 23984,4902 24076,4783 24195,4941 23825,4941 Z M 24248,4968 L 24248,4598 C 24248,4569 24224,4545 24195,4545 L 23825,4545 23825,4545 C 23816,4545 23807,4548 23799,4552 23791,4557 23784,4564 23779,4572 23775,4580 23772,4589 23772,4598 L 23772,4968 23772,4968 C 23772,4977 23775,4986 23779,4994 23784,5002 23791,5009 23799,5014 23807,5018 23816,5021 23825,5021 L 24195,5021 24195,5021 C 24204,5021 24213,5018 24221,5014 24229,5009 24236,5002 24241,4994 24245,4986 24248,4977 24248,4968 L 24248,4968 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1339"
   class="Graphic">
       <g
   id="id109">
        <rect
   id="rect1334"
   height="661"
   width="661"
   y="6606"
   x="21253"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1336"
   d="M 21451,6725 L 21504,6672 21662,6672 21715,6725 21794,6725 C 21803,6725 21813,6727 21821,6732 21829,6737 21835,6743 21840,6751 21845,6759 21847,6768 21847,6778 L 21847,7094 C 21847,7104 21845,7113 21840,7121 21835,7129 21829,7135 21821,7140 21813,7145 21803,7147 21794,7147 L 21372,7147 C 21363,7147 21353,7145 21345,7140 21337,7135 21331,7129 21326,7121 21321,7113 21319,7104 21319,7094 L 21319,6778 C 21319,6768 21321,6759 21326,6751 21331,6743 21337,6737 21345,6732 21353,6727 21363,6725 21372,6725 L 21451,6725 Z M 21517,6822 C 21497,6833 21480,6850 21469,6870 21457,6890 21451,6913 21451,6936 21451,6959 21457,6982 21469,7002 21480,7022 21497,7039 21517,7050 21537,7062 21560,7068 21583,7068 21606,7068 21629,7062 21649,7050 21669,7039 21686,7022 21697,7002 21709,6982 21715,6959 21715,6936 21715,6913 21709,6890 21697,6870 21686,6850 21669,6833 21649,6822 21629,6810 21606,6804 21583,6804 21560,6804 21537,6810 21517,6822 Z M 21583,6857 C 21597,6857 21611,6860 21623,6867 21635,6874 21645,6884 21652,6896 21659,6908 21662,6922 21662,6936 21662,6950 21659,6964 21652,6976 21645,6988 21635,6998 21623,7005 21611,7012 21597,7015 21583,7015 21569,7015 21555,7012 21543,7005 21531,6998 21521,6988 21514,6976 21507,6964 21504,6950 21504,6936 21504,6922 21507,6908 21514,6896 21521,6884 21531,6874 21543,6867 21555,6860 21569,6857 21583,6857 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1346"
   class="Graphic">
       <g
   id="id110">
        <rect
   id="rect1341"
   height="661"
   width="661"
   y="3842"
   x="21892"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1343"
   d="M 22288,3912 C 22284,3914 22281,3917 22278,3921 22276,3925 22275,3930 22275,3934 L 22275,4014 22169,4014 C 22140,4014 22116,4037 22116,4066 L 22116,4383 C 22116,4413 22140,4436 22169,4436 L 22301,4436 C 22331,4436 22354,4413 22354,4383 L 22354,4066 C 22354,4047 22343,4030 22328,4021 L 22328,3934 C 22328,3930 22326,3925 22324,3921 22322,3917 22318,3914 22314,3912 22310,3909 22306,3908 22301,3908 22297,3908 22292,3909 22288,3912 Z M 22301,4066 L 22301,4198 22169,4198 22169,4066 22301,4066 Z M 22196,4251 L 22196,4278 22169,4278 22169,4251 22196,4251 Z M 22248,4251 L 22248,4278 22222,4278 22222,4251 22248,4251 Z M 22301,4251 L 22301,4278 22275,4278 22275,4251 22301,4251 Z M 22196,4304 L 22196,4330 22169,4330 22169,4304 22196,4304 Z M 22248,4304 L 22248,4330 22222,4330 22222,4304 22248,4304 Z M 22301,4304 L 22301,4330 22275,4330 22275,4304 22301,4304 Z M 22196,4357 L 22196,4383 22169,4383 22169,4357 22196,4357 Z M 22248,4357 L 22248,4383 22222,4383 22222,4357 22248,4357 Z M 22275,4357 L 22301,4357 22301,4383 22275,4383 22275,4357 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1409"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id111">
        <rect
   id="rect1348"
   height="2741"
   width="4981"
   y="2315"
   x="11689"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1350"
   d="M 11716,4928 C 11820,4942 11924,4969 12028,4989"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1352"
   d="M 12185,5014 C 12210,5017 12236,5018 12263,5019 12342,5021 12422,5019 12502,5018"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1354"
   d="M 12661,5016 C 12696,5016 12730,5017 12765,5019 12836,5023 12908,5026 12979,5027"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1356"
   d="M 13138,5027 C 13231,5025 13325,5018 13419,5004 13431,5002 13443,5001 13455,4999"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1358"
   d="M 13613,4982 C 13719,4972 13822,4957 13921,4912"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1360"
   d="M 14064,4841 C 14160,4795 14258,4750 14344,4691"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1362"
   d="M 14463,4586 C 14470,4579 14476,4571 14483,4563 14541,4489 14592,4406 14630,4317"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1364"
   d="M 14678,4166 C 14689,4117 14695,4066 14696,4015 14697,3960 14698,3904 14699,3849"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1366"
   d="M 14703,3690 C 14705,3585 14708,3481 14711,3377 14711,3375 14711,3374 14711,3372"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1368"
   d="M 14709,3213 C 14702,3107 14684,3001 14637,2905"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1370"
   d="M 14549,2774 C 14542,2767 14536,2760 14529,2753 14457,2682 14379,2627 14297,2581"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1372"
   d="M 14154,2512 C 14068,2475 13979,2446 13890,2419 13878,2415 13865,2412 13853,2408"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1374"
   d="M 13698,2373 C 13594,2354 13488,2344 13382,2342"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1376"
   d="M 13223,2344 C 13117,2348 13012,2353 12907,2372"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1378"
   d="M 12753,2410 C 12731,2417 12710,2425 12689,2434 12609,2467 12538,2510 12473,2558"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1380"
   d="M 12351,2661 C 12274,2734 12204,2814 12135,2894"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1382"
   d="M 12056,3031 C 12025,3129 12034,3241 12055,3346"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1384"
   d="M 12095,3499 C 12131,3600 12190,3688 12259,3770"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1386"
   d="M 12367,3886 C 12433,3952 12502,4014 12567,4076 12577,4086 12587,4096 12597,4105"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1388"
   d="M 12714,4214 C 12793,4284 12874,4352 12961,4414"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1390"
   d="M 13093,4502 C 13139,4529 13187,4555 13236,4578 13283,4600 13331,4621 13379,4640"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1392"
   d="M 13530,4692 C 13631,4724 13734,4749 13838,4770"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1394"
   d="M 13994,4797 C 14015,4800 14036,4803 14057,4806 14140,4817 14225,4827 14310,4832"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1396"
   d="M 14469,4836 C 14530,4834 14590,4830 14650,4821 14696,4814 14739,4801 14781,4783"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1398"
   d="M 14921,4708 C 15010,4653 15097,4590 15194,4546"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1400"
   d="M 15346,4498 C 15451,4475 15556,4467 15661,4464"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1402"
   d="M 15820,4462 C 15896,4462 15973,4461 16049,4456 16077,4454 16108,4453 16138,4453"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1404"
   d="M 16296,4469 C 16401,4492 16495,4544 16545,4648"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1406"
   d="M 16626,4784 L 16642,4806"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1444"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id112">
        <rect
   id="rect1411"
   height="1467"
   width="3567"
   y="5783"
   x="17452"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1413"
   d="M 17479,5810 C 17541,5898 17617,5971 17699,6037"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1415"
   d="M 17827,6132 C 17878,6167 17930,6202 17981,6236 18017,6261 18056,6282 18096,6301"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1417"
   d="M 18245,6356 C 18346,6386 18451,6406 18555,6426"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1419"
   d="M 18713,6428 C 18820,6398 18909,6308 18923,6210"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1421"
   d="M 18877,6062 C 18806,5973 18705,5941 18597,5937"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1423"
   d="M 18438,5947 C 18352,5959 18266,5978 18193,5992 18171,5996 18148,6001 18126,6007"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1425"
   d="M 17976,6060 C 17878,6106 17791,6173 17741,6266"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1427"
   d="M 17699,6419 C 17696,6527 17754,6619 17827,6701"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1429"
   d="M 17938,6815 C 17964,6840 17989,6865 18011,6889 18059,6942 18115,6988 18175,7027"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1431"
   d="M 18314,7102 C 18410,7146 18513,7177 18616,7201"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1433"
   d="M 18773,7222 C 18881,7222 18983,7195 19086,7168"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1435"
   d="M 19240,7129 C 19261,7125 19282,7121 19303,7118 19386,7106 19467,7081 19549,7055"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1437"
   d="M 19700,7007 C 19802,6976 19906,6954 20013,6961"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1439"
   d="M 20172,6968 C 20278,6961 20385,6937 20489,6943"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1441"
   d="M 20641,6983 C 20656,6991 20672,7000 20687,7011 L 20885,7057 20946,7066"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1463"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id113">
        <rect
   id="rect1446"
   height="2158"
   width="1377"
   y="4810"
   x="22089"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1448"
   d="M 22116,6935 C 22234,6956 22326,6900 22390,6812"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1450"
   d="M 22462,6670 C 22481,6612 22493,6551 22496,6494 22498,6447 22497,6401 22495,6356"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1452"
   d="M 22479,6198 C 22464,6093 22442,5989 22419,5886"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1454"
   d="M 22387,5730 C 22382,5706 22378,5682 22374,5658 22360,5576 22360,5493 22378,5415"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1456"
   d="M 22435,5267 C 22485,5181 22562,5108 22669,5059"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1458"
   d="M 22816,4997 C 22914,4955 23012,4915 23114,4888"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1460"
   d="M 23270,4855 L 23362,4837 23438,4837"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1486"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id114">
        <rect
   id="rect1465"
   height="2351"
   width="2540"
   y="2179"
   x="21651"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1467"
   d="M 22369,2206 C 22275,2238 22167,2262 22064,2294"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1469"
   d="M 21916,2352 C 21824,2397 21746,2460 21700,2556 21698,2561 21696,2566 21694,2571"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1471"
   d="M 21694,2726 C 21729,2813 21818,2888 21909,2955"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1473"
   d="M 22038,3049 C 22042,3052 22046,3055 22050,3058 22137,3125 22228,3163 22320,3191"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1475"
   d="M 22474,3229 C 22561,3249 22649,3268 22734,3301 22749,3307 22764,3312 22779,3317"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1477"
   d="M 22933,3358 C 23035,3382 23139,3401 23240,3438"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1479"
   d="M 23385,3504 C 23480,3553 23570,3608 23659,3665"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1481"
   d="M 23792,3753 C 23839,3785 23887,3817 23935,3848 23979,3876 24015,3908 24045,3944"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1483"
   d="M 24125,4080 C 24163,4179 24169,4289 24154,4394"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1525"
   class="com.sun.star.drawing.OpenFreeHandShape">
       <g
   id="id115">
        <rect
   id="rect1488"
   height="2085"
   width="3704"
   y="3836"
   x="23954"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1490"
   d="M 23981,5278 C 24061,5346 24132,5426 24205,5503"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1492"
   d="M 24319,5614 C 24365,5653 24413,5689 24467,5719 24506,5741 24546,5762 24588,5782"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1494"
   d="M 24735,5842 C 24816,5870 24899,5886 24984,5886 25005,5886 25026,5886 25048,5887"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1496"
   d="M 25207,5893 C 25311,5893 25414,5881 25511,5820"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1498"
   d="M 25630,5714 C 25699,5631 25738,5533 25779,5435"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1500"
   d="M 25844,5290 C 25887,5193 25896,5084 25885,4978"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1502"
   d="M 25855,4822 C 25849,4801 25843,4781 25836,4761 25811,4692 25768,4611 25713,4540"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1504"
   d="M 25601,4426 C 25514,4358 25412,4322 25305,4358"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1506"
   d="M 25178,4451 C 25123,4536 25143,4651 25189,4757"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1508"
   d="M 25267,4895 C 25279,4912 25292,4928 25304,4943 25358,5008 25412,5075 25470,5140"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1510"
   d="M 25579,5256 C 25654,5331 25736,5399 25828,5453"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1512"
   d="M 25972,5518 C 26077,5543 26188,5525 26280,5472"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1514"
   d="M 26398,5368 C 26416,5345 26431,5320 26444,5293 26476,5223 26505,5152 26531,5080"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1516"
   d="M 26581,4929 C 26611,4827 26635,4723 26652,4619"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1518"
   d="M 26683,4463 C 26711,4358 26755,4259 26825,4182"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1520"
   d="M 26950,4085 C 27038,4029 27131,3971 27230,3934"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
        <path
   id="path1522"
   d="M 27384,3897 C 27405,3895 27426,3894 27448,3894 L 27600,3863 27630,3863"
   stroke-linejoin="round"
   stroke-width="53"
   stroke="rgb(0,0,0)"
   fill="none" />
       </g>
      </g>
      <g
   id="g1532"
   class="Graphic">
       <g
   id="id116">
        <rect
   id="rect1527"
   height="661"
   width="661"
   y="13356"
   x="-208"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1529"
   d="M 333,13475 L 333,13396 228,13396 228,13475 C 228,13475 280,13580 280,13686 280,13792 228,13871 122,13871 16,13871 -36,13792 -36,13686 -36,13580 16,13475 16,13475 L 16,13396 -89,13396 -89,13475 -63,13475 C -63,13475 -142,13580 -142,13739 -142,13871 -10,13976 122,13976 254,13976 386,13871 386,13739 386,13580 307,13475 307,13475 L 333,13475 Z M -116,13686 C -116,13670 -105,13660 -89,13660 -73,13660 -63,13670 -63,13686 -63,13702 -73,13712 -89,13712 -105,13712 -116,13702 -116,13686 Z M -63,13844 C -63,13829 -52,13818 -36,13818 -21,13818 -10,13829 -10,13844 -10,13860 -21,13871 -36,13871 -52,13871 -63,13860 -63,13844 Z M 96,13924 C 96,13908 106,13897 122,13897 138,13897 148,13908 148,13924 148,13939 138,13950 122,13950 106,13950 96,13939 96,13924 Z M 254,13844 C 254,13829 265,13818 280,13818 296,13818 307,13829 307,13844 307,13860 296,13871 280,13871 265,13871 254,13860 254,13844 Z M 333,13712 C 317,13712 307,13702 307,13686 307,13670 317,13660 333,13660 349,13660 360,13670 360,13686 360,13702 349,13712 333,13712 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1539"
   class="Graphic">
       <g
   id="id117">
        <rect
   id="rect1534"
   height="909"
   width="909"
   y="7107"
   x="7413"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1536"
   d="M 7867,7901 L 7814,7853 C 7627,7683 7504,7571 7504,7434 7504,7322 7592,7234 7704,7234 7767,7234 7827,7264 7867,7310 7907,7264 7967,7234 8030,7234 8142,7234 8230,7322 8230,7434 8230,7571 8107,7683 7920,7853 L 7867,7901 7867,7901 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1546"
   class="Graphic">
       <g
   id="id118">
        <rect
   id="rect1541"
   height="661"
   width="661"
   y="14816"
   x="231"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1543"
   d="M 656,14978 C 656,14925 613,14882 560,14882 507,14882 464,14925 464,14978 464,15031 507,15074 560,15074 613,15074 656,15031 656,14978 Z M 491,15172 C 491,15172 463,15250 454,15265 451,15270 452,15272 445,15272 438,15272 427,15265 427,15265 427,15265 421,15261 423,15255 430,15236 459,15122 465,15100 471,15076 489,15077 489,15077 L 506,15077 562,15173 617,15077 638,15077 C 638,15077 646,15078 652,15085 659,15092 660,15105 660,15105 L 697,15247 C 697,15247 699,15257 699,15260 697,15265 695,15265 695,15265 695,15265 685,15268 679,15270 668,15273 667,15263 667,15263 L 632,15173 628,15410 577,15410 568,15275 C 568,15275 567,15272 562,15272 557,15272 556,15275 556,15275 L 546,15410 495,15410 492,15172 491,15172 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1553"
   class="Graphic">
       <g
   id="id119">
        <rect
   id="rect1548"
   height="661"
   width="661"
   y="12884"
   x="2938"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1550"
   d="M 3162,13135 L 3162,13188 3215,13188 3215,13240 3162,13240 3162,13293 3110,13293 3110,13240 3057,13240 3057,13188 3110,13188 3110,13135 3162,13135 Z M 3459,13140 C 3465,13144 3470,13149 3474,13155 3477,13161 3479,13167 3479,13174 3479,13181 3477,13188 3474,13194 3470,13200 3465,13205 3459,13209 3453,13212 3447,13214 3440,13214 3433,13214 3426,13212 3420,13209 3414,13205 3409,13200 3405,13194 3402,13188 3400,13181 3400,13174 3400,13167 3402,13161 3405,13155 3409,13149 3414,13144 3420,13140 3426,13137 3433,13135 3440,13135 3447,13135 3453,13137 3459,13140 Z M 3380,13219 C 3386,13223 3391,13228 3395,13234 3398,13240 3400,13247 3400,13254 3400,13261 3398,13267 3395,13273 3391,13279 3386,13284 3380,13288 3374,13291 3367,13293 3360,13293 3353,13293 3347,13291 3341,13288 3335,13284 3330,13279 3326,13273 3323,13267 3321,13261 3321,13254 3321,13247 3323,13240 3326,13234 3330,13228 3335,13223 3341,13219 3347,13216 3353,13214 3360,13214 3367,13214 3374,13216 3380,13219 Z M 3492,13054 C 3520,13070 3544,13094 3560,13122 3576,13150 3585,13182 3585,13214 3585,13246 3576,13278 3560,13306 3544,13334 3520,13358 3492,13374 3464,13390 3432,13399 3400,13399 3348,13399 3302,13378 3268,13343 3234,13378 3188,13399 3136,13399 3104,13399 3072,13390 3044,13374 3016,13358 2992,13334 2976,13306 2960,13278 2951,13246 2951,13214 2951,13182 2960,13150 2976,13122 2992,13094 3016,13070 3044,13054 3072,13038 3104,13029 3136,13029 L 3400,13029 C 3432,13029 3464,13038 3492,13054 Z M 3136,13082 C 3113,13082 3090,13088 3070,13100 3050,13111 3033,13128 3022,13148 3010,13168 3004,13191 3004,13214 3004,13237 3010,13260 3022,13280 3033,13300 3050,13317 3070,13328 3090,13340 3113,13346 3136,13346 3179,13346 3218,13325 3242,13293 L 3294,13293 C 3318,13325 3357,13346 3400,13346 3423,13346 3446,13340 3466,13328 3486,13317 3503,13300 3514,13280 3526,13260 3532,13237 3532,13214 3532,13191 3526,13168 3514,13148 3503,13128 3486,13111 3466,13100 3446,13088 3423,13082 3400,13082 L 3136,13082 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1560"
   class="Graphic">
       <g
   id="id120">
        <rect
   id="rect1555"
   height="661"
   width="661"
   y="10817"
   x="4519"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1557"
   d="M 5007,10989 L 4928,10989 4928,10936 4849,10936 4849,10883 4743,10883 4743,10962 4691,10962 4691,11121 4664,11121 4717,11411 4981,11411 5034,11121 5007,11121 5007,10989 Z M 4928,11163 L 4928,11058 4981,11084 4981,11121 4951,11121 C 4947,11137 4939,11151 4928,11163 Z M 4981,11055 L 4928,11028 4928,11015 4981,11015 4981,11055 Z M 4902,10962 L 4902,11055 4849,11081 4849,10962 4902,10962 Z M 4902,11084 L 4902,11185 C 4886,11195 4868,11200 4849,11200 L 4849,11111 4902,11084 Z M 4770,11163 L 4770,11084 4823,11058 4823,11196 C 4802,11191 4783,11179 4770,11163 Z M 4823,10909 L 4823,11028 4796,11041 4796,10962 4770,10962 4770,10909 4823,10909 Z M 4717,10989 L 4770,10989 4770,11055 4743,11068 4743,11121 4717,11121 4717,10989 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1567"
   class="Graphic">
       <g
   id="id121">
        <rect
   id="rect1562"
   height="1076"
   width="1076"
   y="4552"
   x="-315"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1564"
   d="M 524,5305 L 653,5219 653,5391 524,5305 Z M 524,4961 L 653,5133 481,5262 352,5219 524,4961 Z M -208,5391 L -208,5219 -78,5305 -208,5391 Z M -35,5262 L -208,5133 -78,4961 94,5219 -35,5262 Z M 309,4832 L 481,4918 266,5219 180,5219 -35,4918 137,4832 309,4832 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1574"
   class="Graphic">
       <g
   id="id122">
        <rect
   id="rect1569"
   height="661"
   width="661"
   y="12307"
   x="352"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1571"
   d="M 893,12584 C 946,12663 814,12901 761,12901 708,12901 708,12875 682,12875 656,12875 656,12901 603,12901 550,12901 418,12663 471,12584 524,12505 603,12505 656,12531 L 656,12452 C 507,12533 474,12420 474,12420 474,12420 544,12325 656,12452 L 656,12399 708,12399 708,12531 C 761,12505 840,12505 893,12584 L 893,12584 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1581"
   class="Graphic">
       <g
   id="id123">
        <rect
   id="rect1576"
   height="661"
   width="661"
   y="2028"
   x="322"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1578"
   d="M 914,2384 C 913,2403 909,2420 904,2437 L 705,2437 705,2490 784,2490 784,2543 731,2543 731,2596 665,2596 665,2622 652,2622 C 515,2622 403,2518 389,2384 L 914,2384 Z M 389,2332 C 403,2198 515,2094 652,2094 695,2094 735,2104 771,2123 L 771,2173 824,2173 824,2226 863,2226 863,2279 904,2279 C 909,2296 913,2313 914,2332 L 389,2332 Z M 652,2219 C 652,2208 649,2196 643,2186 637,2176 629,2168 619,2162 609,2156 598,2153 586,2153 574,2153 563,2156 553,2162 543,2168 535,2176 529,2186 523,2196 520,2208 520,2219 520,2231 523,2242 529,2252 535,2262 543,2271 553,2277 563,2282 574,2285 586,2285 598,2285 609,2282 619,2277 629,2271 637,2262 643,2252 649,2242 652,2231 652,2219 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1588"
   class="Graphic">
       <g
   id="id124">
        <rect
   id="rect1583"
   height="661"
   width="661"
   y="2001"
   x="28686"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1585"
   d="M 28752,2331 C 28752,2476 28871,2595 29016,2595 29161,2595 29280,2476 29280,2331 29280,2186 29161,2067 29016,2067 28870,2067 28752,2186 28752,2331 Z M 28805,2331 C 28805,2214 28899,2120 29016,2120 29133,2120 29227,2214 29227,2331 29227,2448 29133,2542 29016,2542 28899,2542 28805,2448 28805,2331 Z M 28884,2225 L 28963,2278 29016,2199 29069,2278 29148,2225 29122,2384 28910,2384 28884,2225 Z M 28925,2437 C 28916,2437 28910,2431 28910,2422 L 28910,2410 29122,2410 29122,2422 C 29122,2431 29116,2437 29107,2437 L 28925,2437 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1595"
   class="Graphic">
       <g
   id="id125">
        <rect
   id="rect1590"
   height="1489"
   width="1489"
   y="4353"
   x="29655"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1592"
   d="M 30220,5157 L 29982,5335 C 29923,5387 29915,5461 29923,5514 29931,5573 29977,5646 30042,5673 30135,5713 30226,5686 30282,5628 L 30816,5157 C 30926,5074 30875,4918 30756,4918 L 30399,4918 30843,4657 C 30869,4638 30880,4610 30879,4583 30875,4542 30843,4502 30792,4502 L 30788,4502 C 30767,4502 30748,4508 30730,4519 L 29982,4918 C 29934,4946 29919,4992 29923,5037 29926,5099 29967,5157 30042,5157 Z M 29982,5484 C 29982,5402 30049,5335 30131,5335 30213,5335 30280,5402 30280,5484 30280,5566 30213,5633 30131,5633 30049,5633 29982,5566 29982,5484 L 29982,5484 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1602"
   class="Graphic">
       <g
   id="id126">
        <rect
   id="rect1597"
   height="1002"
   width="1002"
   y="6235"
   x="28168"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1599"
   d="M 29066,6776 C 29064,6803 29058,6830 29050,6856 L 28749,6856 28749,6936 28869,6936 28869,7016 28789,7016 28789,7096 28689,7096 28689,7136 28669,7136 C 28461,7136 28290,6978 28270,6776 L 29066,6776 Z M 28270,6695 C 28290,6493 28461,6335 28669,6335 28733,6335 28795,6351 28849,6378 L 28849,6455 28929,6455 28929,6535 28989,6535 28989,6615 29050,6615 C 29058,6641 29064,6668 29066,6695 L 28270,6695 Z M 28669,6525 C 28669,6508 28664,6490 28655,6475 28646,6460 28634,6447 28618,6439 28603,6430 28586,6425 28568,6425 28551,6425 28534,6430 28518,6439 28503,6447 28490,6460 28482,6475 28473,6490 28468,6508 28468,6525 28468,6543 28473,6560 28482,6575 28490,6591 28503,6603 28518,6612 28534,6621 28551,6625 28568,6625 28586,6625 28603,6621 28618,6612 28634,6603 28646,6591 28655,6575 28664,6560 28669,6543 28669,6525 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1609"
   class="Graphic">
       <g
   id="id127">
        <rect
   id="rect1604"
   height="661"
   width="661"
   y="7848"
   x="30449"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1606"
   d="M 30810,8198 L 30832,8231 30792,8231 C 30788,8302 30779,8374 30766,8444 L 30739,8440 C 30753,8371 30762,8301 30766,8231 L 30726,8231 30748,8198 C 30690,8172 30647,8082 30647,8020 30647,7996 30653,7974 30665,7954 30676,7934 30693,7917 30713,7905 30733,7894 30756,7888 30779,7888 30802,7888 30825,7894 30845,7905 30865,7917 30882,7934 30893,7954 30905,7974 30911,7996 30911,8020 30911,8082 30868,8172 30810,8198 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1616"
   class="Graphic">
       <g
   id="id128">
        <rect
   id="rect1611"
   height="661"
   width="661"
   y="8905"
   x="28724"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1613"
   d="M 29072,9170 C 29061,9178 29052,9178 29042,9170 29036,9166 29001,9146 28990,9138 28977,9130 28978,9120 28992,9114 29036,9096 29079,9097 29122,9115 29135,9120 29135,9131 29123,9139 29112,9146 29077,9166 29072,9170 Z M 29212,9181 C 29198,9167 29190,9151 29184,9132 29182,9123 29180,9114 29178,9105 29173,9082 29170,9058 29160,9036 29140,8994 29107,8973 29058,8971 29010,8972 28975,8992 28954,9034 28948,9046 28944,9058 28942,9070 28937,9090 28933,9111 28929,9131 28925,9148 28917,9163 28903,9176 28861,9218 28827,9265 28801,9317 28797,9325 28793,9333 28791,9341 28786,9358 28799,9370 28817,9366 28829,9364 28840,9361 28852,9358 28862,9354 28867,9356 28869,9367 28886,9424 28924,9464 28981,9486 29090,9527 29217,9468 29244,9365 29246,9358 29249,9355 29257,9358 29269,9361 29281,9364 29294,9367 29307,9369 29316,9363 29318,9350 29319,9343 29316,9337 29314,9331 29289,9276 29256,9225 29212,9181 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1623"
   class="Graphic">
       <g
   id="id129">
        <rect
   id="rect1618"
   height="661"
   width="661"
   y="10702"
   x="27727"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1620"
   d="M 28145,11063 C 28180,11063 28230,11055 28230,11014 28230,11011 28230,11008 28229,11005 L 28209,10915 C 28204,10895 28200,10886 28165,10869 28138,10855 28079,10832 28062,10832 28046,10832 28041,10853 28022,10853 28003,10853 27990,10837 27972,10837 27956,10837 27945,10849 27936,10872 27936,10872 27913,10938 27910,10948 27910,10949 27909,10951 27909,10953 27909,10978 28010,11062 28145,11062 L 28145,11063 Z M 28240,11058 C 28240,11098 28197,11119 28139,11119 28009,11119 27896,11043 27896,10993 27896,10986 27897,10979 27900,10973 27853,10975 27793,10983 27793,11037 27793,11124 28000,11232 28164,11232 28290,11232 28321,11175 28321,11130 28321,11095 28291,11055 28236,11031 28240,11054 28240,11056 28240,11058 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1630"
   class="Graphic">
       <g
   id="id130">
        <rect
   id="rect1625"
   height="1358"
   width="1358"
   y="11751"
   x="28853"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1627"
   d="M 29966,11995 L 29966,11832 29749,11832 29749,11995 C 29749,11995 29857,12212 29857,12430 29857,12647 29749,12809 29532,12809 29314,12809 29206,12647 29206,12430 29206,12212 29314,11995 29314,11995 L 29314,11832 29097,11832 29097,11995 29152,11995 C 29152,11995 28989,12212 28989,12538 28989,12809 29260,13027 29532,13027 29803,13027 30074,12809 30074,12538 30074,12212 29911,11995 29911,11995 L 29966,11995 Z M 29043,12430 C 29043,12397 29065,12375 29097,12375 29130,12375 29152,12397 29152,12430 29152,12462 29130,12484 29097,12484 29065,12484 29043,12462 29043,12430 Z M 29152,12755 C 29152,12723 29173,12701 29206,12701 29238,12701 29260,12723 29260,12755 29260,12788 29238,12809 29206,12809 29173,12809 29152,12788 29152,12755 Z M 29477,12918 C 29477,12885 29499,12864 29532,12864 29564,12864 29586,12885 29586,12918 29586,12951 29564,12972 29532,12972 29499,12972 29477,12951 29477,12918 Z M 29803,12755 C 29803,12723 29825,12701 29857,12701 29890,12701 29911,12723 29911,12755 29911,12788 29890,12809 29857,12809 29825,12809 29803,12788 29803,12755 Z M 29966,12484 C 29933,12484 29911,12462 29911,12430 29911,12397 29933,12375 29966,12375 29998,12375 30020,12397 30020,12430 30020,12462 29998,12484 29966,12484 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1637"
   class="Graphic">
       <g
   id="id131">
        <rect
   id="rect1632"
   height="1090"
   width="1090"
   y="5222"
   x="34478"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1634"
   d="M 35415,5517 C 35428,5524 35439,5535 35446,5549 35454,5562 35458,5577 35458,5592 L 35458,6115 C 35458,6130 35454,6145 35446,6159 35439,6172 35428,6183 35415,6190 35401,6198 35386,6202 35371,6202 L 34674,6202 C 34659,6202 34644,6198 34630,6190 34617,6183 34606,6172 34599,6159 34591,6145 34587,6130 34587,6115 L 34587,5592 C 34587,5555 34610,5523 34643,5511 L 35184,5287 35217,5367 34884,5505 35371,5505 C 35386,5505 35401,5509 35415,5517 Z M 34674,5592 L 34674,5767 35197,5767 35197,5679 35284,5679 35284,5767 35371,5767 35371,5592 34674,5592 Z M 34739,5871 C 34719,5883 34703,5899 34692,5919 34680,5939 34674,5961 34674,5984 34674,6007 34680,6030 34692,6050 34703,6070 34719,6086 34739,6097 34759,6109 34782,6115 34805,6115 34828,6115 34850,6109 34870,6097 34890,6086 34906,6070 34918,6050 34929,6030 34935,6007 34935,5984 34935,5961 34929,5939 34918,5919 34906,5899 34890,5883 34870,5871 34850,5860 34828,5854 34805,5854 34782,5854 34759,5860 34739,5871 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1644"
   class="Graphic">
       <g
   id="id132">
        <rect
   id="rect1639"
   height="661"
   width="661"
   y="10275"
   x="30683"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1641"
   d="M 30990,10444 C 31000,10491 30983,10532 30951,10537 30921,10542 30887,10508 30878,10461 30868,10414 30885,10372 30917,10367 30948,10363 30981,10397 30990,10444 Z M 31145,10461 C 31135,10508 31102,10542 31071,10537 31039,10532 31022,10491 31032,10444 31042,10397 31075,10363 31105,10367 31137,10372 31154,10414 31145,10461 Z M 30868,10540 C 30888,10582 30881,10626 30851,10639 30821,10652 30781,10628 30760,10587 30739,10546 30746,10502 30775,10489 30805,10476 30846,10499 30868,10540 Z M 31266,10587 C 31245,10628 31205,10652 31175,10639 31145,10626 31138,10582 31158,10540 31180,10499 31221,10476 31251,10489 31280,10502 31287,10546 31266,10587 Z M 31207,10773 C 31208,10798 31189,10826 31166,10836 31119,10858 31063,10813 31010,10813 30958,10813 30901,10859 30855,10836 30828,10823 30810,10789 30813,10760 30818,10721 30865,10700 30893,10671 30931,10634 30957,10564 31010,10564 31063,10564 31091,10633 31127,10671 31156,10703 31205,10730 31207,10773 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1651"
   class="Graphic">
       <g
   id="id133">
        <rect
   id="rect1646"
   height="661"
   width="661"
   y="342"
   x="29729"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1648"
   d="M 29927,901 C 29887,877 29854,844 29830,804 29807,764 29795,718 29795,672 29795,626 29807,580 29830,540 29854,500 29887,467 29927,443 29967,420 30013,408 30059,408 30204,408 30323,514 30323,646 30323,673 30316,701 30302,725 30288,749 30268,769 30244,783 30220,797 30192,804 30165,804 L 30117,804 C 30109,804 30104,809 30104,817 30104,820 30107,822 30107,825 30117,838 30122,854 30122,870 30125,907 30096,936 30059,936 30013,936 29967,924 29927,901 Z M 29953,489 C 29921,508 29895,534 29876,566 29858,599 29848,635 29848,672 29848,709 29858,745 29876,778 29895,810 29921,836 29953,855 29986,873 30022,883 30059,883 30067,883 30072,878 30072,870 30072,865 30070,862 30070,859 30059,846 30054,833 30054,817 30054,780 30083,751 30120,751 L 30165,751 C 30183,751 30201,746 30217,737 30233,728 30247,714 30256,698 30265,682 30270,664 30270,646 30270,543 30175,461 30059,461 30022,461 29986,471 29953,489 Z M 29953,659 C 29953,680 29935,698 29914,698 29893,698 29874,680 29874,659 29874,638 29893,619 29914,619 29935,619 29953,638 29953,659 Z M 30033,553 C 30033,574 30014,593 29993,593 29972,593 29953,574 29953,553 29953,532 29972,514 29993,514 30014,514 30033,532 30033,553 Z M 30165,553 C 30165,574 30146,593 30125,593 30104,593 30085,574 30085,553 30085,532 30104,514 30125,514 30146,514 30165,532 30165,553 Z M 30204,619 C 30225,619 30244,638 30244,659 30244,680 30225,698 30204,698 30183,698 30165,680 30165,659 30165,638 30183,619 30204,619 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1658"
   class="Graphic">
       <g
   id="id134">
        <rect
   id="rect1653"
   height="1089"
   width="1089"
   y="760"
   x="33850"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1655"
   d="M 34342,1186 L 34294,1039 C 34276,991 34207,991 34189,1039 L 34146,1173 C 34041,1191 33959,1282 33959,1391 33959,1513 34055,1609 34176,1609 34176,1609 34481,1609 34742,1478 34742,1478 34829,1435 34829,1391 34829,1348 34742,1304 34742,1304 34603,1234 34455,1204 34342,1186 Z M 34046,1348 C 34046,1321 34063,1304 34089,1304 34115,1304 34133,1321 34133,1348 34133,1369 34115,1391 34089,1391 34063,1391 34046,1374 34046,1348 Z M 34133,1478 C 34133,1452 34150,1435 34176,1435 34203,1435 34220,1452 34220,1478 34220,1500 34203,1522 34176,1522 34150,1522 34133,1504 34133,1478 Z M 34220,1348 C 34220,1321 34237,1304 34263,1304 34290,1304 34307,1321 34307,1348 34307,1369 34290,1391 34263,1391 34237,1391 34220,1374 34220,1348 Z M 34307,1478 C 34307,1452 34324,1435 34350,1435 34377,1435 34394,1452 34394,1478 34394,1500 34377,1522 34350,1522 34324,1522 34307,1504 34307,1478 Z M 34525,1348 C 34525,1321 34542,1304 34568,1304 34594,1304 34612,1321 34612,1348 34612,1369 34594,1391 34568,1391 34542,1391 34525,1374 34525,1348 Z M 34699,1435 C 34673,1435 34655,1417 34655,1391 34655,1365 34673,1348 34699,1348 34725,1348 34742,1365 34742,1391 34742,1413 34725,1435 34699,1435 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1665"
   class="Graphic">
       <g
   id="id135">
        <rect
   id="rect1660"
   height="1692"
   width="1692"
   y="-365"
   x="31556"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1662"
   d="M 32943,751 C 32943,788 32912,819 32875,819 32838,819 32807,788 32807,751 32807,714 32838,683 32875,683 32912,683 32943,714 32943,751 Z M 32672,751 C 32672,863 32763,954 32875,954 32987,954 33078,863 33078,751 33078,639 32987,548 32875,548 32763,548 32672,639 32672,751 Z M 31928,75 L 31928,210 32266,210 32266,75 31928,75 Z M 32537,7 L 32537,142 32740,142 32740,322 32503,616 32266,616 32266,278 31996,278 C 31846,278 31725,399 31725,548 L 31725,751 31860,751 C 31860,863 31951,954 32063,954 32176,954 32266,863 32266,751 L 32571,751 32875,369 32875,142 C 32875,68 32815,7 32740,7 L 32537,7 Z M 32063,819 C 32026,819 31996,788 31996,751 L 32131,751 C 32131,788 32101,819 32063,819 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1672"
   class="Graphic">
       <g
   id="id136">
        <rect
   id="rect1667"
   height="661"
   width="661"
   y="2988"
   x="33480"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1669"
   d="M 33625,3239 C 33625,3302 33657,3357 33704,3390 L 33704,3450 C 33704,3465 33716,3476 33731,3476 L 33889,3476 C 33904,3476 33916,3465 33916,3450 L 33916,3390 C 33963,3357 33995,3302 33995,3239 33995,3137 33912,3054 33810,3054 33708,3054 33625,3137 33625,3239 Z M 33863,3424 L 33836,3424 33836,3302 33882,3258 C 33892,3247 33892,3230 33882,3220 33871,3210 33854,3210 33844,3220 L 33810,3254 33776,3220 C 33766,3210 33749,3210 33738,3220 33728,3230 33728,3247 33738,3258 L 33784,3302 33784,3424 33757,3424 33757,3360 C 33710,3339 33678,3293 33678,3239 33678,3166 33737,3107 33810,3107 33883,3107 33942,3166 33942,3239 33942,3293 33910,3339 33863,3360 L 33863,3424 Z M 33731,3529 L 33889,3529 33889,3556 C 33889,3570 33877,3582 33863,3582 L 33757,3582 C 33743,3582 33731,3570 33731,3556 L 33731,3529 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1679"
   class="Graphic">
       <g
   id="id137">
        <rect
   id="rect1674"
   height="1111"
   width="1111"
   y="9039"
   x="33610"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1676"
   d="M 34429,9522 L 34187,9855 33946,9522 34187,9288 34429,9522 Z M 34187,9194 C 34167,9194 34150,9201 34135,9215 L 33878,9464 C 33864,9478 33857,9494 33854,9514 33854,9534 33858,9551 33869,9567 L 34141,9942 C 34129,9965 34109,9977 34080,9977 34045,9977 34022,9960 34014,9927 34005,9898 33987,9872 33960,9852 33932,9831 33903,9820 33872,9820 33826,9820 33788,9838 33759,9874 L 33819,9923 C 33832,9906 33851,9898 33872,9898 33908,9898 33930,9914 33939,9947 33947,9977 33965,10002 33993,10023 34020,10045 34050,10056 34080,10056 34135,10056 34177,10030 34207,9980 L 34506,9567 C 34517,9551 34522,9534 34520,9514 34518,9495 34510,9478 34497,9464 L 34240,9215 C 34225,9201 34208,9194 34187,9194 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1686"
   class="Graphic">
       <g
   id="id138">
        <rect
   id="rect1681"
   height="661"
   width="661"
   y="6654"
   x="33242"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1683"
   d="M 33679,7101 L 33694,6940 33503,6940 33498,6886 33699,6886 33704,6834 33440,6834 33455,6992 33637,6992 33631,7061 33572,7076 33513,7061 33510,7017 33457,7017 33465,7101 33572,7131 33679,7101 Z M 33363,6746 L 33781,6746 33744,7174 33572,7222 33400,7174 33363,6746 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1693"
   class="Graphic">
       <g
   id="id139">
        <rect
   id="rect1688"
   height="661"
   width="661"
   y="8214"
   x="31962"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1690"
   d="M 32609,8544 C 32609,8622 32545,8686 32466,8686 32428,8686 32392,8671 32365,8644 L 32292,8579 32217,8646 C 32192,8671 32156,8686 32118,8686 32039,8686 31975,8622 31975,8544 31975,8466 32039,8402 32118,8402 32156,8402 32192,8417 32219,8444 L 32292,8509 32367,8442 C 32392,8417 32428,8402 32466,8402 32545,8402 32609,8465 32609,8544 Z M 32252,8544 L 32182,8482 C 32164,8464 32142,8455 32118,8455 32068,8455 32028,8495 32028,8544 32028,8593 32068,8633 32118,8633 32142,8633 32164,8624 32181,8607 L 32252,8544 Z M 32403,8481 L 32332,8544 32402,8606 C 32420,8624 32442,8633 32466,8633 32516,8633 32556,8593 32556,8544 32556,8495 32516,8455 32466,8455 32442,8455 32420,8464 32403,8481 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1700"
   class="Graphic">
       <g
   id="id140">
        <rect
   id="rect1695"
   height="661"
   width="661"
   y="4875"
   x="32526"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1697"
   d="M 32962,5381 C 32897,5426 32815,5426 32750,5381 32718,5404 32681,5416 32645,5416 L 32592,5416 32592,5469 32645,5469 C 32681,5469 32717,5460 32750,5443 32816,5477 32896,5477 32962,5443 32995,5460 33031,5469 33067,5469 L 33120,5469 33120,5416 33067,5416 C 33031,5416 32994,5404 32962,5381 Z M 33067,5390 C 33036,5390 33005,5379 32977,5359 L 32962,5349 32946,5359 C 32919,5378 32888,5388 32856,5388 32824,5388 32792,5378 32765,5359 L 32750,5349 32735,5359 C 32707,5379 32676,5390 32645,5390 L 32624,5390 C 32638,5351 32687,5284 32856,5284 32909,5284 32935,5291 32935,5291 32953,5254 32984,5173 32962,5068 L 32990,5087 C 32998,5125 33014,5198 32983,5301 33052,5324 33078,5363 33088,5390 L 33067,5390 Z M 33120,5089 C 33099,5060 33067,5039 33030,5034 33033,5038 33036,5042 33039,5047 33070,5097 33064,5161 33027,5204 33042,5165 33041,5120 33017,5083 33014,5080 33013,5078 33012,5076 33001,5061 32987,5048 32972,5039 32918,5056 32879,5107 32879,5165 32879,5179 32881,5193 32885,5205 32869,5183 32860,5157 32860,5128 32860,5084 32881,5045 32914,5021 32887,5019 32858,5025 32833,5041 32822,5048 32812,5057 32803,5067 32813,5042 32831,5020 32856,5004 32883,4987 32915,4981 32945,4986 32938,4975 32929,4965 32918,4957 32907,4949 32895,4942 32882,4938 32909,4939 32936,4947 32959,4964 32971,4973 32980,4984 32988,4995 32990,4995 32991,4995 32993,4995 33053,4995 33103,5034 33120,5089 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1707"
   class="Graphic">
       <g
   id="id141">
        <rect
   id="rect1702"
   height="661"
   width="661"
   y="2186"
   x="31247"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1704"
   d="M 31366,2437 C 31366,2468 31379,2498 31403,2524 31398,2530 31394,2537 31390,2543 31374,2571 31366,2602 31366,2633 31366,2634 31366,2634 31366,2635 L 31366,2727 C 31366,2756 31390,2780 31419,2780 L 31762,2780 C 31771,2780 31780,2778 31788,2773 31796,2768 31803,2762 31808,2754 31812,2746 31815,2736 31815,2727 L 31815,2635 C 31815,2603 31807,2571 31788,2542 L 31841,2490 31762,2410 31706,2466 C 31671,2446 31631,2436 31590,2436 31548,2436 31506,2448 31469,2469 31466,2470 31464,2472 31461,2474 31457,2470 31454,2467 31452,2462 31448,2455 31445,2446 31445,2437 31445,2389 31511,2350 31590,2350 31627,2350 31664,2360 31691,2376 L 31743,2323 C 31738,2320 31733,2317 31728,2314 31688,2291 31642,2278 31596,2278 31594,2278 31592,2278 31590,2278 31466,2278 31366,2350 31366,2437 Z M 31762,2635 L 31762,2727 31419,2727 31419,2635 C 31419,2569 31498,2490 31590,2490 31683,2490 31762,2569 31762,2635 Z M 31603,2529 C 31524,2529 31471,2569 31471,2648 L 31471,2674 31524,2674 31524,2648 C 31524,2622 31524,2556 31603,2529 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1714"
   class="Graphic">
       <g
   id="id142">
        <rect
   id="rect1709"
   height="661"
   width="661"
   y="6372"
   x="31311"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1711"
   d="M 31742,6644 C 31695,6588 31703,6504 31758,6458 L 31772,6448 C 31727,6496 31724,6571 31768,6623 31811,6674 31885,6684 31940,6648 L 31928,6660 C 31873,6707 31789,6699 31742,6644 Z M 31602,6744 C 31532,6660 31543,6535 31627,6464 L 31651,6448 C 31587,6520 31584,6630 31648,6706 31712,6781 31821,6798 31903,6747 L 31881,6768 C 31798,6838 31673,6828 31602,6744 Z M 31851,6897 C 31734,6995 31559,6980 31461,6863 31362,6745 31378,6570 31495,6472 L 31524,6451 C 31432,6552 31426,6708 31516,6816 31607,6924 31762,6945 31878,6872 L 31851,6897 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1721"
   class="Graphic">
       <g
   id="id143">
        <rect
   id="rect1716"
   height="661"
   width="661"
   y="4006"
   x="34410"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1718"
   d="M 34872,4125 C 34872,4125 34912,4169 34912,4191 34912,4213 34894,4230 34872,4230 34850,4230 34832,4213 34832,4191 34832,4169 34872,4125 34872,4125 Z M 35004,4349 C 35004,4305 34938,4230 34938,4230 34938,4230 34872,4305 34872,4349 34872,4386 34902,4415 34938,4415 34974,4415 35004,4386 35004,4349 Z M 34846,4547 C 34846,4576 34822,4600 34793,4600 L 34582,4600 C 34553,4600 34529,4576 34529,4547 L 34529,4336 C 34529,4258 34586,4193 34661,4180 L 34661,4125 34608,4125 34608,4072 34766,4072 C 34796,4072 34823,4082 34846,4098 L 34808,4136 C 34795,4129 34781,4125 34766,4125 L 34714,4125 34714,4180 C 34789,4193 34846,4258 34846,4336 L 34846,4547 Z M 34793,4336 C 34793,4278 34746,4230 34687,4230 34629,4230 34582,4278 34582,4336 L 34582,4547 34793,4547 34793,4336 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1728"
   class="Graphic">
       <g
   id="id144">
        <rect
   id="rect1723"
   height="1023"
   width="1023"
   y="7414"
   x="35326"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1725"
   d="M 36103,7876 C 35931,7941 35743,7941 35571,7876 35571,7712 35682,7598 35837,7598 35992,7598 36103,7712 36103,7876 Z M 35490,7880 C 35492,7913 35512,7941 35543,7954 L 35612,7974 35612,8068 C 35612,8072 35611,8075 35609,8078 35608,8081 35605,8084 35602,8086 35599,8088 35595,8089 35592,8089 35588,8089 35585,8088 35582,8086 35578,8084 35576,8081 35574,8078 35572,8075 35571,8072 35571,8068 35574,8044 35554,8024 35530,8027 35507,8024 35487,8044 35490,8068 35487,8124 35532,8170 35588,8170 L 35592,8170 C 35649,8173 35696,8126 35694,8068 L 35694,7994 35735,7994 35735,8228 C 35735,8255 35694,8255 35694,8228 35697,8204 35677,8184 35653,8187 35629,8184 35609,8204 35612,8228 35608,8285 35653,8334 35710,8334 L 35714,8334 C 35772,8336 35819,8289 35817,8232 L 35817,8007 35857,8007 35857,8232 C 35855,8289 35902,8336 35960,8334 L 35964,8334 C 36020,8334 36064,8287 36062,8232 36062,8177 35980,8177 35980,8232 35980,8259 35939,8259 35939,8232 L 35939,7999 35980,7999 35980,8072 C 35980,8128 36026,8173 36082,8170 L 36086,8170 C 36142,8170 36187,8124 36184,8068 36184,8014 36103,8014 36103,8068 36103,8095 36062,8095 36062,8068 L 36062,7974 36131,7954 C 36161,7940 36181,7912 36184,7880 36184,7659 36029,7516 35837,7516 35645,7516 35490,7659 35490,7880 Z M 35837,7688 C 35777,7704 35724,7742 35690,7794 35673,7816 35641,7791 35657,7770 35698,7710 35759,7666 35829,7647 35840,7645 35851,7652 35853,7663 35857,7676 35849,7684 35837,7688 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1737"
   class="Graphic">
       <g
   id="id145">
        <rect
   id="rect1730"
   height="1033"
   width="1033"
   y="10952"
   x="35642"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1732"
   d="M 36179,11061 C 36172,11064 36167,11070 36164,11076 36160,11082 36158,11089 36158,11096 L 36158,11427 C 36158,11434 36160,11441 36164,11447 36167,11454 36172,11459 36179,11462 36185,11466 36192,11468 36199,11468 L 36530,11468 C 36537,11468 36544,11466 36550,11462 36556,11459 36562,11454 36565,11447 36569,11441 36571,11434 36571,11427 36571,11362 36554,11297 36521,11241 36488,11184 36442,11138 36385,11105 36329,11072 36264,11055 36199,11055 36192,11055 36185,11057 36179,11061 Z M 36241,11385 L 36241,11141 C 36277,11146 36312,11158 36344,11176 36388,11202 36424,11238 36450,11282 36468,11314 36480,11349 36485,11385 L 36241,11385 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
        <path
   id="path1734"
   d="M 36522,11553 C 36518,11551 36513,11551 36508,11551 36501,11551 36494,11553 36488,11556 36481,11560 36476,11565 36472,11571 36471,11573 36470,11576 36469,11578 36463,11597 36454,11616 36444,11633 36415,11683 36373,11725 36323,11754 36273,11783 36216,11798 36158,11798 36100,11798 36043,11783 35993,11754 35943,11725 35901,11683 35872,11633 35843,11583 35828,11526 35828,11468 35828,11410 35843,11353 35872,11303 35901,11253 35943,11211 35993,11182 36010,11172 36029,11163 36048,11157 36050,11156 36053,11155 36055,11154 36061,11150 36066,11145 36070,11138 36074,11132 36075,11125 36075,11118 36075,11110 36074,11103 36070,11097 36066,11091 36061,11086 36055,11082 36049,11078 36041,11076 36034,11076 36030,11076 36025,11077 36021,11079 35997,11087 35974,11098 35952,11110 35889,11147 35837,11199 35801,11262 35764,11324 35745,11395 35745,11468 35745,11540 35764,11612 35801,11674 35837,11737 35889,11789 35952,11825 36014,11862 36086,11881 36158,11881 36231,11881 36302,11862 36364,11825 36427,11789 36479,11737 36516,11674 36528,11652 36539,11629 36547,11605 36549,11601 36550,11597 36550,11592 36550,11585 36548,11578 36544,11571 36540,11565 36535,11560 36529,11556 36527,11555 36524,11554 36522,11553 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1744"
   class="Graphic">
       <g
   id="id146">
        <rect
   id="rect1739"
   height="661"
   width="661"
   y="3135"
   x="11051"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1741"
   d="M 11166,3238 C 11156,3246 11150,3255 11147,3267 L 11120,3383 C 11113,3412 11119,3437 11136,3459 L 11143,3466 11143,3650 C 11143,3663 11149,3676 11160,3686 11170,3697 11183,3703 11196,3703 L 11566,3703 C 11579,3703 11592,3697 11602,3686 11613,3676 11619,3663 11619,3650 L 11619,3466 11626,3459 C 11643,3437 11649,3412 11642,3383 L 11615,3267 C 11611,3255 11605,3246 11596,3238 11586,3231 11576,3227 11564,3227 L 11198,3227 C 11186,3227 11176,3231 11166,3238 Z M 11591,3396 C 11594,3407 11591,3417 11584,3427 11577,3435 11569,3439 11559,3439 11551,3439 11544,3436 11538,3430 11532,3424 11529,3416 11528,3408 L 11512,3280 11563,3279 11591,3396 Z M 11250,3280 L 11234,3408 C 11231,3429 11220,3439 11203,3439 11192,3439 11184,3435 11178,3427 11171,3417 11168,3407 11171,3396 L 11198,3280 11250,3280 Z M 11355,3280 L 11355,3404 C 11355,3414 11352,3421 11345,3429 11338,3435 11330,3439 11320,3439 11311,3439 11304,3435 11298,3428 11292,3420 11289,3412 11289,3403 L 11289,3399 11303,3280 11355,3280 Z M 11459,3280 L 11473,3399 C 11476,3410 11473,3419 11466,3427 11459,3435 11450,3439 11439,3439 11431,3439 11424,3435 11417,3429 11410,3421 11407,3414 11407,3404 L 11407,3280 11459,3280 Z M 11261,3466 C 11278,3483 11298,3491 11323,3491 11345,3491 11365,3483 11381,3466 11399,3483 11419,3491 11442,3491 11465,3491 11484,3483 11501,3466 11516,3483 11536,3491 11561,3491 L 11567,3491 11567,3650 11196,3650 11196,3491 11203,3491 C 11227,3491 11246,3483 11261,3466 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1751"
   class="Graphic">
       <g
   id="id147">
        <rect
   id="rect1746"
   height="661"
   width="661"
   y="11289"
   x="32651"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1748"
   d="M 32766,11392 C 32756,11400 32750,11409 32747,11421 L 32720,11537 C 32713,11566 32719,11591 32736,11613 L 32743,11620 32743,11804 C 32743,11817 32749,11830 32760,11840 32770,11851 32783,11857 32796,11857 L 33166,11857 C 33179,11857 33192,11851 33202,11840 33213,11830 33219,11817 33219,11804 L 33219,11620 33226,11613 C 33243,11591 33249,11566 33242,11537 L 33215,11421 C 33211,11409 33205,11400 33196,11392 33186,11385 33176,11381 33164,11381 L 32798,11381 C 32786,11381 32776,11385 32766,11392 Z M 33191,11550 C 33194,11561 33191,11571 33184,11581 33177,11589 33169,11593 33159,11593 33151,11593 33144,11590 33138,11584 33132,11578 33129,11570 33128,11562 L 33112,11434 33163,11433 33191,11550 Z M 32850,11434 L 32834,11562 C 32831,11583 32820,11593 32803,11593 32792,11593 32784,11589 32778,11581 32771,11571 32768,11561 32771,11550 L 32798,11434 32850,11434 Z M 32955,11434 L 32955,11558 C 32955,11568 32952,11575 32945,11583 32938,11589 32930,11593 32920,11593 32911,11593 32904,11589 32898,11582 32892,11574 32889,11566 32889,11557 L 32889,11553 32903,11434 32955,11434 Z M 33059,11434 L 33073,11553 C 33076,11564 33073,11573 33066,11581 33059,11589 33050,11593 33039,11593 33031,11593 33024,11589 33017,11583 33010,11575 33007,11568 33007,11558 L 33007,11434 33059,11434 Z M 32861,11620 C 32878,11637 32898,11645 32923,11645 32945,11645 32965,11637 32981,11620 32999,11637 33019,11645 33042,11645 33065,11645 33084,11637 33101,11620 33116,11637 33136,11645 33161,11645 L 33167,11645 33167,11804 32796,11804 32796,11645 32803,11645 C 32827,11645 32846,11637 32861,11620 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1758"
   class="Graphic">
       <g
   id="id148">
        <rect
   id="rect1753"
   height="661"
   width="661"
   y="8212"
   x="6831"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1755"
   d="M 7293,8313 C 7333,8337 7366,8370 7390,8410 7413,8450 7425,8496 7425,8542 7425,8551 7423,8560 7418,8568 7413,8576 7407,8583 7399,8588 7391,8592 7381,8595 7372,8595 L 6950,8595 C 6941,8595 6931,8592 6923,8588 6915,8583 6909,8576 6904,8568 6899,8560 6897,8551 6897,8542 6897,8496 6909,8450 6932,8410 6956,8370 6989,8337 7029,8313 7069,8290 7115,8278 7161,8278 7207,8278 7253,8290 7293,8313 Z M 7187,8429 C 7195,8425 7202,8418 7207,8410 7211,8402 7214,8393 7214,8384 7214,8374 7211,8365 7207,8357 7202,8349 7195,8343 7187,8338 7179,8333 7170,8331 7161,8331 7152,8331 7143,8333 7135,8338 7127,8343 7120,8349 7115,8357 7111,8365 7108,8374 7108,8384 7108,8393 7111,8402 7115,8410 7120,8418 7127,8425 7135,8429 7143,8434 7152,8436 7161,8436 7170,8436 7179,8434 7187,8429 Z M 7319,8535 C 7327,8530 7334,8524 7339,8516 7343,8508 7346,8498 7346,8489 7346,8480 7343,8471 7339,8463 7334,8455 7327,8448 7319,8443 7311,8439 7302,8436 7293,8436 7284,8436 7275,8439 7267,8443 7259,8448 7252,8455 7247,8463 7243,8471 7240,8480 7240,8489 7240,8498 7243,8508 7247,8516 7252,8524 7259,8530 7267,8535 7275,8540 7284,8542 7293,8542 7302,8542 7311,8540 7319,8535 Z M 7055,8535 C 7063,8530 7070,8524 7075,8516 7079,8508 7082,8498 7082,8489 7082,8480 7079,8471 7075,8463 7070,8455 7063,8448 7055,8443 7047,8439 7038,8436 7029,8436 7020,8436 7011,8439 7003,8443 6995,8448 6988,8455 6983,8463 6979,8471 6976,8480 6976,8489 6976,8498 6979,8508 6983,8516 6988,8524 6995,8530 7003,8535 7011,8540 7020,8542 7029,8542 7038,8542 7047,8540 7055,8535 Z M 7240,8621 L 7274,8739 7276,8753 C 7276,8782 7252,8806 7223,8806 L 7099,8806 C 7090,8806 7081,8804 7073,8799 7065,8794 7058,8788 7053,8780 7049,8772 7046,8762 7046,8753 L 7048,8739 7082,8621 7240,8621 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1765"
   class="Graphic">
       <g
   id="id149">
        <rect
   id="rect1760"
   height="1136"
   width="1136"
   y="2335"
   x="35213"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1762"
   d="M 36008,2509 C 36077,2549 36134,2606 36174,2675 36214,2745 36235,2823 36235,2903 36235,2918 36230,2934 36222,2948 36214,2962 36203,2973 36189,2981 36175,2989 36160,2993 36144,2993 L 35417,2993 C 35401,2993 35386,2989 35372,2981 35358,2973 35347,2962 35339,2948 35331,2934 35327,2918 35327,2903 35327,2823 35347,2745 35387,2676 35427,2606 35484,2549 35554,2509 35623,2469 35701,2449 35781,2449 35860,2449 35938,2469 36008,2509 Z M 35826,2709 C 35840,2701 35851,2689 35859,2676 35867,2662 35871,2646 35871,2630 35871,2614 35867,2599 35859,2585 35851,2571 35840,2559 35826,2551 35812,2543 35796,2539 35781,2539 35765,2539 35749,2543 35735,2551 35721,2559 35710,2571 35702,2585 35694,2599 35690,2614 35690,2630 35690,2646 35694,2662 35702,2676 35710,2689 35721,2701 35735,2709 35749,2717 35765,2721 35781,2721 35796,2721 35812,2717 35826,2709 Z M 36053,2890 C 36067,2882 36078,2871 36086,2857 36094,2843 36098,2828 36098,2812 36098,2796 36094,2780 36086,2766 36078,2752 36067,2741 36053,2733 36039,2725 36023,2721 36008,2721 35992,2721 35976,2725 35962,2733 35948,2741 35937,2752 35929,2766 35921,2780 35917,2796 35917,2812 35917,2828 35921,2843 35929,2857 35937,2871 35948,2882 35962,2890 35976,2898 35992,2903 36008,2903 36023,2903 36039,2898 36053,2890 Z M 35599,2890 C 35613,2882 35624,2871 35632,2857 35640,2843 35644,2828 35644,2812 35644,2796 35640,2780 35632,2766 35624,2752 35613,2741 35599,2733 35585,2725 35569,2721 35554,2721 35538,2721 35522,2725 35508,2733 35494,2741 35483,2752 35475,2766 35467,2780 35463,2796 35463,2812 35463,2828 35467,2843 35475,2857 35483,2871 35494,2882 35508,2890 35522,2898 35538,2903 35554,2903 35569,2903 35585,2898 35599,2890 Z M 35917,3039 L 35974,3241 35978,3266 C 35978,3316 35937,3357 35887,3357 L 35674,3357 C 35658,3357 35642,3352 35628,3344 35615,3336 35603,3325 35595,3311 35587,3297 35583,3282 35583,3266 L 35587,3241 35644,3039 35917,3039 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1772"
   class="Graphic">
       <g
   id="id150">
        <rect
   id="rect1767"
   height="1004"
   width="1004"
   y="12426"
   x="34193"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1769"
   d="M 34895,12767 L 34895,12607 34333,12607 C 34289,12607 34253,12643 34253,12687 L 34253,13128 34333,13128 C 34333,13196 34386,13248 34454,13248 34522,13248 34574,13196 34574,13128 L 34815,13128 C 34815,13196 34867,13248 34935,13248 35003,13248 35056,13196 35056,13128 L 35136,13128 35136,12928 35015,12767 34895,12767 Z M 34394,13128 C 34394,13096 34422,13068 34454,13068 34486,13068 34514,13096 34514,13128 34514,13160 34486,13188 34454,13188 34422,13188 34394,13160 34394,13128 Z M 34542,13048 C 34522,13024 34490,13008 34454,13008 34418,13008 34386,13024 34366,13048 L 34333,13048 34333,12687 34815,12687 34815,13048 34542,13048 Z M 34875,13128 C 34875,13096 34903,13068 34935,13068 34967,13068 34995,13096 34995,13128 34995,13160 34967,13188 34935,13188 34903,13188 34875,13160 34875,13128 Z M 34895,12827 L 34995,12827 35076,12928 34895,12928 34895,12827 Z M 34534,12887 L 34454,12887 34454,12807 34534,12807 34534,12727 34614,12727 34614,12807 34695,12807 34695,12887 34614,12887 34614,12968 34534,12968 34534,12887 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1779"
   class="Graphic">
       <g
   id="id151">
        <rect
   id="rect1774"
   height="1351"
   width="1351"
   y="13207"
   x="31571"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1776"
   d="M 32502,13469 C 32537,13425 32591,13396 32651,13396 32684,13396 32717,13405 32746,13421 32774,13438 32798,13462 32815,13491 32831,13519 32840,13552 32840,13585 32840,13666 32789,13735 32717,13762 32727,13801 32732,13840 32732,13882 32732,13967 32710,14051 32667,14125 32624,14199 32563,14260 32489,14303 32415,14346 32331,14368 32246,14368 32161,14368 32077,14346 32003,14303 31929,14260 31868,14199 31825,14125 31782,14051 31760,13967 31760,13882 31760,13840 31765,13801 31775,13762 31703,13735 31652,13666 31652,13585 31652,13552 31661,13519 31677,13491 31694,13462 31718,13438 31747,13421 31775,13405 31808,13396 31841,13396 31901,13396 31955,13425 31990,13469 32065,13423 32152,13396 32246,13396 32340,13396 32427,13423 32502,13469 Z M 32057,13555 C 32000,13588 31952,13636 31919,13693 31885,13750 31868,13816 31868,13882 31868,13948 31885,14014 31919,14071 31952,14128 32000,14176 32057,14209 32114,14243 32180,14260 32246,14260 32312,14260 32378,14243 32435,14209 32492,14176 32540,14128 32573,14071 32607,14014 32624,13948 32624,13882 32624,13816 32607,13750 32573,13693 32540,13636 32492,13588 32435,13555 32378,13521 32312,13504 32246,13504 32180,13504 32114,13521 32057,13555 Z M 32416,13945 C 32365,13959 32309,13911 32290,13839 32270,13767 32296,13698 32346,13684 32397,13671 32453,13718 32472,13790 32492,13862 32466,13931 32416,13945 Z M 32146,13684 C 32196,13698 32222,13767 32202,13839 32183,13911 32127,13959 32076,13945 32026,13931 32000,13862 32020,13790 32039,13718 32095,13671 32146,13684 Z M 32246,13990 C 32278,13990 32307,14000 32327,14017 L 32273,14071 C 32273,14094 32291,14112 32314,14112 32321,14112 32328,14110 32334,14106 32340,14103 32345,14097 32349,14091 32352,14085 32354,14078 32354,14071 32354,14066 32355,14062 32358,14058 32360,14053 32363,14050 32368,14048 32372,14045 32376,14044 32381,14044 32386,14044 32390,14045 32395,14048 32399,14050 32402,14053 32404,14058 32407,14062 32408,14066 32408,14071 32408,14088 32404,14104 32395,14118 32387,14133 32375,14145 32361,14153 32346,14161 32330,14166 32314,14166 32287,14166 32263,14155 32246,14137 32229,14155 32205,14166 32179,14166 32162,14166 32146,14161 32131,14153 32117,14145 32105,14133 32097,14118 32088,14104 32084,14088 32084,14071 32084,14066 32085,14062 32088,14058 32090,14053 32093,14050 32098,14048 32102,14045 32106,14044 32111,14044 32116,14044 32120,14045 32125,14048 32129,14050 32132,14053 32134,14058 32137,14062 32138,14066 32138,14071 32138,14078 32140,14085 32143,14091 32147,14097 32152,14103 32158,14106 32164,14110 32171,14112 32179,14112 32186,14112 32193,14110 32199,14106 32205,14103 32210,14097 32214,14091 32217,14085 32219,14078 32219,14071 L 32165,14017 C 32185,14000 32214,13990 32246,13990 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1786"
   class="Graphic">
       <g
   id="id152">
        <rect
   id="rect1781"
   height="661"
   width="661"
   y="5915"
   x="36500"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1783"
   d="M 36817,5955 L 36566,6087 36566,6139 37068,6139 37068,6087 Z M 36936,6192 L 36936,6377 37015,6377 37015,6192 Z M 36566,6509 L 37068,6509 37068,6430 36566,6430 Z M 36777,6192 L 36777,6377 36856,6377 36856,6192 Z M 36619,6192 L 36619,6377 36698,6377 36698,6192 36619,6192 36619,6192 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1793"
   class="Graphic">
       <g
   id="id153">
        <rect
   id="rect1788"
   height="1444"
   width="1444"
   y="14728"
   x="34862"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1790"
   d="M 35353,15276 L 35353,15392 35468,15392 35468,15507 35353,15507 35353,15623 35237,15623 35237,15507 35122,15507 35122,15392 35237,15392 35237,15276 35353,15276 Z M 36002,15288 C 36015,15296 36026,15306 36034,15320 36041,15333 36045,15348 36045,15363 36045,15378 36041,15393 36034,15406 36026,15419 36015,15430 36002,15438 35989,15445 35974,15450 35959,15450 35943,15450 35929,15445 35915,15438 35902,15430 35891,15419 35884,15406 35876,15393 35872,15378 35872,15363 35872,15348 35876,15333 35884,15320 35891,15306 35902,15296 35915,15288 35929,15280 35943,15276 35959,15276 35974,15276 35989,15280 36002,15288 Z M 35829,15461 C 35842,15469 35853,15480 35861,15493 35868,15506 35872,15521 35872,15536 35872,15551 35868,15566 35861,15579 35853,15593 35842,15603 35829,15611 35816,15619 35801,15623 35786,15623 35770,15623 35755,15619 35742,15611 35729,15603 35718,15593 35711,15579 35703,15566 35699,15551 35699,15536 35699,15521 35703,15506 35711,15493 35718,15480 35729,15469 35742,15461 35755,15454 35770,15450 35786,15450 35801,15450 35816,15454 35829,15461 Z M 36074,15100 C 36136,15135 36187,15186 36222,15247 36257,15309 36276,15379 36276,15450 36276,15520 36257,15590 36222,15652 36187,15713 36136,15764 36074,15799 36013,15835 35943,15854 35872,15854 35759,15854 35657,15807 35584,15732 35510,15807 35408,15854 35295,15854 35224,15854 35154,15835 35093,15799 35031,15764 34980,15713 34945,15652 34910,15590 34891,15520 34891,15450 34891,15379 34910,15309 34945,15247 34980,15186 35031,15135 35093,15100 35154,15064 35224,15045 35295,15045 L 35872,15045 C 35943,15045 36013,15064 36074,15100 Z M 35295,15161 C 35244,15161 35194,15174 35151,15200 35107,15225 35070,15261 35045,15305 35020,15349 35006,15399 35006,15450 35006,15500 35020,15550 35045,15594 35070,15638 35107,15674 35151,15699 35194,15725 35244,15738 35295,15738 35390,15738 35473,15693 35526,15623 L 35641,15623 C 35694,15693 35777,15738 35872,15738 35923,15738 35973,15725 36016,15699 36060,15674 36097,15638 36122,15594 36147,15550 36161,15500 36161,15450 36161,15399 36147,15349 36122,15305 36097,15261 36060,15225 36016,15200 35973,15174 35923,15161 35872,15161 L 35295,15161 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1800"
   class="Graphic">
       <g
   id="id154">
        <rect
   id="rect1795"
   height="909"
   width="909"
   y="15565"
   x="29596"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1797"
   d="M 30050,16359 L 29997,16311 C 29810,16141 29687,16029 29687,15892 29687,15780 29775,15692 29887,15692 29950,15692 30010,15722 30050,15768 30090,15722 30150,15692 30213,15692 30325,15692 30413,15780 30413,15892 30413,16029 30290,16141 30103,16311 L 30050,16359 30050,16359 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1807"
   class="Graphic">
       <g
   id="id155">
        <rect
   id="rect1802"
   height="1001"
   width="1001"
   y="10735"
   x="34280"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1804"
   d="M 35168,11077 C 35184,11061 35184,11035 35168,11020 L 34995,10847 C 34980,10831 34954,10831 34938,10847 L 34780,11006 34620,10847 C 34612,10839 34602,10835 34592,10835 34582,10835 34571,10839 34564,10847 L 34390,11020 C 34374,11035 34374,11061 34390,11077 L 34549,11235 34390,11395 C 34374,11411 34374,11435 34390,11451 L 34564,11625 C 34580,11641 34604,11641 34620,11625 L 34780,11466 34938,11625 C 34946,11633 34956,11637 34967,11637 34977,11637 34987,11633 34995,11625 L 35169,11451 C 35184,11435 35184,11411 35169,11395 L 35009,11235 35168,11077 Z M 34800,11120 C 34806,11124 34811,11129 34815,11135 34818,11141 34820,11148 34820,11155 34820,11162 34818,11169 34815,11175 34811,11181 34806,11186 34800,11190 34794,11193 34787,11195 34780,11195 34773,11195 34766,11193 34760,11190 34754,11186 34749,11181 34745,11175 34742,11169 34740,11162 34740,11155 34740,11148 34742,11141 34745,11135 34749,11129 34754,11124 34760,11120 34766,11117 34773,11115 34780,11115 34787,11115 34794,11117 34800,11120 Z M 34446,11049 L 34592,10903 34736,11048 34592,11193 34446,11049 Z M 34680,11270 C 34674,11266 34669,11261 34665,11255 34662,11249 34660,11242 34660,11235 34660,11228 34662,11221 34665,11215 34669,11209 34674,11204 34680,11200 34686,11197 34693,11195 34700,11195 34707,11195 34714,11197 34720,11200 34726,11204 34731,11209 34735,11215 34738,11221 34740,11228 34740,11235 34740,11242 34738,11249 34735,11255 34731,11261 34726,11266 34720,11270 34714,11273 34707,11275 34700,11275 34693,11275 34686,11273 34680,11270 Z M 34760,11350 C 34754,11346 34749,11341 34745,11335 34742,11329 34740,11322 34740,11315 34740,11308 34742,11301 34745,11295 34749,11289 34754,11284 34760,11280 34766,11277 34773,11275 34780,11275 34787,11275 34794,11277 34800,11280 34806,11284 34811,11289 34815,11295 34818,11301 34820,11308 34820,11315 34820,11322 34818,11329 34815,11335 34811,11341 34806,11346 34800,11350 34794,11353 34787,11355 34780,11355 34773,11355 34766,11353 34760,11350 Z M 34880,11200 C 34886,11204 34891,11209 34895,11215 34898,11221 34900,11228 34900,11235 34900,11242 34898,11249 34895,11255 34891,11261 34886,11266 34880,11270 34874,11273 34867,11275 34860,11275 34853,11275 34846,11273 34840,11270 34834,11266 34829,11261 34825,11255 34822,11249 34820,11242 34820,11235 34820,11228 34822,11221 34825,11215 34829,11209 34834,11204 34840,11200 34846,11197 34853,11195 34860,11195 34867,11195 34874,11197 34880,11200 Z M 34966,11569 L 34821,11424 34966,11279 35111,11423 34966,11569 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1814"
   class="Graphic">
       <g
   id="id156">
        <rect
   id="rect1809"
   height="770"
   width="770"
   y="13684"
   x="36641"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1811"
   d="M 37210,14222 C 37244,14222 37272,14195 37272,14161 37272,14127 37244,14099 37210,14099 L 37210,13976 C 37210,13945 37210,13915 37177,13888 37178,13882 37179,13875 37179,13869 37179,13809 37118,13761 37041,13761 36971,13761 36914,13801 36905,13853 L 36841,13853 36770,13785 36749,13807 36810,13869 36749,13930 36770,13952 36841,13884 36905,13884 C 36914,13936 36971,13976 37041,13976 37056,13976 37072,13974 37085,13970 37086,13972 37087,13974 37087,13976 L 37087,14099 36902,14099 C 36869,14099 36841,14127 36841,14161 36841,14195 36869,14222 36902,14222 L 36856,14222 C 36814,14222 36779,14257 36779,14299 36779,14304 36779,14310 36781,14315 L 36779,14315 C 36746,14315 36718,14342 36718,14376 L 37256,14376 C 37299,14376 37333,14342 37333,14299 37333,14257 37299,14222 37256,14222 L 37210,14222 Z M 37026,13853 C 37009,13853 36995,13839 36995,13822 36995,13806 37009,13792 37026,13792 37042,13792 37056,13806 37056,13822 37056,13839 37042,13853 37026,13853 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1821"
   class="Graphic">
       <g
   id="id157">
        <rect
   id="rect1816"
   height="1289"
   width="1289"
   y="4006"
   x="36900"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1818"
   d="M 38008,4547 L 37621,4495 37621,4289 37389,4289 37389,4367 37544,4367 37544,4768 37492,4768 37389,4547 C 37405,4542 37415,4526 37415,4511 37415,4490 37400,4470 37379,4470 L 37276,4470 C 37250,4470 37235,4485 37235,4506 37235,4526 37250,4547 37276,4547 L 37307,4547 37410,4763 37333,4763 C 37317,4671 37235,4598 37132,4598 37018,4598 36926,4691 36926,4805 36926,4918 37018,5011 37132,5011 37235,5011 37317,4939 37333,4846 L 37776,4846 C 37786,4722 37884,4624 38008,4624 L 38008,4547 Z M 37132,4939 C 37060,4939 37003,4882 37003,4810 37003,4738 37060,4681 37132,4681 37189,4681 37240,4717 37255,4774 L 37132,4774 37132,4851 37254,4851 C 37237,4900 37187,4939 37132,4939 Z M 37853,4856 C 37853,4944 37920,5011 38008,5011 38095,5011 38162,4944 38162,4856 38162,4768 38095,4702 38008,4702 37920,4702 37853,4768 37853,4856 Z M 38008,4933 C 37966,4933 37930,4897 37930,4856 37930,4815 37966,4779 38008,4779 38049,4779 38085,4815 38085,4856 38085,4897 38049,4933 38008,4933 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1828"
   class="Graphic">
       <g
   id="id158">
        <rect
   id="rect1823"
   height="807"
   width="807"
   y="9737"
   x="32400"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1825"
   d="M 32739,9882 L 32739,10076 32545,10076 32545,9882 32739,9882 Z M 33061,10076 L 32867,10076 32867,9882 33061,9882 33061,10076 Z M 32932,10237 L 32932,10237 32932,10172 32867,10172 32867,10108 32932,10108 32932,10172 32996,10172 32996,10108 33061,10108 33061,10172 32996,10172 32996,10237 33061,10237 33061,10333 32996,10333 32996,10398 32932,10398 32932,10333 32835,10333 32835,10398 32771,10398 32771,10269 32867,10269 32867,10237 32932,10237 Z M 32932,10333 L 32996,10333 32996,10237 32932,10237 32932,10333 Z M 32545,10204 L 32739,10204 32739,10398 32545,10398 32545,10204 Z M 32610,10011 L 32674,10011 32674,9947 32610,9947 32610,10011 Z M 32932,10011 L 32996,10011 32996,9947 32932,9947 32932,10011 Z M 32610,10333 L 32674,10333 32674,10269 32610,10269 32610,10333 Z M 32610,10108 L 32610,10172 32545,10172 32545,10108 32610,10108 Z M 32835,10108 L 32835,10237 32771,10237 32771,10172 32706,10172 32706,10108 32835,10108 Z M 32835,9947 L 32835,10076 32771,10076 32771,9947 32835,9947 Z M 32481,9947 L 32416,9947 32416,9818 C 32416,9806 32419,9795 32425,9785 32430,9776 32439,9767 32448,9762 32458,9756 32469,9753 32481,9753 L 32610,9753 32610,9818 32481,9818 32481,9947 Z M 33158,9762 C 33167,9767 33176,9776 33181,9785 33187,9795 33190,9806 33190,9818 L 33190,9947 33125,9947 33125,9818 32996,9818 32996,9753 33125,9753 C 33137,9753 33148,9756 33158,9762 Z M 32481,10462 L 32610,10462 32610,10527 32481,10527 C 32469,10527 32458,10524 32448,10518 32439,10513 32430,10504 32425,10495 32419,10485 32416,10474 32416,10462 L 32416,10333 32481,10333 32481,10462 Z M 33125,10462 L 33125,10333 33190,10333 33190,10462 C 33190,10474 33187,10485 33181,10495 33176,10504 33167,10513 33158,10518 33148,10524 33137,10527 33125,10527 L 32996,10527 32996,10462 33125,10462 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1835"
   class="Graphic">
       <g
   id="id159">
        <rect
   id="rect1830"
   height="661"
   width="661"
   y="142"
   x="11650"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1832"
   d="M 12165,736 L 11795,736 11795,498 C 11795,426 11854,366 11927,366 L 11927,314 11901,314 11901,287 12059,287 12059,314 12033,314 12033,366 C 12106,366 12165,426 12165,498 L 12165,736 Z M 12033,208 L 11927,208 11954,261 12006,261 12033,208 Z M 11874,551 C 11874,578 11885,601 11901,620 L 11901,657 11934,657 11934,617 11964,617 11964,657 11997,657 11997,617 12026,617 12026,657 12059,657 12059,620 C 12075,601 12086,578 12086,551 12086,493 12038,446 11980,446 11922,446 11874,493 11874,551 Z M 11914,525 C 11914,510 11926,498 11940,498 11955,498 11967,510 11967,525 11967,539 11955,551 11940,551 11926,551 11914,539 11914,525 Z M 11980,551 L 12000,584 11960,584 11980,551 Z M 12020,551 C 12005,551 11993,539 11993,525 11993,510 12005,498 12020,498 12034,498 12046,510 12046,525 12046,539 12034,551 12020,551 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1842"
   class="Graphic">
       <g
   id="id160">
        <rect
   id="rect1837"
   height="661"
   width="661"
   y="9012"
   x="36915"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1839"
   d="M 37430,9606 L 37060,9606 37060,9368 C 37060,9296 37119,9236 37192,9236 L 37192,9184 37166,9184 37166,9157 37324,9157 37324,9184 37298,9184 37298,9236 C 37371,9236 37430,9296 37430,9368 L 37430,9606 Z M 37298,9078 L 37192,9078 37219,9131 37271,9131 37298,9078 Z M 37139,9421 C 37139,9448 37150,9471 37166,9490 L 37166,9527 37199,9527 37199,9487 37229,9487 37229,9527 37262,9527 37262,9487 37291,9487 37291,9527 37324,9527 37324,9490 C 37340,9471 37351,9448 37351,9421 37351,9363 37303,9316 37245,9316 37187,9316 37139,9363 37139,9421 Z M 37179,9395 C 37179,9380 37191,9368 37205,9368 37220,9368 37232,9380 37232,9395 37232,9409 37220,9421 37205,9421 37191,9421 37179,9409 37179,9395 Z M 37245,9421 L 37265,9454 37225,9454 37245,9421 Z M 37285,9421 C 37270,9421 37258,9409 37258,9395 37258,9380 37270,9368 37285,9368 37299,9368 37311,9380 37311,9395 37311,9409 37299,9421 37285,9421 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1849"
   class="Graphic">
       <g
   id="id161">
        <rect
   id="rect1844"
   height="661"
   width="661"
   y="2469"
   x="6778"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1846"
   d="M 6974,2627 L 7034,2688 6997,2725 6936,2665 6876,2725 6838,2688 6899,2627 6838,2567 6876,2529 6936,2590 6997,2529 7034,2567 6974,2627 Z M 7378,2910 L 7340,2873 7280,2933 7219,2873 7182,2910 7242,2971 7182,3031 7219,3069 7280,3008 7340,3069 7378,3031 7317,2971 7378,2910 Z M 7330,2663 L 7245,2773 7203,2739 7234,2699 C 7209,2705 7184,2714 7162,2727 7125,2748 7095,2778 7074,2815 7068,2825 7063,2836 7058,2848 7072,2858 7083,2870 7092,2885 7102,2903 7107,2923 7107,2944 7107,2965 7102,2986 7092,3004 7081,3022 7066,3037 7048,3047 7030,3058 7009,3063 6989,3063 6968,3063 6947,3058 6929,3047 6911,3037 6896,3022 6886,3004 6875,2986 6870,2965 6870,2944 6870,2923 6875,2903 6886,2885 6896,2867 6911,2852 6929,2841 6947,2831 6968,2825 6989,2825 6989,2825 6989,2825 6989,2825 6996,2825 7003,2826 7010,2828 7015,2815 7021,2802 7028,2790 7054,2745 7092,2707 7137,2681 7164,2665 7194,2654 7225,2647 L 7187,2619 7221,2577 7330,2663 Z M 7055,2944 C 7055,2933 7052,2921 7046,2911 7041,2901 7032,2893 7022,2887 7012,2881 7001,2878 6989,2878 6978,2878 6966,2881 6956,2887 6946,2893 6938,2901 6932,2911 6926,2921 6923,2933 6923,2944 6923,2956 6926,2967 6932,2977 6938,2987 6946,2996 6956,3001 6966,3007 6978,3010 6989,3010 7001,3010 7012,3007 7022,3001 7032,2996 7041,2987 7046,2977 7052,2967 7055,2956 7055,2944 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1856"
   class="Graphic">
       <g
   id="id162">
        <rect
   id="rect1851"
   height="3006"
   width="3007"
   y="7365"
   x="38281"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1853"
   d="M 39448,8602 C 39284,8810 39194,9028 39145,9216 39129,9282 39152,9350 39205,9392 L 39407,9551 C 39460,9593 39531,9600 39592,9569 39764,9479 39955,9341 40119,9133 40544,8596 40315,8196 40315,8196 40315,8196 39873,8065 39448,8602 Z M 39312,9257 C 39363,9054 39455,8870 39583,8708 39829,8397 40071,8353 40191,8353 40219,8470 40232,8715 39985,9027 39857,9188 39699,9319 39513,9417 L 39312,9257 Z M 39790,9963 L 39613,9654 C 39741,9589 39859,9509 39965,9418 L 39790,9963 Z M 38716,9113 L 39207,8818 C 39142,8942 39092,9075 39057,9214 L 38716,9113 Z M 39784,8867 C 39710,8809 39698,8701 39756,8627 39814,8553 39922,8541 39996,8599 40070,8657 40083,8766 40024,8839 39966,8913 39858,8926 39784,8867 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1863"
   class="Graphic">
       <g
   id="id163">
        <rect
   id="rect1858"
   height="661"
   width="661"
   y="5829"
   x="38698"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1860"
   d="M 39186,6001 L 39107,6001 39107,5948 39028,5948 39028,5895 38922,5895 38922,5974 38870,5974 38870,6133 38843,6133 38896,6423 39160,6423 39213,6133 39186,6133 39186,6001 Z M 39107,6175 L 39107,6070 39160,6096 39160,6133 39130,6133 C 39126,6149 39118,6163 39107,6175 Z M 39160,6067 L 39107,6040 39107,6027 39160,6027 39160,6067 Z M 39081,5974 L 39081,6067 39028,6093 39028,5974 39081,5974 Z M 39081,6096 L 39081,6197 C 39065,6207 39047,6212 39028,6212 L 39028,6123 39081,6096 Z M 38949,6175 L 38949,6096 39002,6070 39002,6208 C 38981,6203 38962,6191 38949,6175 Z M 39002,5921 L 39002,6040 38975,6053 38975,5974 38949,5974 38949,5921 39002,5921 Z M 38896,6001 L 38949,6001 38949,6067 38922,6080 38922,6133 38896,6133 38896,6001 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1870"
   class="Graphic">
       <g
   id="id164">
        <rect
   id="rect1865"
   height="939"
   width="939"
   y="14660"
   x="38636"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1867"
   d="M 38992,14754 L 38917,14754 38917,14833 C 38891,14838 38870,14849 38854,14863 L 38756,14765 38703,14818 38814,14928 C 38805,14956 38805,14979 38805,14979 L 38730,14979 38730,15054 38806,15054 C 38809,15078 38813,15105 38820,15135 L 38718,15168 38741,15240 38842,15206 C 38851,15225 38861,15245 38873,15263 L 38784,15323 38825,15385 38920,15322 C 38941,15343 38966,15362 38995,15378 L 38959,15450 39026,15484 39063,15409 39057,15405 C 39093,15417 39134,15425 39180,15428 L 39180,15504 39255,15504 39255,15427 C 39284,15423 39323,15416 39359,15399 L 39416,15456 39469,15403 39419,15352 C 39433,15333 39443,15309 39443,15279 39443,15260 39441,15245 39438,15230 L 39497,15200 39463,15133 39412,15159 C 39391,15127 39364,15110 39341,15102 L 39366,15028 39294,15004 39266,15090 C 39216,15085 39186,15066 39169,15045 L 39234,15013 39201,14945 39143,14975 C 39141,14964 39137,14931 39116,14899 L 39174,14812 39111,14770 39058,14850 C 39040,14841 39019,14834 38992,14831 L 38992,14754 Z M 38967,15263 C 38868,15156 38880,14986 38880,14985 L 38880,14983 38880,14980 C 38880,14945 38895,14904 38955,14904 39054,14904 39066,14958 39067,14979 39067,15054 39128,15167 39293,15167 39305,15167 39368,15172 39368,15279 39368,15350 39219,15354 39218,15354 39107,15354 39023,15323 38967,15263 Z M 38946,14986 C 38937,14991 38930,14999 38925,15007 38920,15016 38917,15025 38917,15035 38917,15045 38920,15055 38925,15063 38930,15072 38937,15079 38946,15084 38954,15089 38964,15091 38974,15091 38984,15091 38993,15089 39002,15084 39010,15079 39017,15072 39022,15063 39027,15055 39030,15045 39030,15035 39030,15025 39027,15016 39022,15007 39017,14999 39010,14991 39002,14986 38993,14982 38984,14979 38974,14979 38964,14979 38954,14982 38946,14986 Z M 39049,15134 C 39043,15137 39038,15142 39035,15148 39032,15153 39030,15160 39030,15167 39030,15173 39032,15180 39035,15185 39038,15191 39043,15196 39049,15199 39054,15202 39061,15204 39067,15204 39074,15204 39081,15202 39086,15199 39092,15196 39097,15191 39100,15185 39103,15180 39105,15173 39105,15167 39105,15160 39103,15153 39100,15148 39097,15142 39092,15137 39086,15134 39081,15131 39074,15129 39067,15129 39061,15129 39054,15131 39049,15134 Z M 39236,15204 C 39226,15204 39217,15207 39208,15212 39200,15217 39193,15224 39188,15232 39183,15241 39180,15250 39180,15260 39180,15270 39183,15280 39188,15288 39193,15297 39200,15304 39208,15309 39217,15314 39226,15317 39236,15317 39246,15317 39256,15314 39264,15309 39273,15304 39280,15297 39285,15288 39290,15280 39293,15270 39293,15260 39293,15250 39290,15241 39285,15232 39280,15224 39273,15217 39264,15212 39256,15207 39246,15204 39236,15204 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1877"
   class="Graphic">
       <g
   id="id165">
        <rect
   id="rect1872"
   height="926"
   width="926"
   y="13801"
   x="29155"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1874"
   d="M 29803,13943 C 29859,13976 29905,14022 29938,14079 29970,14135 29988,14199 29988,14264 29988,14328 29970,14392 29938,14449 29905,14505 29859,14551 29803,14584 29746,14616 29682,14634 29618,14634 29553,14634 29489,14616 29433,14584 29376,14551 29330,14505 29297,14449 29265,14392 29248,14328 29248,14264 29248,14199 29265,14135 29297,14079 29330,14022 29376,13976 29433,13943 29489,13911 29553,13894 29618,13894 29682,13894 29746,13911 29803,13943 Z M 29470,14007 C 29425,14033 29387,14071 29361,14116 29335,14160 29322,14212 29322,14264 29322,14341 29351,14412 29400,14464 L 29539,14185 29818,14046 C 29766,13997 29695,13968 29618,13968 29566,13968 29514,13981 29470,14007 Z M 29766,14520 C 29810,14494 29848,14456 29874,14412 29900,14367 29914,14315 29914,14264 29914,14186 29884,14116 29835,14063 L 29696,14342 29417,14481 C 29470,14530 29540,14560 29618,14560 29669,14560 29721,14546 29766,14520 Z M 29589,14235 L 29532,14349 29646,14292 29618,14264 29589,14235 Z M 29655,14467 L 29655,14523 29618,14523 29618,14467 29655,14467 Z M 29787,14381 L 29827,14420 29800,14447 29761,14407 29787,14381 Z M 29821,14227 L 29877,14227 29877,14264 29821,14264 29821,14227 Z M 29581,14060 L 29581,14005 29618,14005 29618,14060 29581,14060 Z M 29448,14146 L 29408,14107 29435,14080 29474,14120 29448,14146 Z M 29414,14264 L 29414,14301 29359,14301 29359,14264 29414,14264 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
      <g
   id="g1884"
   class="Graphic">
       <g
   id="id166">
        <rect
   id="rect1879"
   height="845"
   width="845"
   y="9520"
   x="4326"
   fill="none"
   stroke="none"
   class="BoundingBox" />
        <path
   id="path1881"
   d="M 5007,9866 C 4999,9879 4989,9890 4976,9897 4963,9904 4948,9908 4934,9908 4897,9908 4866,9885 4855,9853 4840,9866 4820,9874 4799,9874 4780,9874 4762,9868 4748,9858 4734,9868 4717,9874 4697,9874 4676,9874 4656,9866 4641,9853 4630,9885 4599,9908 4562,9908 4548,9908 4533,9904 4520,9897 4507,9890 4497,9879 4489,9866 4482,9853 4478,9839 4478,9824 4478,9782 4509,9747 4549,9741 4547,9735 4545,9729 4545,9723 4545,9714 4548,9705 4552,9697 4557,9690 4563,9683 4571,9679 4578,9674 4587,9672 4596,9672 4603,9672 4609,9673 4615,9676 4621,9654 4640,9638 4664,9638 4672,9638 4680,9641 4687,9644 4697,9621 4721,9604 4748,9604 4775,9604 4799,9621 4809,9644 4816,9641 4824,9638 4832,9638 4856,9638 4875,9654 4881,9676 4887,9673 4893,9672 4900,9672 4909,9672 4918,9674 4925,9679 4933,9683 4939,9690 4944,9697 4948,9705 4951,9714 4951,9723 4951,9729 4949,9735 4947,9741 4987,9747 5018,9782 5018,9824 5018,9839 5014,9853 5007,9866 Z M 4664,9947 C 4658,9949 4654,9954 4651,9959 4648,9964 4647,9970 4647,9976 4647,9982 4648,9988 4651,9993 4654,9998 4658,10002 4664,10005 4669,10008 4675,10010 4680,10010 4686,10010 4692,10008 4697,10005 4702,10002 4707,9998 4710,9993 4713,9988 4714,9982 4714,9976 4714,9970 4713,9964 4710,9959 4707,9954 4702,9949 4697,9947 4692,9944 4686,9942 4680,9942 4675,9942 4669,9944 4664,9947 Z M 4799,9947 C 4794,9949 4789,9954 4786,9959 4783,9964 4782,9970 4782,9976 4782,9982 4783,9988 4786,9993 4789,9998 4794,10002 4799,10005 4804,10008 4810,10010 4816,10010 4821,10010 4827,10008 4832,10005 4838,10002 4842,9998 4845,9993 4848,9988 4849,9982 4849,9976 4849,9970 4848,9964 4845,9959 4842,9954 4838,9949 4832,9947 4827,9944 4821,9942 4816,9942 4810,9942 4804,9944 4799,9947 Z M 5026,9897 C 5004,9924 4971,9942 4934,9942 4918,9942 4904,9939 4890,9933 4890,10019 4877,10123 4831,10177 4813,10197 4792,10207 4765,10211 L 4765,10145 4731,10145 4731,10211 C 4704,10207 4683,10197 4665,10177 4618,10123 4606,10019 4606,9933 4592,9939 4578,9942 4562,9942 4525,9942 4492,9924 4470,9897 4440,9927 4410,9942 4410,9942 4410,9942 4444,10010 4512,10010 4524,10010 4533,10008 4541,10006 4553,10135 4599,10280 4748,10280 4897,10280 4943,10135 4955,10006 4963,10008 4972,10010 4984,10010 5052,10010 5086,9942 5086,9942 5086,9942 5056,9927 5026,9897 Z"
   stroke="none"
   fill="rgb(0,0,0)" />
       </g>
      </g>
     </g>
    </g>
   </g>
  </g>
 </g>
 <script
   id="script1894"
   type="text/ecmascript"><![CDATA[


(function(window, document, exportName, undefined) {
'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

function setTimeoutContext(fn, timeout, context) {
return setTimeout(bindFn(fn, context), timeout);
}

function invokeArrayArg(arg, fn, context) {
if (Array.isArray(arg)) {
each(arg, context[fn], context);
return true;
}
return false;
}

function each(obj, iterator, context) {
var i;

if (!obj) {
return;
}

if (obj.forEach) {
obj.forEach(iterator, context);
} else if (obj.length !== undefined) {
i = 0;
while (i < obj.length) {
iterator.call(context, obj[i], i, obj);
i++;
}
} else {
for (i in obj) {
obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
}
}
}

function deprecate(method, name, message) {
var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
return function() {
var e = new Error('get-stack-trace');
var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
.replace(/^\s+at\s+/gm, '')
.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

var log = window.console && (window.console.warn || window.console.log);
if (log) {
log.call(window.console, deprecationMessage, stack);
}
return method.apply(this, arguments);
};
}

var assign;
if (typeof Object.assign !== 'function') {
assign = function assign(target) {
if (target === undefined || target === null) {
throw new TypeError('Cannot convert undefined or null to object');
}

var output = Object(target);
for (var index = 1; index < arguments.length; index++) {
var source = arguments[index];
if (source !== undefined && source !== null) {
for (var nextKey in source) {
if (source.hasOwnProperty(nextKey)) {
output[nextKey] = source[nextKey];
}
}
}
}
return output;
};
} else {
assign = Object.assign;
}

var extend = deprecate(function extend(dest, src, merge) {
var keys = Object.keys(src);
var i = 0;
while (i < keys.length) {
if (!merge || (merge && dest[keys[i]] === undefined)) {
dest[keys[i]] = src[keys[i]];
}
i++;
}
return dest;
}, 'extend', 'Use `assign`.');

var merge = deprecate(function merge(dest, src) {
return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

function inherit(child, base, properties) {
var baseP = base.prototype,
childP;

childP = child.prototype = Object.create(baseP);
childP.constructor = child;
childP._super = baseP;

if (properties) {
assign(childP, properties);
}
}

function bindFn(fn, context) {
return function boundFn() {
return fn.apply(context, arguments);
};
}

function boolOrFn(val, args) {
if (typeof val == TYPE_FUNCTION) {
return val.apply(args ? args[0] || undefined : undefined, args);
}
return val;
}

function ifUndefined(val1, val2) {
return (val1 === undefined) ? val2 : val1;
}

function addEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.addEventListener(type, handler, false);
});
}

function removeEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.removeEventListener(type, handler, false);
});
}

function hasParent(node, parent) {
while (node) {
if (node == parent) {
return true;
}
node = node.parentNode;
}
return false;
}

function inStr(str, find) {
return str.indexOf(find) > -1;
}

function splitStr(str) {
return str.trim().split(/\s+/g);
}

function inArray(src, find, findByKey) {
if (src.indexOf && !findByKey) {
return src.indexOf(find);
} else {
var i = 0;
while (i < src.length) {
if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
return i;
}
i++;
}
return -1;
}
}

function toArray(obj) {
return Array.prototype.slice.call(obj, 0);
}

function uniqueArray(src, key, sort) {
var results = [];
var values = [];
var i = 0;

while (i < src.length) {
var val = key ? src[i][key] : src[i];
if (inArray(values, val) < 0) {
results.push(src[i]);
}
values[i] = val;
i++;
}

if (sort) {
if (!key) {
results = results.sort();
} else {
results = results.sort(function sortUniqueArray(a, b) {
return a[key] > b[key];
});
}
}

return results;
}

function prefixed(obj, property) {
if (obj === undefined) {
return undefined;
}

var prefix, prop;
var camelProp = property[0].toUpperCase() + property.slice(1);

var i = 0;
while (i < VENDOR_PREFIXES.length) {
prefix = VENDOR_PREFIXES[i];
prop = (prefix) ? prefix + camelProp : property;

if (prop in obj) {
return prop;
}
i++;
}
return undefined;
}

var _uniqueId = 1;
function uniqueId() {
return _uniqueId++;
}

function getWindowForElement(element) {
var doc = element.ownerDocument || element;
return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

function Input(manager, callback) {
var self = this;
this.manager = manager;
this.callback = callback;
this.element = manager.element;
this.target = manager.options.inputTarget;

this.domHandler = function(ev) {
if (boolOrFn(manager.options.enable, [manager])) {
self.handler(ev);
}
};

this.init();

}

Input.prototype = {
handler: function() { },

init: function() {
this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
},

destroy: function() {
this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
}
};

function createInputInstance(manager) {
var Type;
var inputClass = manager.options.inputClass;

if (inputClass) {
Type = inputClass;
} else if (!SUPPORT_TOUCH && SUPPORT_POINTER_EVENTS) {
Type = PointerEventInput;
} else if (SUPPORT_ONLY_TOUCH) {
Type = TouchInput;
} else if (!SUPPORT_TOUCH) {
Type = MouseInput;
} else {
Type = TouchMouseInput;
}
return new (Type)(manager, inputHandler);
}

function inputHandler(manager, eventType, input) {
var pointersLen = input.pointers.length;
var changedPointersLen = input.changedPointers.length;
var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

input.isFirst = !!isFirst;
input.isFinal = !!isFinal;

if (isFirst) {
manager.session = {};
}

input.eventType = eventType;

computeInputData(manager, input);

manager.emit('hammer.input', input);

manager.recognize(input);
manager.session.prevInput = input;
}

function computeInputData(manager, input) {
var session = manager.session;
var pointers = input.pointers;
var pointersLength = pointers.length;

if (!session.firstInput) {
session.firstInput = simpleCloneInputData(input);
}

if (pointersLength > 1 && !session.firstMultiple) {
session.firstMultiple = simpleCloneInputData(input);
} else if (pointersLength === 1) {
session.firstMultiple = false;
}

var firstInput = session.firstInput;
var firstMultiple = session.firstMultiple;
var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

var center = input.center = getCenter(pointers);
input.timeStamp = now();
input.deltaTime = input.timeStamp - firstInput.timeStamp;

input.angle = getAngle(offsetCenter, center);
input.distance = getDistance(offsetCenter, center);

computeDeltaXY(session, input);
input.offsetDirection = getDirection(input.deltaX, input.deltaY);

var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
input.overallVelocityX = overallVelocity.x;
input.overallVelocityY = overallVelocity.y;
input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

computeIntervalInputData(session, input);

var target = manager.element;
if (hasParent(input.srcEvent.target, target)) {
target = input.srcEvent.target;
}
input.target = target;
}

function computeDeltaXY(session, input) {
var center = input.center;
var offset = session.offsetDelta || {};
var prevDelta = session.prevDelta || {};
var prevInput = session.prevInput || {};

if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
prevDelta = session.prevDelta = {
x: prevInput.deltaX || 0,
y: prevInput.deltaY || 0
};

offset = session.offsetDelta = {
x: center.x,
y: center.y
};
}

input.deltaX = prevDelta.x + (center.x - offset.x);
input.deltaY = prevDelta.y + (center.y - offset.y);
}

function computeIntervalInputData(session, input) {
var last = session.lastInterval || input,
deltaTime = input.timeStamp - last.timeStamp,
velocity, velocityX, velocityY, direction;

if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
var deltaX = input.deltaX - last.deltaX;
var deltaY = input.deltaY - last.deltaY;

var v = getVelocity(deltaTime, deltaX, deltaY);
velocityX = v.x;
velocityY = v.y;
velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
direction = getDirection(deltaX, deltaY);

session.lastInterval = input;
} else {
velocity = last.velocity;
velocityX = last.velocityX;
velocityY = last.velocityY;
direction = last.direction;
}

input.velocity = velocity;
input.velocityX = velocityX;
input.velocityY = velocityY;
input.direction = direction;
}

function simpleCloneInputData(input) {
var pointers = [];
var i = 0;
while (i < input.pointers.length) {
pointers[i] = {
clientX: round(input.pointers[i].clientX),
clientY: round(input.pointers[i].clientY)
};
i++;
}

return {
timeStamp: now(),
pointers: pointers,
center: getCenter(pointers),
deltaX: input.deltaX,
deltaY: input.deltaY
};
}

function getCenter(pointers) {
var pointersLength = pointers.length;

if (pointersLength === 1) {
return {
x: round(pointers[0].clientX),
y: round(pointers[0].clientY)
};
}

var x = 0, y = 0, i = 0;
while (i < pointersLength) {
x += pointers[i].clientX;
y += pointers[i].clientY;
i++;
}

return {
x: round(x / pointersLength),
y: round(y / pointersLength)
};
}

function getVelocity(deltaTime, x, y) {
return {
x: x / deltaTime || 0,
y: y / deltaTime || 0
};
}

function getDirection(x, y) {
if (x === y) {
return DIRECTION_NONE;
}

if (abs(x) >= abs(y)) {
return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
}
return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

function getDistance(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];

return Math.sqrt((x * x) + (y * y));
}

function getAngle(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];
return Math.atan2(y, x) * 180 / Math.PI;
}

function getRotation(start, end) {
return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

function getScale(start, end) {
return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
mousedown: INPUT_START,
mousemove: INPUT_MOVE,
mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

function MouseInput() {
this.evEl = MOUSE_ELEMENT_EVENTS;
this.evWin = MOUSE_WINDOW_EVENTS;

this.pressed = false; // mousedown state

Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
handler: function MEhandler(ev) {
var eventType = MOUSE_INPUT_MAP[ev.type];

if (eventType & INPUT_START && ev.button === 0) {
this.pressed = true;
}

if (eventType & INPUT_MOVE && ev.which !== 1) {
eventType = INPUT_END;
}

if (!this.pressed) {
return;
}

if (eventType & INPUT_END) {
this.pressed = false;
}

this.callback(this.manager, eventType, {
pointers: [ev],
changedPointers: [ev],
pointerType: INPUT_TYPE_MOUSE,
srcEvent: ev
});
}
});

var POINTER_INPUT_MAP = {
pointerdown: INPUT_START,
pointermove: INPUT_MOVE,
pointerup: INPUT_END,
pointercancel: INPUT_CANCEL,
pointerout: INPUT_CANCEL
};

var IE10_POINTER_TYPE_ENUM = {
2: INPUT_TYPE_TOUCH,
3: INPUT_TYPE_PEN,
4: INPUT_TYPE_MOUSE,
5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

if (window.MSPointerEvent && !window.PointerEvent) {
POINTER_ELEMENT_EVENTS = 'MSPointerDown';
POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

function PointerEventInput() {
this.evEl = POINTER_ELEMENT_EVENTS;
this.evWin = POINTER_WINDOW_EVENTS;

Input.apply(this, arguments);

this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
handler: function PEhandler(ev) {
var store = this.store;
var removePointer = false;

var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

var isTouch = (pointerType == INPUT_TYPE_TOUCH);

var storeIndex = inArray(store, ev.pointerId, 'pointerId');

if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
if (storeIndex < 0) {
store.push(ev);
storeIndex = store.length - 1;
}
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
removePointer = true;
}

if (storeIndex < 0) {
return;
}

store[storeIndex] = ev;

this.callback(this.manager, eventType, {
pointers: store,
changedPointers: [ev],
pointerType: pointerType,
srcEvent: ev
});

if (removePointer) {
store.splice(storeIndex, 1);
}
}
});

var SINGLE_TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

function SingleTouchInput() {
this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
this.started = false;

Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
handler: function TEhandler(ev) {
var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

if (type === INPUT_START) {
this.started = true;
}

if (!this.started) {
return;
}

var touches = normalizeSingleTouches.call(this, ev, type);

if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
this.started = false;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function normalizeSingleTouches(ev, type) {
var all = toArray(ev.touches);
var changed = toArray(ev.changedTouches);

if (type & (INPUT_END | INPUT_CANCEL)) {
all = uniqueArray(all.concat(changed), 'identifier', true);
}

return [all, changed];
}

var TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

function TouchInput() {
this.evTarget = TOUCH_TARGET_EVENTS;
this.targetIds = {};

Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
handler: function MTEhandler(ev) {
var type = TOUCH_INPUT_MAP[ev.type];
var touches = getTouches.call(this, ev, type);
if (!touches) {
return;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function getTouches(ev, type) {
var allTouches = toArray(ev.touches);
var targetIds = this.targetIds;

if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
targetIds[allTouches[0].identifier] = true;
return [allTouches, allTouches];
}

var i,
targetTouches,
changedTouches = toArray(ev.changedTouches),
changedTargetTouches = [],
target = this.target;

targetTouches = allTouches.filter(function(touch) {
return hasParent(touch.target, target);
});

if (type === INPUT_START) {
i = 0;
while (i < targetTouches.length) {
targetIds[targetTouches[i].identifier] = true;
i++;
}
}

i = 0;
while (i < changedTouches.length) {
if (targetIds[changedTouches[i].identifier]) {
changedTargetTouches.push(changedTouches[i]);
}

if (type & (INPUT_END | INPUT_CANCEL)) {
delete targetIds[changedTouches[i].identifier];
}
i++;
}

if (!changedTargetTouches.length) {
return;
}

return [
uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
changedTargetTouches
];
}


var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
Input.apply(this, arguments);

var handler = bindFn(this.handler, this);
this.touch = new TouchInput(this.manager, handler);
this.mouse = new MouseInput(this.manager, handler);

this.primaryTouch = null;
this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
handler: function TMEhandler(manager, inputEvent, inputData) {
var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
return;
}

if (isTouch) {
recordTouches.call(this, inputEvent, inputData);
} else if (isMouse && isSyntheticEvent.call(this, inputData)) {
return;
}

this.callback(manager, inputEvent, inputData);
},

destroy: function destroy() {
this.touch.destroy();
this.mouse.destroy();
}
});

function recordTouches(eventType, eventData) {
if (eventType & INPUT_START) {
this.primaryTouch = eventData.changedPointers[0].identifier;
setLastTouch.call(this, eventData);
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
setLastTouch.call(this, eventData);
}
}

function setLastTouch(eventData) {
var touch = eventData.changedPointers[0];

if (touch.identifier === this.primaryTouch) {
var lastTouch = {x: touch.clientX, y: touch.clientY};
this.lastTouches.push(lastTouch);
var lts = this.lastTouches;
var removeLastTouch = function() {
var i = lts.indexOf(lastTouch);
if (i > -1) {
lts.splice(i, 1);
}
};
setTimeout(removeLastTouch, DEDUP_TIMEOUT);
}
}

function isSyntheticEvent(eventData) {
var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
for (var i = 0; i < this.lastTouches.length; i++) {
var t = this.lastTouches[i];
var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
return true;
}
}
return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

function TouchAction(manager, value) {
this.manager = manager;
this.set(value);
}

TouchAction.prototype = {
set: function(value) {
if (value == TOUCH_ACTION_COMPUTE) {
value = this.compute();
}

if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
}
this.actions = value.toLowerCase().trim();
},

update: function() {
this.set(this.manager.options.touchAction);
},

compute: function() {
var actions = [];
each(this.manager.recognizers, function(recognizer) {
if (boolOrFn(recognizer.options.enable, [recognizer])) {
actions = actions.concat(recognizer.getTouchAction());
}
});
return cleanTouchActions(actions.join(' '));
},

preventDefaults: function(input) {
var srcEvent = input.srcEvent;
var direction = input.offsetDirection;

if (this.manager.session.prevented) {
srcEvent.preventDefault();
return;
}

var actions = this.actions;
var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

if (hasNone) {

var isTapPointer = input.pointers.length === 1;
var isTapMovement = input.distance < 2;
var isTapTouchTime = input.deltaTime < 250;

if (isTapPointer && isTapMovement && isTapTouchTime) {
return;
}
}

if (hasPanX && hasPanY) {
return;
}

if (hasNone ||
(hasPanY && direction & DIRECTION_HORIZONTAL) ||
(hasPanX && direction & DIRECTION_VERTICAL)) {
return this.preventSrc(srcEvent);
}
},

preventSrc: function(srcEvent) {
this.manager.session.prevented = true;
srcEvent.preventDefault();
}
};

function cleanTouchActions(actions) {
if (inStr(actions, TOUCH_ACTION_NONE)) {
return TOUCH_ACTION_NONE;
}

var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

if (hasPanX && hasPanY) {
return TOUCH_ACTION_NONE;
}

if (hasPanX || hasPanY) {
return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
}

if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
return TOUCH_ACTION_MANIPULATION;
}

return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
if (!NATIVE_TOUCH_ACTION) {
return false;
}
var touchMap = {};
var cssSupports = window.CSS && window.CSS.supports;
['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
});
return touchMap;
}

var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

function Recognizer(options) {
this.options = assign({}, this.defaults, options || {});

this.id = uniqueId();

this.manager = null;

this.options.enable = ifUndefined(this.options.enable, true);

this.state = STATE_POSSIBLE;

this.simultaneous = {};
this.requireFail = [];
}

Recognizer.prototype = {
defaults: {},

set: function(options) {
assign(this.options, options);

this.manager && this.manager.touchAction.update();
return this;
},

recognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
return this;
}

var simultaneous = this.simultaneous;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (!simultaneous[otherRecognizer.id]) {
simultaneous[otherRecognizer.id] = otherRecognizer;
otherRecognizer.recognizeWith(this);
}
return this;
},

dropRecognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
delete this.simultaneous[otherRecognizer.id];
return this;
},

requireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
return this;
}

var requireFail = this.requireFail;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (inArray(requireFail, otherRecognizer) === -1) {
requireFail.push(otherRecognizer);
otherRecognizer.requireFailure(this);
}
return this;
},

dropRequireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
var index = inArray(this.requireFail, otherRecognizer);
if (index > -1) {
this.requireFail.splice(index, 1);
}
return this;
},

hasRequireFailures: function() {
return this.requireFail.length > 0;
},

canRecognizeWith: function(otherRecognizer) {
return !!this.simultaneous[otherRecognizer.id];
},

emit: function(input) {
var self = this;
var state = this.state;

function emit(event) {
self.manager.emit(event, input);
}

if (state < STATE_ENDED) {
emit(self.options.event + stateStr(state));
}

emit(self.options.event); // simple 'eventName' events

if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
emit(input.additionalEvent);
}

if (state >= STATE_ENDED) {
emit(self.options.event + stateStr(state));
}
},

tryEmit: function(input) {
if (this.canEmit()) {
return this.emit(input);
}
this.state = STATE_FAILED;
},

canEmit: function() {
var i = 0;
while (i < this.requireFail.length) {
if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
return false;
}
i++;
}
return true;
},

recognize: function(inputData) {
var inputDataClone = assign({}, inputData);

if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
this.reset();
this.state = STATE_FAILED;
return;
}

if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
this.state = STATE_POSSIBLE;
}

this.state = this.process(inputDataClone);

if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
this.tryEmit(inputDataClone);
}
},

process: function(inputData) { }, // jshint ignore:line

getTouchAction: function() { },

reset: function() { }
};

function stateStr(state) {
if (state & STATE_CANCELLED) {
return 'cancel';
} else if (state & STATE_ENDED) {
return 'end';
} else if (state & STATE_CHANGED) {
return 'move';
} else if (state & STATE_BEGAN) {
return 'start';
}
return '';
}

function directionStr(direction) {
if (direction == DIRECTION_DOWN) {
return 'down';
} else if (direction == DIRECTION_UP) {
return 'up';
} else if (direction == DIRECTION_LEFT) {
return 'left';
} else if (direction == DIRECTION_RIGHT) {
return 'right';
}
return '';
}

function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
var manager = recognizer.manager;
if (manager) {
return manager.get(otherRecognizer);
}
return otherRecognizer;
}

function AttrRecognizer() {
Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
defaults: {
pointers: 1
},

attrTest: function(input) {
var optionPointers = this.options.pointers;
return optionPointers === 0 || input.pointers.length === optionPointers;
},

process: function(input) {
var state = this.state;
var eventType = input.eventType;

var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
var isValid = this.attrTest(input);

if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
return state | STATE_CANCELLED;
} else if (isRecognized || isValid) {
if (eventType & INPUT_END) {
return state | STATE_ENDED;
} else if (!(state & STATE_BEGAN)) {
return STATE_BEGAN;
}
return state | STATE_CHANGED;
}
return STATE_FAILED;
}
});

function PanRecognizer() {
AttrRecognizer.apply(this, arguments);

this.pX = null;
this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
defaults: {
event: 'pan',
threshold: 10,
pointers: 1,
direction: DIRECTION_ALL
},

getTouchAction: function() {
var direction = this.options.direction;
var actions = [];
if (direction & DIRECTION_HORIZONTAL) {
actions.push(TOUCH_ACTION_PAN_Y);
}
if (direction & DIRECTION_VERTICAL) {
actions.push(TOUCH_ACTION_PAN_X);
}
return actions;
},

directionTest: function(input) {
var options = this.options;
var hasMoved = true;
var distance = input.distance;
var direction = input.direction;
var x = input.deltaX;
var y = input.deltaY;

if (!(direction & options.direction)) {
if (options.direction & DIRECTION_HORIZONTAL) {
direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
hasMoved = x != this.pX;
distance = Math.abs(input.deltaX);
} else {
direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
hasMoved = y != this.pY;
distance = Math.abs(input.deltaY);
}
}
input.direction = direction;
return hasMoved && distance > options.threshold && direction & options.direction;
},

attrTest: function(input) {
return AttrRecognizer.prototype.attrTest.call(this, input) &&
(this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
},

emit: function(input) {

this.pX = input.deltaX;
this.pY = input.deltaY;

var direction = directionStr(input.direction);

if (direction) {
input.additionalEvent = this.options.event + direction;
}
this._super.emit.call(this, input);
}
});

function PinchRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
defaults: {
event: 'pinch',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
},

emit: function(input) {
if (input.scale !== 1) {
var inOut = input.scale < 1 ? 'in' : 'out';
input.additionalEvent = this.options.event + inOut;
}
this._super.emit.call(this, input);
}
});

function PressRecognizer() {
Recognizer.apply(this, arguments);

this._timer = null;
this._input = null;
}

inherit(PressRecognizer, Recognizer, {
defaults: {
event: 'press',
pointers: 1,
time: 251, // minimal time of the pointer to be pressed
threshold: 9 // a minimal movement is ok, but keep it low
},

getTouchAction: function() {
return [TOUCH_ACTION_AUTO];
},

process: function(input) {
var options = this.options;
var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTime = input.deltaTime > options.time;

this._input = input;

if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
this.reset();
} else if (input.eventType & INPUT_START) {
this.reset();
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.time, this);
} else if (input.eventType & INPUT_END) {
return STATE_RECOGNIZED;
}
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function(input) {
if (this.state !== STATE_RECOGNIZED) {
return;
}

if (input && (input.eventType & INPUT_END)) {
this.manager.emit(this.options.event + 'up', input);
} else {
this._input.timeStamp = now();
this.manager.emit(this.options.event, this._input);
}
}
});

function RotateRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
defaults: {
event: 'rotate',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
}
});

function SwipeRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
defaults: {
event: 'swipe',
threshold: 10,
velocity: 0.3,
direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
pointers: 1
},

getTouchAction: function() {
return PanRecognizer.prototype.getTouchAction.call(this);
},

attrTest: function(input) {
var direction = this.options.direction;
var velocity;

if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
velocity = input.overallVelocity;
} else if (direction & DIRECTION_HORIZONTAL) {
velocity = input.overallVelocityX;
} else if (direction & DIRECTION_VERTICAL) {
velocity = input.overallVelocityY;
}

return this._super.attrTest.call(this, input) &&
direction & input.offsetDirection &&
input.distance > this.options.threshold &&
input.maxPointers == this.options.pointers &&
abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
},

emit: function(input) {
var direction = directionStr(input.offsetDirection);
if (direction) {
this.manager.emit(this.options.event + direction, input);
}

this.manager.emit(this.options.event, input);
}
});

function TapRecognizer() {
Recognizer.apply(this, arguments);

this.pTime = false;
this.pCenter = false;

this._timer = null;
this._input = null;
this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
defaults: {
event: 'tap',
pointers: 1,
taps: 1,
interval: 300, // max time between the multi-tap taps
time: 250, // max time of the pointer to be down (like finger on the screen)
threshold: 9, // a minimal movement is ok, but keep it low
posThreshold: 10 // a multi-tap can be a bit off the initial position
},

getTouchAction: function() {
return [TOUCH_ACTION_MANIPULATION];
},

process: function(input) {
var options = this.options;

var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTouchTime = input.deltaTime < options.time;

this.reset();

if ((input.eventType & INPUT_START) && (this.count === 0)) {
return this.failTimeout();
}

if (validMovement && validTouchTime && validPointers) {
if (input.eventType != INPUT_END) {
return this.failTimeout();
}

var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

this.pTime = input.timeStamp;
this.pCenter = input.center;

if (!validMultiTap || !validInterval) {
this.count = 1;
} else {
this.count += 1;
}

this._input = input;

var tapCount = this.count % options.taps;
if (tapCount === 0) {
if (!this.hasRequireFailures()) {
return STATE_RECOGNIZED;
} else {
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.interval, this);
return STATE_BEGAN;
}
}
}
return STATE_FAILED;
},

failTimeout: function() {
this._timer = setTimeoutContext(function() {
this.state = STATE_FAILED;
}, this.options.interval, this);
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function() {
if (this.state == STATE_RECOGNIZED) {
this._input.tapCount = this.count;
this.manager.emit(this.options.event, this._input);
}
}
});

function Hammer(element, options) {
options = options || {};
options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
return new Manager(element, options);
}

Hammer.VERSION = '2.0.7';

Hammer.defaults = {
domEvents: false,

touchAction: TOUCH_ACTION_COMPUTE,

enable: true,

inputTarget: null,

inputClass: null,

preset: [
[RotateRecognizer, {enable: false}],
[PinchRecognizer, {enable: false}, ['rotate']],
[SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
[PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
[TapRecognizer],
[TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
[PressRecognizer]
],

cssProps: {
userSelect: 'none',

touchSelect: 'none',

touchCallout: 'none',

contentZooming: 'none',

userDrag: 'none',

tapHighlightColor: 'rgba(0,0,0,0)'
}
};

var STOP = 1;
var FORCED_STOP = 2;

function Manager(element, options) {
this.options = assign({}, Hammer.defaults, options || {});

this.options.inputTarget = this.options.inputTarget || element;

this.handlers = {};
this.session = {};
this.recognizers = [];
this.oldCssProps = {};

this.element = element;
this.input = createInputInstance(this);
this.touchAction = new TouchAction(this, this.options.touchAction);

toggleCssProps(this, true);

each(this.options.recognizers, function(item) {
var recognizer = this.add(new (item[0])(item[1]));
item[2] && recognizer.recognizeWith(item[2]);
item[3] && recognizer.requireFailure(item[3]);
}, this);
}

Manager.prototype = {
set: function(options) {
assign(this.options, options);

if (options.touchAction) {
this.touchAction.update();
}
if (options.inputTarget) {
this.input.destroy();
this.input.target = options.inputTarget;
this.input.init();
}
return this;
},

stop: function(force) {
this.session.stopped = force ? FORCED_STOP : STOP;
},

recognize: function(inputData) {
var session = this.session;
if (session.stopped) {
return;
}

this.touchAction.preventDefaults(inputData);

var recognizer;
var recognizers = this.recognizers;

var curRecognizer = session.curRecognizer;

if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
curRecognizer = session.curRecognizer = null;
}

var i = 0;
while (i < recognizers.length) {
recognizer = recognizers[i];

if (session.stopped !== FORCED_STOP && ( // 1
!curRecognizer || recognizer == curRecognizer || // 2
recognizer.canRecognizeWith(curRecognizer))) { // 3
recognizer.recognize(inputData);
} else {
recognizer.reset();
}

if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
curRecognizer = session.curRecognizer = recognizer;
}
i++;
}
},

get: function(recognizer) {
if (recognizer instanceof Recognizer) {
return recognizer;
}

var recognizers = this.recognizers;
for (var i = 0; i < recognizers.length; i++) {
if (recognizers[i].options.event == recognizer) {
return recognizers[i];
}
}
return null;
},

add: function(recognizer) {
if (invokeArrayArg(recognizer, 'add', this)) {
return this;
}

var existing = this.get(recognizer.options.event);
if (existing) {
this.remove(existing);
}

this.recognizers.push(recognizer);
recognizer.manager = this;

this.touchAction.update();
return recognizer;
},

remove: function(recognizer) {
if (invokeArrayArg(recognizer, 'remove', this)) {
return this;
}

recognizer = this.get(recognizer);

if (recognizer) {
var recognizers = this.recognizers;
var index = inArray(recognizers, recognizer);

if (index !== -1) {
recognizers.splice(index, 1);
this.touchAction.update();
}
}

return this;
},

on: function(events, handler) {
if (events === undefined) {
return;
}
if (handler === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
handlers[event] = handlers[event] || [];
handlers[event].push(handler);
});
return this;
},

off: function(events, handler) {
if (events === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
if (!handler) {
delete handlers[event];
} else {
handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
}
});
return this;
},

emit: function(event, data) {
if (this.options.domEvents) {
triggerDomEvent(event, data);
}

var handlers = this.handlers[event] && this.handlers[event].slice();
if (!handlers || !handlers.length) {
return;
}

data.type = event;
data.preventDefault = function() {
data.srcEvent.preventDefault();
};

var i = 0;
while (i < handlers.length) {
handlers[i](data);
i++;
}
},

destroy: function() {
this.element && toggleCssProps(this, false);

this.handlers = {};
this.session = {};
this.input.destroy();
this.element = null;
}
};

function toggleCssProps(manager, add) {
var element = manager.element;
if (!element.style) {
return;
}
var prop;
each(manager.options.cssProps, function(value, name) {
prop = prefixed(element.style, name);
if (add) {
manager.oldCssProps[prop] = element.style[prop];
element.style[prop] = value;
} else {
element.style[prop] = manager.oldCssProps[prop] || '';
}
});
if (!add) {
manager.oldCssProps = {};
}
}

function triggerDomEvent(event, data) {
var gestureEvent = document.createEvent('Event');
gestureEvent.initEvent(event, true, true);
gestureEvent.gesture = data;
data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
INPUT_START: INPUT_START,
INPUT_MOVE: INPUT_MOVE,
INPUT_END: INPUT_END,
INPUT_CANCEL: INPUT_CANCEL,

STATE_POSSIBLE: STATE_POSSIBLE,
STATE_BEGAN: STATE_BEGAN,
STATE_CHANGED: STATE_CHANGED,
STATE_ENDED: STATE_ENDED,
STATE_RECOGNIZED: STATE_RECOGNIZED,
STATE_CANCELLED: STATE_CANCELLED,
STATE_FAILED: STATE_FAILED,

DIRECTION_NONE: DIRECTION_NONE,
DIRECTION_LEFT: DIRECTION_LEFT,
DIRECTION_RIGHT: DIRECTION_RIGHT,
DIRECTION_UP: DIRECTION_UP,
DIRECTION_DOWN: DIRECTION_DOWN,
DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
DIRECTION_VERTICAL: DIRECTION_VERTICAL,
DIRECTION_ALL: DIRECTION_ALL,

Manager: Manager,
Input: Input,
TouchAction: TouchAction,

TouchInput: TouchInput,
MouseInput: MouseInput,
PointerEventInput: PointerEventInput,
TouchMouseInput: TouchMouseInput,
SingleTouchInput: SingleTouchInput,

Recognizer: Recognizer,
AttrRecognizer: AttrRecognizer,
Tap: TapRecognizer,
Pan: PanRecognizer,
Swipe: SwipeRecognizer,
Pinch: PinchRecognizer,
Rotate: RotateRecognizer,
Press: PressRecognizer,

on: addEventListeners,
off: removeEventListeners,
each: each,
merge: merge,
extend: extend,
assign: assign,
inherit: inherit,
bindFn: bindFn,
prefixed: prefixed
});

var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (typeof define === 'function' && define.amd) {
define(function() {
return Hammer;
});
} else if (typeof module != 'undefined' && module.exports) {
module.exports = Hammer;
} else {
window[exportName] = Hammer;
}

})(window, document, 'Hammer');

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/

/*****  ******************************************************************
*
* Copyright 2008-2013 Hannes Hochreiner
*
* The JavaScript code included between the start note '@jessyinkstart'
* and the end note '@jessyinkend' is subject to the terms of the Mozilla
* Public License, v. 2.0. If a copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Alternatively, you can redistribute and/or that part of this file
* under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see http://www.gnu.org/licenses/.
*/

/*****
*  You can find the complete source code of the JessyInk project at:
*  @source http://code.google.com/p/jessyink/
*/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/


/*****
* @jessyinkstart
*
*  The following code is a derivative work of some parts of the JessyInk
*  project.
*  @source http://code.google.com/p/jessyink/
*/

function getElementsByProperty( node, name )
{
var elements = [];

if( node.getAttribute( name ) )
elements.push( node );

for( var counter = 0; counter < node.childNodes.length; ++counter )
{
if( node.childNodes[counter].nodeType == 1 )
{
var subElements = getElementsByProperty( node.childNodes[counter], name );
elements = elements.concat( subElements );
}
}
return elements;
}

function onKeyDown( aEvt )
{
if ( !aEvt )
aEvt = window.event;

var code = aEvt.keyCode || aEvt.charCode;


if (code == 0 && aEvt.key != undefined) {
switch (aEvt.key) {
case 'UIKeyInputLeftArrow':
code = LEFT_KEY;
break;
case 'UIKeyInputUpArrow':
code = UP_KEY;
break;
case 'UIKeyInputRightArrow':
code = RIGHT_KEY;
break;
case 'UIKeyInputDownArrow':
code = DOWN_KEY;
break;
}

}

if( !processingEffect && keyCodeDictionary[currentMode] && keyCodeDictionary[currentMode][code] )
{
return keyCodeDictionary[currentMode][code]();
}
else
{
document.onkeypress = onKeyPress;
return null;
}
}
document.onkeydown = onKeyDown;

function onKeyPress( aEvt )
{
document.onkeypress = null;

if ( !aEvt )
aEvt = window.event;

var str = String.fromCharCode( aEvt.keyCode || aEvt.charCode );

if ( !processingEffect && charCodeDictionary[currentMode] && charCodeDictionary[currentMode][str] )
return charCodeDictionary[currentMode][str]();

return null;
}

function getDefaultKeyCodeDictionary()
{
var keyCodeDict = {};

keyCodeDict[SLIDE_MODE] = {};
keyCodeDict[INDEX_MODE] = {};

keyCodeDict[SLIDE_MODE][LEFT_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][RIGHT_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][UP_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][DOWN_KEY]
= function() { return skipEffects(1); };
keyCodeDict[SLIDE_MODE][PAGE_UP_KEY]
= function() { return aSlideShow.rewindAllEffects(); };
keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY]
= function() { return skipAllEffects(); };
keyCodeDict[SLIDE_MODE][HOME_KEY]
= function() { return aSlideShow.displaySlide( 0, true ); };
keyCodeDict[SLIDE_MODE][END_KEY]
= function() { return aSlideShow.displaySlide( theMetaDoc.nNumberOfSlides - 1, true ); };
keyCodeDict[SLIDE_MODE][SPACE_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][ESCAPE_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };
keyCodeDict[SLIDE_MODE][Q_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };

keyCodeDict[INDEX_MODE][LEFT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - 1 ); };
keyCodeDict[INDEX_MODE][RIGHT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + 1 ); };
keyCodeDict[INDEX_MODE][UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][PAGE_UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][HOME_KEY]
= function() { return indexSetPageSlide( 0 ); };
keyCodeDict[INDEX_MODE][END_KEY]
= function() { return indexSetPageSlide( theMetaDoc.nNumberOfSlides - 1 ); };
keyCodeDict[INDEX_MODE][ENTER_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][SPACE_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][ESCAPE_KEY]
= function() { return abandonIndexMode(); };

return keyCodeDict;
}

function getDefaultCharCodeDictionary()
{
var charCodeDict = {};

charCodeDict[SLIDE_MODE] = {};
charCodeDict[INDEX_MODE] = {};

charCodeDict[SLIDE_MODE]['i']
= function () { return toggleSlideIndex(); };

charCodeDict[INDEX_MODE]['i']
= function () { return toggleSlideIndex(); };
charCodeDict[INDEX_MODE]['-']
= function () { return theSlideIndexPage.decreaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['=']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['+']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['0']
= function () { return theSlideIndexPage.resetNumberOfColumns(); };

return charCodeDict;
}


function slideOnMouseUp( aEvt )
{
if (!aEvt)
aEvt = window.event;

var nOffset = 0;

if( aEvt.button == 0 )
nOffset = 1;
else if( aEvt.button == 2 )
nOffset = -1;

if( 0 != nOffset )
dispatchEffects( nOffset );
return true; // the click has been handled
}

document.handleClick = slideOnMouseUp;


function slideOnMouseWheel(aEvt)
{
var delta = 0;

if (!aEvt)
aEvt = window.event;

if (aEvt.wheelDelta)
{ // IE Opera
delta = aEvt.wheelDelta/120;
}
else if (aEvt.detail)
{ // MOZ
delta = -aEvt.detail/3;
}

if (delta > 0)
skipEffects(-1);
else if (delta < 0)
skipEffects(1);

if (aEvt.preventDefault)
aEvt.preventDefault();

aEvt.returnValue = false;
}

if( window.addEventListener )
{
window.addEventListener( 'DOMMouseScroll', function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); }, false );
}

window.onmousewheel
= function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); };

function mouseHandlerDispatch( aEvt, anAction )
{
if( !aEvt )
aEvt = window.event;

var retVal = true;

if ( mouseHandlerDictionary[currentMode] && mouseHandlerDictionary[currentMode][anAction] )
{
var subRetVal = mouseHandlerDictionary[currentMode][anAction]( aEvt );

if( subRetVal != null && subRetVal != undefined )
retVal = subRetVal;
}

if( aEvt.preventDefault && !retVal )
aEvt.preventDefault();

aEvt.returnValue = retVal;

return retVal;
}

document.onmouseup = function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_UP ); };


function mouseClickHelper( aEvt )
{
if( !Detect.isMozilla )
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
var aTextSelection = aWindowObject.getSelection();
var sSelectedText =  aTextSelection.toString();
if( sSelectedText )
{
DBGLOG( 'text selection: ' + sSelectedText );
if( sLastSelectedText !== sSelectedText )
{
bTextHasBeenSelected = true;
sLastSelectedText = sSelectedText;
}
else
{
bTextHasBeenSelected = false;
}
return null;
}
else if( bTextHasBeenSelected )
{
bTextHasBeenSelected = false;
sLastSelectedText = '';
return null;
}
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

var aSlideAnimationsHandler = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler;
if( aSlideAnimationsHandler )
{
var aCurrentEventMultiplexer = aSlideAnimationsHandler.aEventMultiplexer;
if( aCurrentEventMultiplexer )
{
if( aCurrentEventMultiplexer.hasRegisteredMouseClickHandlers() )
{
return aCurrentEventMultiplexer.notifyMouseClick( aEvt );
}
}
}
return slideOnMouseUp( aEvt );
}


function getDefaultMouseHandlerDictionary()
{
var mouseHandlerDict = {};

mouseHandlerDict[SLIDE_MODE] = {};
mouseHandlerDict[INDEX_MODE] = {};

mouseHandlerDict[SLIDE_MODE][MOUSE_UP]
= mouseClickHelper;

mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL]
= function( aEvt ) { return slideOnMouseWheel( aEvt ); };

mouseHandlerDict[INDEX_MODE][MOUSE_UP]
= function( ) { return toggleSlideIndex(); };

return mouseHandlerDict;
}

function indexSetPageSlide( nIndex )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
nIndex = getSafeIndex( nIndex, 0, aMetaSlideSet.length - 1 );

var nSelectedThumbnailIndex = nIndex % theSlideIndexPage.getTotalThumbnails();
var offset = nIndex - nSelectedThumbnailIndex;

if( offset < 0 )
offset = 0;

if( offset != INDEX_OFFSET )
{
INDEX_OFFSET = offset;
displayIndex( INDEX_OFFSET );
}

theSlideIndexPage.setSelection( nSelectedThumbnailIndex );
}


/*****
* @jessyinkend
*
*  The above code is a derivative work of some parts of the JessyInk project.
*  @source http://code.google.com/p/jessyink/
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/

/*****  **********************************************************************
*
*  The 'New' BSD License:
*  **********************
*  Copyright (c) 2005-2012, The Dojo Foundation
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*    * Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*    * Neither the name of the Dojo Foundation nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/


/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/


/*****
* @dojostart
*
*  The following code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

function has( name )
{
return has.cache[name];
}

has.cache = {};

has.add = function( name, test )
{
has.cache[name] = test;
};

function configureDetectionTools()
{
if( !navigator )
{
log( 'error: configureDetectionTools: configuration failed' );
return null;
}

var n = navigator,
dua = n.userAgent,
dav = n.appVersion,
tv = parseFloat(dav);

has.add('air', dua.indexOf('AdobeAIR') >= 0);
has.add('khtml', dav.indexOf('Konqueror') >= 0 ? tv : undefined);
has.add('webkit', parseFloat(dua.split('WebKit/')[1]) || undefined);
has.add('chrome', parseFloat(dua.split('Chrome/')[1]) || undefined);
has.add('safari', dav.indexOf('Safari')>=0 && !has('chrome') ? parseFloat(dav.split('Version/')[1]) : undefined);
has.add('mac', dav.indexOf('Macintosh') >= 0);
has.add('quirks', document.compatMode == 'BackCompat');
has.add('ios', /iPhone|iPod|iPad/.test(dua));
has.add('android', parseFloat(dua.split('Android ')[1]) || undefined);

if(!has('webkit')){
if(dua.indexOf('Opera') >= 0){
has.add('opera', tv >= 9.8 ? parseFloat(dua.split('Version/')[1]) || tv : tv);
}

if(dua.indexOf('Gecko') >= 0 && !has('khtml') && !has('webkit')){
has.add('mozilla', tv);
}
if(has('mozilla')){
has.add('ff', parseFloat(dua.split('Firefox/')[1] || dua.split('Minefield/')[1]) || undefined);
}

if(document.all && !has('opera')){
var isIE = parseFloat(dav.split('MSIE ')[1]) || undefined;

var mode = document.documentMode;
if(mode && mode != 5 && Math.floor(isIE) != mode){
isIE = mode;
}

has.add('ie', isIE);
}

has.add('wii', typeof opera != 'undefined' && opera.wiiremote);
}

var detect =
{
isFF: has('ff'),

isIE: has('ie'),

isKhtml: has('khtml'),

isWebKit: has('webkit'),

isMozilla: has('mozilla'),
isMoz: has('mozilla'),

isOpera: has('opera'),

isSafari: has('safari'),

isChrome: has('chrome'),

isMac: has('mac'),

isIos: has('ios'),

isAndroid: has('android'),

isWii: has('wii'),

isQuirks: has('quirks'),

isAir: has('air')
};
return detect;
}

/*****
* @dojoend
*
*  The above code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/

/*****  **********************************************************************
*
*   Copyright 2015 The Chromium Authors. All rights reserved.
*
*   The Chromium Authors can be found at
*   http://src.chromium.org/svn/trunk/src/AUTHORS
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions are
*   met:
*
*   * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*   copyright notice, this list of conditions and the following disclaimer
*   in the documentation and/or other materials provided with the
*   distribution.
*   * Neither the name of Google Inc. nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*   'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/


/*****
* @svgpathstart
*
*  The following code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/

(function() { 'use strict';
if (!('SVGPathSeg' in window)) {
window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
this.pathSegType = type;
this.pathSegTypeAsLetter = typeAsLetter;
this._owningPathSegList = owningPathSegList;
}

window.SVGPathSeg.prototype.classname = 'SVGPathSeg';

window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
window.SVGPathSeg.PATHSEG_ARC_REL = 11;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

window.SVGPathSeg.prototype._segmentChanged = function() {
if (this._owningPathSegList)
this._owningPathSegList.segmentChanged(this);
}

window.SVGPathSegClosePath = function(owningPathSegList) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);
}
window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegClosePath.prototype.toString = function() { return '[object SVGPathSegClosePath]'; }
window.SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; }
window.SVGPathSegClosePath.prototype.clone = function() { return new window.SVGPathSegClosePath(undefined); }

window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoAbs.prototype.toString = function() { return '[object SVGPathSegMovetoAbs]'; }
window.SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoAbs.prototype.clone = function() { return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoRel.prototype.toString = function() { return '[object SVGPathSegMovetoRel]'; }
window.SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoRel.prototype.clone = function() { return new window.SVGPathSegMovetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoAbs.prototype.toString = function() { return '[object SVGPathSegLinetoAbs]'; }
window.SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoAbs.prototype.clone = function() { return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoRel.prototype.toString = function() { return '[object SVGPathSegLinetoRel]'; }
window.SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoRel.prototype.clone = function() { return new window.SVGPathSegLinetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicAbs]'; }
window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicRel]'; }
window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticAbs]'; }
window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticRel]'; }
window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcAbs.prototype.toString = function() { return '[object SVGPathSegArcAbs]'; }
window.SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcAbs.prototype.clone = function() { return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcRel.prototype.toString = function() { return '[object SVGPathSegArcRel]'; }
window.SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcRel.prototype.clone = function() { return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalAbs]'; }
window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalRel]'; }
window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalAbs]'; }
window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalRel.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalRel]'; }
window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalRel(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothAbs]'; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothRel]'; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothAbs]'; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothRel]'; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new window.SVGPathSegClosePath(undefined); }
window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new window.SVGPathSegMovetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new window.SVGPathSegMovetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new window.SVGPathSegLinetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new window.SVGPathSegLinetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new window.SVGPathSegLinetoHorizontalAbs(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new window.SVGPathSegLinetoHorizontalRel(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new window.SVGPathSegLinetoVerticalAbs(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new window.SVGPathSegLinetoVerticalRel(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); }

if (!('getPathSegAtLength' in window.SVGPathElement.prototype)) {
window.SVGPathElement.prototype.getPathSegAtLength = function(distance) {
if (distance === undefined || !isFinite(distance))
throw 'Invalid arguments.';

var measurementElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');
measurementElement.setAttribute('d', this.getAttribute('d'));
var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;

if (lastPathSegment <= 0)
return 0;

do {
measurementElement.pathSegList.removeItem(lastPathSegment);
if (distance > measurementElement.getTotalLength())
break;
lastPathSegment--;
} while (lastPathSegment > 0);
return lastPathSegment;
}
}
}

if (!('SVGPathSegList' in window) || !('appendItem' in window.SVGPathSegList.prototype)) {
window.SVGPathSegList = function(pathElement) {
this._pathElement = pathElement;
this._list = this._parsePath(this._pathElement.getAttribute('d'));

this._mutationObserverConfig = { 'attributes': true, 'attributeFilter': ['d'] };
this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.classname = 'SVGPathSegList';

Object.defineProperty(window.SVGPathSegList.prototype, 'numberOfItems', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathSegList.prototype, 'length', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathElement.prototype, 'pathSegList', {
get: function() {
if (!this._pathSegList)
this._pathSegList = new window.SVGPathSegList(this);
return this._pathSegList;
},
enumerable: true
});
Object.defineProperty(window.SVGPathElement.prototype, 'normalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedNormalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });

window.SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
}

window.SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
if (!this._pathElement)
return;
var hasPathMutations = false;
mutationRecords.forEach(function(record) {
if (record.attributeName == 'd')
hasPathMutations = true;
});
if (hasPathMutations)
this._list = this._parsePath(this._pathElement.getAttribute('d'));
}

window.SVGPathSegList.prototype._writeListToPath = function() {
this._pathElementMutationObserver.disconnect();
this._pathElement.setAttribute('d', window.SVGPathSegList._pathSegArrayAsString(this._list));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.segmentChanged = function(pathSeg) {
this._writeListToPath();
}

window.SVGPathSegList.prototype.clear = function() {
this._checkPathSynchronizedToList();

this._list.forEach(function(pathSeg) {
pathSeg._owningPathSegList = null;
});
this._list = [];
this._writeListToPath();
}

window.SVGPathSegList.prototype.initialize = function(newItem) {
this._checkPathSynchronizedToList();

this._list = [newItem];
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype._checkValidIndex = function(index) {
if (isNaN(index) || index < 0 || index >= this.numberOfItems)
throw 'INDEX_SIZE_ERR';
}

window.SVGPathSegList.prototype.getItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
return this._list[index];
}

window.SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
this._checkPathSynchronizedToList();

if (index > this.numberOfItems)
index = this.numberOfItems;
if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.splice(index, 0, newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.replaceItem = function(newItem, index) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._checkValidIndex(index);
this._list[index] = newItem;
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.removeItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
var item = this._list[index];
this._list.splice(index, 1);
this._writeListToPath();
return item;
}

window.SVGPathSegList.prototype.appendItem = function(newItem) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.push(newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

window.SVGPathSegList.prototype.matrixTransform = function(aSVGMatrix) {
this._checkPathSynchronizedToList();

var nLength = this._list.length;
for( var i = 0; i < nLength; ++i )
{
var nX;
var aPathSeg = this._list[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
nX = aPathSeg._x2;
aPathSeg._x2 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y2 + aSVGMatrix.e;
aPathSeg._y2 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y2 + aSVGMatrix.f;
case 'Q':
nX = aPathSeg._x1;
aPathSeg._x1 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y1 + aSVGMatrix.e;
aPathSeg._y1 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y1 + aSVGMatrix.f;
case 'M':
case 'L':
nX = aPathSeg._x;
aPathSeg._x = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y + aSVGMatrix.e;
aPathSeg._y = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y + aSVGMatrix.f;
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}
}

this._writeListToPath();
};

window.SVGPathSegList.prototype.changeOrientation = function() {
this._checkPathSynchronizedToList();

var aPathSegList = this._list;
var nLength = aPathSegList.length;
if( nLength == 0 ) return;

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList[0];
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.shift();
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
var nX = aPathSeg._x1;
aPathSeg._x1 = aPathSeg._x2;
aPathSeg._x2 = nX;
var nY = aPathSeg._y1;
aPathSeg._y1 = aPathSeg._y2;
aPathSeg._y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: aPathSeg._x, y: aPathSeg._y };
aPathSeg._x = nCurrentX;
aPathSeg._y = nCurrentY;
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
break;
default:
log( 'SVGPathSegList.changeOrientation: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}

}

aPathSegList.reverse();

var aMovePathSeg = new window.SVGPathSegMovetoAbs( this, nCurrentX, nCurrentY );
aPathSegList.unshift( aMovePathSeg );

this._writeListToPath();
};

window.SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
var string = '';
var first = true;
pathSegArray.forEach(function(pathSeg) {
if (first) {
first = false;
string += pathSeg._asPathString();
} else {
string += ' ' + pathSeg._asPathString();
}
});
return string;
}

window.SVGPathSegList.prototype._parsePath = function(string) {
if (!string || string.length == 0)
return [];

var owningPathSegList = this;

var Builder = function() {
this.pathSegList = [];
}

Builder.prototype.appendSegment = function(pathSeg) {
this.pathSegList.push(pathSeg);
}

var Source = function(string) {
this._string = string;
this._currentIndex = 0;
this._endIndex = this._string.length;
this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;

this._skipOptionalSpaces();
}

Source.prototype._isCurrentSpace = function() {
var character = this._string[this._currentIndex];
return character <= ' ' && (character == ' ' || character == '\n' || character == '\t' || character == '\r' || character == '\f');
}

Source.prototype._skipOptionalSpaces = function() {
while (this._currentIndex < this._endIndex && this._isCurrentSpace())
this._currentIndex++;
return this._currentIndex < this._endIndex;
}

Source.prototype._skipOptionalSpacesOrDelimiter = function() {
if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ',')
return false;
if (this._skipOptionalSpaces()) {
if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ',') {
this._currentIndex++;
this._skipOptionalSpaces();
}
}
return this._currentIndex < this._endIndex;
}

Source.prototype.hasMoreData = function() {
return this._currentIndex < this._endIndex;
}

Source.prototype.peekSegmentType = function() {
var lookahead = this._string[this._currentIndex];
return this._pathSegTypeFromChar(lookahead);
}

Source.prototype._pathSegTypeFromChar = function(lookahead) {
switch (lookahead) {
case 'Z':
case 'z':
return window.SVGPathSeg.PATHSEG_CLOSEPATH;
case 'M':
return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
case 'm':
return window.SVGPathSeg.PATHSEG_MOVETO_REL;
case 'L':
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
case 'l':
return window.SVGPathSeg.PATHSEG_LINETO_REL;
case 'C':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
case 'c':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
case 'Q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
case 'q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
case 'A':
return window.SVGPathSeg.PATHSEG_ARC_ABS;
case 'a':
return window.SVGPathSeg.PATHSEG_ARC_REL;
case 'H':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
case 'h':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
case 'V':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
case 'v':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
case 'S':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
case 's':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
case 'T':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
case 't':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
default:
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}
}

Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
if ((lookahead == '+' || lookahead == '-' || lookahead == '.' || (lookahead >= '0' && lookahead <= '9')) && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)
return window.SVGPathSeg.PATHSEG_LINETO_REL;
return previousCommand;
}
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}

Source.prototype.initialCommandIsMoveTo = function() {
if (!this.hasMoreData())
return true;
var command = this.peekSegmentType();
return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
}

Source.prototype._parseNumber = function() {
var exponent = 0;
var integer = 0;
var frac = 1;
var decimal = 0;
var sign = 1;
var expsign = 1;

var startIndex = this._currentIndex;

this._skipOptionalSpaces();

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '+')
this._currentIndex++;
else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
sign = -1;
}

if (this._currentIndex == this._endIndex || ((this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9') && this._string.charAt(this._currentIndex) != '.'))
return undefined;

var startIntPartIndex = this._currentIndex;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9')
this._currentIndex++; // Advance to first non-digit.

if (this._currentIndex != startIntPartIndex) {
var scanIntPartIndex = this._currentIndex - 1;
var multiplier = 1;
while (scanIntPartIndex >= startIntPartIndex) {
integer += multiplier * (this._string.charAt(scanIntPartIndex--) - '0');
multiplier *= 10;
}
}

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '.') {
this._currentIndex++;

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
frac *= 10;
decimal += (this._string.charAt(this._currentIndex) - '0') / frac;
this._currentIndex += 1;
}
}

if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == 'e' || this._string.charAt(this._currentIndex) == 'E') && (this._string.charAt(this._currentIndex + 1) != 'x' && this._string.charAt(this._currentIndex + 1) != 'm')) {
this._currentIndex++;

if (this._string.charAt(this._currentIndex) == '+') {
this._currentIndex++;
} else if (this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
expsign = -1;
}

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;

while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
exponent *= 10;
exponent += (this._string.charAt(this._currentIndex) - '0');
this._currentIndex++;
}
}

var number = integer + decimal;
number *= sign;

if (exponent)
number *= Math.pow(10, expsign * exponent);

if (startIndex == this._currentIndex)
return undefined;

this._skipOptionalSpacesOrDelimiter();

return number;
}

Source.prototype._parseArcFlag = function() {
if (this._currentIndex >= this._endIndex)
return undefined;
var flag = false;
var flagChar = this._string.charAt(this._currentIndex++);
if (flagChar == '0')
flag = false;
else if (flagChar == '1')
flag = true;
else
return undefined;

this._skipOptionalSpacesOrDelimiter();
return flag;
}

Source.prototype.parseSegment = function() {
var lookahead = this._string[this._currentIndex];
var command = this._pathSegTypeFromChar(lookahead);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
command = this._nextCommandHelper(lookahead, this._previousCommand);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
} else {
this._currentIndex++;
}

this._previousCommand = command;

switch (command) {
case window.SVGPathSeg.PATHSEG_MOVETO_REL:
return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_REL:
return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_ABS:
return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_CLOSEPATH:
this._skipOptionalSpaces();
return new window.SVGPathSegClosePath(owningPathSegList);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_ARC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
case window.SVGPathSeg.PATHSEG_ARC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
default:
throw 'Unknown path seg type.'
}
}

var builder = new Builder();
var source = new Source(string);

if (!source.initialCommandIsMoveTo())
return [];
while (source.hasMoreData()) {
var pathSeg = source.parseSegment();
if (!pathSeg)
return [];
builder.appendSegment(pathSeg);
}

return builder.pathSegList;
}
}
}());

/*****
* @svgpathend
*
*  The above code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/

/*****  ******************************************************************
*
* This file is part of the LibreOffice project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* This file incorporates work covered by the following license notice:
*
*   Licensed to the Apache Software Foundation (ASF) under one or more
*   contributor license agreements. See the NOTICE file distributed
*   with this work for additional information regarding copyright
*   ownership. The ASF licenses this file to you under the Apache
*   License, Version 2.0 (the 'License'); you may not use this file
*   except in compliance with the License. You may obtain a copy of
*   the License at http://www.apache.org/licenses/LICENSE-2.0 .
*
************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/


/*****
* @libreofficestart
*
* Several parts of the following code are the result of the porting,
* started on August 2011, of the C++ code included in the source
* files placed under the folder '/slideshow/source' and
* sub-folders. This got later rebased onto the AL2-licensed versions
* of those files in early 2013.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/


window.onload = init;


var aOOOElemMetaSlides = 'ooo:meta_slides';
var aOOOElemMetaSlide = 'ooo:meta_slide';
var aOOOElemTextField = 'ooo:text_field';
var aPresentationClipPathId = 'presentation_clip_path';
var aPresentationClipPathShrinkId = 'presentation_clip_path_shrink';

var aOOOAttrNumberOfSlides = 'number-of-slides';
var aOOOAttrStartSlideNumber= 'start-slide-number';
var aOOOAttrNumberingType = 'page-numbering-type';
var aOOOAttrListItemNumberingType= 'numbering-type';
var aOOOAttrUsePositionedChars = 'use-positioned-chars';

var aOOOAttrSlide = 'slide';
var aOOOAttrMaster = 'master';
var aOOOAttrSlideDuration = 'slide-duration';
var aOOOAttrHasTransition = 'has-transition';
var aOOOAttrBackgroundVisibility = 'background-visibility';
var aOOOAttrMasterObjectsVisibility = 'master-objects-visibility';
var aOOOAttrPageNumberVisibility = 'page-number-visibility';
var aOOOAttrDateTimeVisibility = 'date-time-visibility';
var aOOOAttrFooterVisibility = 'footer-visibility';
var aOOOAttrHeaderVisibility = 'header-visibility';
var aOOOAttrDateTimeField = 'date-time-field';
var aOOOAttrFooterField = 'footer-field';
var aOOOAttrHeaderField = 'header-field';

var aOOOAttrDateTimeFormat = 'date-time-format';

var aOOOAttrTextAdjust = 'text-adjust';

var aClipPathGroupClassName = 'ClipPathGroup';
var aPageClassName = 'Page';
var aSlideNumberClassName = 'Slide_Number';
var aDateTimeClassName = 'Date/Time';
var aFooterClassName = 'Footer';
var aHeaderClassName = 'Header';

var NSS = {};
NSS['svg']='http://www.w3.org/2000/svg';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['ooo'] = 'http://xml.openoffice.org/svg/export';
NSS['presentation'] = 'http://sun.com/xmlns/staroffice/presentation';
NSS['smil'] = 'http://www.w3.org/2001/SMIL20/';
NSS['anim'] = 'urn:oasis:names:tc:opendocument:xmlns:animation:1.0';

var SLIDE_MODE = 1;
var INDEX_MODE = 2;

var MOUSE_UP = 1;
var MOUSE_DOWN = 2; // eslint-disable-line no-unused-vars
var MOUSE_MOVE = 3; // eslint-disable-line no-unused-vars
var MOUSE_WHEEL = 4;

var LEFT_KEY = 37;          // cursor left keycode
var UP_KEY = 38;            // cursor up keycode
var RIGHT_KEY = 39;         // cursor right keycode
var DOWN_KEY = 40;          // cursor down keycode
var PAGE_UP_KEY = 33;       // page up keycode
var PAGE_DOWN_KEY = 34;     // page down keycode
var HOME_KEY = 36;          // home keycode
var END_KEY = 35;           // end keycode
var ENTER_KEY = 13;
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;
var Q_KEY = 81;

var HIDDEN = 0;
var VISIBLE = 1;
var INHERIT = 2;
var aVisibilityAttributeValue = [ 'hidden', 'visible', 'inherit' ];  // eslint-disable-line no-unused-vars
var aVisibilityValue = { 'hidden' : HIDDEN, 'visible' : VISIBLE, 'inherit' : INHERIT };

var ROOT_NODE = document.getElementsByTagNameNS( NSS['svg'], 'svg' )[0];
var WIDTH = 0;
var HEIGHT = 0;
var INDEX_COLUMNS_DEFAULT = 3;
var INDEX_OFFSET = 0;

var Detect = configureDetectionTools();
var theMetaDoc;
var theSlideIndexPage;
var currentMode = SLIDE_MODE;
var processingEffect = false;
var nCurSlide = undefined;
var bTextHasBeenSelected = false;
var sLastSelectedText = '';


var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();


function object( aObject )
{
var F = function() {};
F.prototype = aObject;
return new F();
}


function extend( aSubType, aSuperType )
{
if (!aSuperType || !aSubType)
{
alert('extend failed, verify dependencies');
}
var OP = Object.prototype;
var sp = aSuperType.prototype;
var rp = object( sp );
aSubType.prototype = rp;

rp.constructor = aSubType;
aSubType.superclass = sp;

if (aSuperType != Object && sp.constructor == OP.constructor)
{
sp.constructor = aSuperType;
}

return aSubType;
}


function instantiate( TemplateClass, BaseType )
{
if( !TemplateClass.instanceSet )
TemplateClass.instanceSet = [];

var nSize = TemplateClass.instanceSet.length;

for( var i = 0; i < nSize; ++i )
{
if( TemplateClass.instanceSet[i].base === BaseType )
return TemplateClass.instanceSet[i].instance;
}

TemplateClass.instanceSet[ nSize ] = {};
TemplateClass.instanceSet[ nSize ].base = BaseType;
TemplateClass.instanceSet[ nSize ].instance = TemplateClass( BaseType );

return TemplateClass.instanceSet[ nSize ].instance;
}


function Rectangle( aSVGRectElem )
{
var x = parseInt( aSVGRectElem.getAttribute( 'x' ) );
var y = parseInt( aSVGRectElem.getAttribute( 'y' ) );
var width = parseInt( aSVGRectElem.getAttribute( 'width' ) );
var height = parseInt( aSVGRectElem.getAttribute( 'height' ) );

this.left = x;
this.right = x + width;
this.top = y;
this.bottom = y + height;
}

function getKeyByValue(aObj, value) {
for(var key in aObj) {
if(aObj[key] == value)
return key;
}
return null;
}

function log( message )
{
if( typeof console == 'object' )
{
console.log( message );
}
else if( typeof opera == 'object' )
{
opera.postError( message );
}
else if( typeof java == 'object' && typeof java.lang == 'object' )
{
java.lang.System.out.println( message );
}
}

function getNSAttribute( sNSPrefix, aElem, sAttrName )
{
if( !aElem ) return null;
if( 'getAttributeNS' in aElem )
{
return aElem.getAttributeNS( NSS[sNSPrefix], sAttrName );
}
else
{
return aElem.getAttribute( sNSPrefix + ':' + sAttrName );
}
}

function getOOOAttribute( aElem, sAttrName )
{
return getNSAttribute( 'ooo', aElem, sAttrName );
}

function setNSAttribute( sNSPrefix, aElem, sAttrName, aValue )
{
if( !aElem ) return false;
if( 'setAttributeNS' in aElem )
{
aElem.setAttributeNS( NSS[sNSPrefix], sAttrName, aValue );
return true;
}
else
{
aElem.setAttribute(sNSPrefix + ':' + sAttrName, aValue );
return true;
}
}

function getElementsByClassName( aElem, sClassName )
{

var aElementSet = [];
if( 'getElementsByClassName' in aElem )
{
aElementSet = aElem.getElementsByClassName( sClassName );
}
else
{
var aElementSetByClassProperty = getElementsByProperty( aElem, 'class' );
for( var i = 0; i < aElementSetByClassProperty.length; ++i )
{
var sAttrClassName = aElementSetByClassProperty[i].getAttribute( 'class' );
if( sAttrClassName == sClassName )
{
aElementSet.push( aElementSetByClassProperty[i] );
}
}
}
return aElementSet;
}

function getElementByClassName( aElem, sClassName /*, sTagName */)
{
var aElementSet = getElementsByClassName( aElem, sClassName );
if ( aElementSet.length == 1 )
return aElementSet[0];
else
return null;
}

function getClassAttribute(  aElem )
{
if( aElem )
return aElem.getAttribute( 'class' );
return '';
}

function createElementGroup( aParentElement, aElementList, nFrom, nCount, sGroupClass, sGroupId )
{
var nTo = nFrom + nCount;
if( nCount < 1 || aElementList.length < nTo )
{
log( 'createElementGroup: not enough elements available.' );
return;
}
var firstElement = aElementList[nFrom];
if( !firstElement )
{
log( 'createElementGroup: element not found.' );
return;
}
var aGroupElement = document.createElementNS( NSS['svg'], 'g' );
if( sGroupId )
aGroupElement.setAttribute( 'id', sGroupId );
if( sGroupClass )
aGroupElement.setAttribute( 'class', sGroupClass );
aParentElement.insertBefore( aGroupElement, firstElement );
var i = nFrom;
for( ; i < nTo; ++i )
{
aParentElement.removeChild( aElementList[i] );
aGroupElement.appendChild( aElementList[i] );
}
}

function initVisibilityProperty( aElement )
{
var nVisibility = VISIBLE;
var sVisibility = aElement.getAttribute( 'visibility' );
if( sVisibility ) nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
}

function getSafeIndex( nIndex, nMin, nMax )
{
if( nIndex < nMin )
return nMin;
else if( nIndex > nMax )
return nMax;
else
return nIndex;
}

function getRandomInt( nMax )
{
return Math.floor( Math.random() * nMax );
}

function isTextFieldElement( aElement ) // eslint-disable-line no-unused-vars
{
var sClassName = aElement.getAttribute( 'class' );
return ( sClassName === aSlideNumberClassName ) ||
( sClassName === aFooterClassName ) ||
( sClassName === aHeaderClassName ) ||
( sClassName === aDateTimeClassName );
}


function DebugPrinter()
{
this.bEnabled = false;
}


DebugPrinter.prototype.on = function()
{
this.bEnabled = true;
};

DebugPrinter.prototype.off = function()
{
this.bEnabled = false;
};

DebugPrinter.prototype.isEnabled = function()
{
return this.bEnabled;
};

DebugPrinter.prototype.print = function( sMessage, nTime )
{
if( this.isEnabled() )
{
var sInfo = 'DBG: ' + sMessage;
if( nTime )
sInfo += ' (at: ' + String( nTime / 1000 ) + 's)';
log( sInfo );
}
};


var aGenericDebugPrinter = new DebugPrinter();
aGenericDebugPrinter.off();
var DBGLOG = bind2( DebugPrinter.prototype.print, aGenericDebugPrinter );

var NAVDBG = new DebugPrinter();
NAVDBG.off();

var ANIMDBG = new DebugPrinter();
ANIMDBG.off();

var aRegisterEventDebugPrinter = new DebugPrinter();
aRegisterEventDebugPrinter.off();

var aTimerEventQueueDebugPrinter = new DebugPrinter();
aTimerEventQueueDebugPrinter.off();

var aEventMultiplexerDebugPrinter = new DebugPrinter();
aEventMultiplexerDebugPrinter.off();

var aNextEffectEventArrayDebugPrinter = new DebugPrinter();
aNextEffectEventArrayDebugPrinter.off();

var aActivityQueueDebugPrinter = new DebugPrinter();
aActivityQueueDebugPrinter.off();

var aAnimatedElementDebugPrinter = new DebugPrinter();
aAnimatedElementDebugPrinter.off();


function MetaDocument()
{
var aMetaDocElem = document.getElementById( aOOOElemMetaSlides );
assert( aMetaDocElem, 'MetaDocument: the svg element with id:' + aOOOElemMetaSlides + 'is not valid.');

this.nNumberOfSlides = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberOfSlides ) );
assert( typeof this.nNumberOfSlides == 'number' && this.nNumberOfSlides > 0,
'MetaDocument: number of slides is zero or undefined.' );
this.nStartSlideNumber = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrStartSlideNumber ) ) || 0;
this.sPageNumberingType = aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberingType ) || 'arabic';
this.bIsUsePositionedChars = ( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrUsePositionedChars ) === 'true' );

this.aClipPathGroup = getElementByClassName( ROOT_NODE, aClipPathGroupClassName );
assert( this.aClipPathGroup, 'MetaDocument: the clip path group element is not valid.');

this.aPresentationClipPath = document.getElementById( aPresentationClipPathId );
assert( this.aPresentationClipPath,
'MetaDocument: the presentation clip path element element is not valid.');

this.aMetaSlideSet = [];
this.aMasterPageSet = {};
this.aTextFieldHandlerSet = {};
this.aTextFieldContentProviderSet = [];
this.aSlideNumberProvider = new SlideNumberProvider( this.nStartSlideNumber + 1, this.sPageNumberingType );

this.bIsAnimated = false;
this.aSlideAnimationsMap = {};
this.initSlideAnimationsMap();

this.theMetaDummySlide = new MetaSlide( 'ooo:meta_dummy_slide', this );

for( var i = 0; i < this.nNumberOfSlides; ++i )
{
var sMetaSlideId = aOOOElemMetaSlide + '_' + i;
this.aMetaSlideSet.push( new MetaSlide( sMetaSlideId, this ) );
}
assert( this.aMetaSlideSet.length == this.nNumberOfSlides,
'MetaDocument: aMetaSlideSet.length != nNumberOfSlides.' );
}

MetaDocument.prototype =
{

getCurrentSlide : function()
{
return this.aMetaSlideSet[nCurSlide];
},

setCurrentSlide : function( nSlideIndex )
{
if( nSlideIndex >= 0 &&  nSlideIndex < this.nNumberOfSlides )
{
if( nCurSlide !== undefined )
this.aMetaSlideSet[nCurSlide].hide();
this.aMetaSlideSet[nSlideIndex].show();
nCurSlide = nSlideIndex;
}
else
{
log('MetaDocument.setCurrentSlide: slide index out of range: ' + nSlideIndex );
}
},


initSlideAnimationsMap : function()
{
var aAnimationsSection = document.getElementById( 'presentation-animations' );
if( aAnimationsSection )
{
var aAnimationsDefSet = aAnimationsSection.getElementsByTagName( 'defs' );

this.bIsAnimated = ( typeof aAnimationsDefSet.length =='number' &&
aAnimationsDefSet.length > 0 );

for( var i = 0; i < aAnimationsDefSet.length; ++i )
{
var sSlideId = aAnimationsDefSet[i].getAttributeNS( NSS['ooo'], aOOOAttrSlide );
var aChildSet = getElementChildren( aAnimationsDefSet[i] );
if( sSlideId && ( aChildSet.length === 1 ) )
{
this.aSlideAnimationsMap[ sSlideId ] = aChildSet[0];
}
}
}
}

}; // end MetaDocument prototype

function MetaSlide( sMetaSlideId, aMetaDoc )
{
this.theDocument = document;
this.id = sMetaSlideId;
this.theMetaDoc = aMetaDoc;

this.element = this.theDocument.getElementById( this.id );
assert( this.element,
'MetaSlide: meta_slide element <' + this.id + '> not found.' );

this.slideId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlide );
this.slideElement = this.theDocument.getElementById( this.slideId );
assert( this.slideElement,
'MetaSlide: slide element <' + this.slideId + '> not found.' );

if( this.slideId !== 'dummy_slide' )
this.nSlideNumber = parseInt( this.slideId.substr(2) );
else
this.nSlideNumber= -1;

this.aContainerElement = this.slideElement.parentNode;
this.slideContainerId = this.aContainerElement.getAttribute( 'id' );
this.aVisibilityStatusElement = this.aContainerElement.parentNode;

this.pageElement = getElementByClassName( this.slideElement, aPageClassName );
assert( this.pageElement,
'MetaSlide: page element <' + this.slideId + '> not found.' );

this.masterPage = this.initMasterPage();

this.nAreMasterObjectsVisible     = this.initVisibilityProperty( aOOOAttrMasterObjectsVisibility,  VISIBLE );
this.nIsBackgroundVisible         = this.initVisibilityProperty( aOOOAttrBackgroundVisibility,     VISIBLE );
this.nIsPageNumberVisible         = this.initVisibilityProperty( aOOOAttrPageNumberVisibility,     HIDDEN );
this.nIsDateTimeVisible           = this.initVisibilityProperty( aOOOAttrDateTimeVisibility,       VISIBLE );
this.nIsFooterVisible             = this.initVisibilityProperty( aOOOAttrFooterVisibility,         VISIBLE );
this.nIsHeaderVisible             = this.initVisibilityProperty( aOOOAttrHeaderVisibility,         VISIBLE );

this.bIsDateTimeVariable = undefined;

this.aTextFieldContentProviderSet = {};
this.aTextFieldContentProviderSet[aSlideNumberClassName]   = this.initSlideNumberFieldContentProvider();
this.aTextFieldContentProviderSet[aDateTimeClassName]      = this.initDateTimeFieldContentProvider( aOOOAttrDateTimeField );
this.aTextFieldContentProviderSet[aFooterClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrFooterField );
this.aTextFieldContentProviderSet[aHeaderClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrHeaderField );

this.fDuration = this.initSlideDuration();

this.aTransitionHandler = null;
this.bHasTransition = this.initHasTransition() || true;
if( this.bHasTransition )
{
this.aTransitionHandler = new SlideTransition( this.getSlideAnimationsRoot(), this.slideId );
}

this.aSlideAnimationsHandler = new SlideAnimations( aSlideShow.getContext() );
this.aSlideAnimationsHandler.importAnimations( this.getSlideAnimationsRoot() );
this.aSlideAnimationsHandler.parseElements();

if( false && this.aSlideAnimationsHandler.aRootNode )
log( this.aSlideAnimationsHandler.aRootNode.info( true ) );

this.aTextShapeSet = this.collectTextShapes();

this.aHyperlinkSet = this.initHyperlinks();

}

MetaSlide.prototype =
{

show : function()
{
this.updateMasterPageView();
this.aVisibilityStatusElement.setAttribute( 'visibility', 'inherit' );
},

hide : function()
{
this.aVisibilityStatusElement.setAttribute( 'visibility', 'hidden' );
},

updateMasterPageView : function()
{
if( !this.aMasterPageView )
{
this.aMasterPageView = new MasterPageView( this );
this.aMasterPageView.attachToSlide();
}
this.aMasterPageView.update();
},

initMasterPage : function()
{
var sMasterPageId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrMaster );

if( !this.theMetaDoc.aMasterPageSet.hasOwnProperty( sMasterPageId ) )
{
this.theMetaDoc.aMasterPageSet[ sMasterPageId ] = new MasterPage( sMasterPageId, this );

this.theMetaDoc.aTextFieldHandlerSet[ sMasterPageId ] = {};
}
return this.theMetaDoc.aMasterPageSet[ sMasterPageId ];
},

initSlideDuration : function()
{
var sSlideDuration = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlideDuration );
if( sSlideDuration && sSlideDuration.length > 0 )
return parseFloat( sSlideDuration );
else
return -1;
},

initHasTransition : function()
{
var sHasTransition = this.element.getAttributeNS( NSS['ooo'], aOOOAttrHasTransition );
return ( sHasTransition === 'true' );
},

initVisibilityProperty : function( aVisibilityAttribute, nDefaultValue )
{
var nVisibility = nDefaultValue;
var sVisibility = getOOOAttribute( this.element, aVisibilityAttribute );
if( sVisibility )
nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
},

initSlideNumberFieldContentProvider : function()
{
return this.theMetaDoc.aSlideNumberProvider;
},

initDateTimeFieldContentProvider : function( aOOOAttrDateTimeField )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttrDateTimeField );
if( !sTextFieldId )  return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt(sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextField;
var aTextFieldElem = document.getElementById( sTextFieldId );
var sClassName = getClassAttribute( aTextFieldElem );
if( sClassName == 'FixedDateTimeField' )
{
aTextField = new FixedTextProvider( aTextFieldElem );
this.bIsDateTimeVariable = false;
}
else if( sClassName == 'VariableDateTimeField' )
{
aTextField = new CurrentDateTimeProvider( aTextFieldElem );
this.bIsDateTimeVariable = true;
}
else
{
aTextField = null;
}
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] = aTextField;
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

initFixedTextFieldContentProvider : function( aOOOAttribute )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttribute );
if( !sTextFieldId ) return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt( sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextFieldElem = document.getElementById( sTextFieldId );
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ]
= new FixedTextProvider( aTextFieldElem );
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

collectTextShapes : function()
{
var aTextShapeSet = [];
var aTextShapeIndexElem = getElementByClassName( document, 'TextShapeIndex' );
if( aTextShapeIndexElem )
{
var aIndexEntryList = getElementChildren( aTextShapeIndexElem );
var i;
for( i = 0; i < aIndexEntryList.length; ++i )
{
var sSlideId = getOOOAttribute( aIndexEntryList[i], 'slide' );
if( sSlideId === this.slideId )
{
var sTextShapeIds = getOOOAttribute( aIndexEntryList[i], 'id-list' );
if( sTextShapeIds )
{
var aTextShapeIdSet =  sTextShapeIds.split( ' ' );
var j;
for( j = 0; j < aTextShapeIdSet.length; ++j )
{
var aTextShapeElem = document.getElementById( aTextShapeIdSet[j] );
if( aTextShapeElem )
{
aTextShapeSet.push( aTextShapeElem );
}
else
{
log( 'warning: MetaSlide.collectTextShapes: text shape with id <' + aTextShapeIdSet[j] + '> is not valid.'  );
}
}
}
break;
}
}
}
return aTextShapeSet;
},

initHyperlinks : function()
{
var aHyperlinkSet = {};
var i;
for( i = 0; i < this.aTextShapeSet.length; ++i )
{
if( this.aTextShapeSet[i] )
{
var aHyperlinkIdList = getElementByClassName( this.aTextShapeSet[i], 'HyperlinkIdList' );
if( aHyperlinkIdList )
{
var sHyperlinkIds = aHyperlinkIdList.textContent;
if( sHyperlinkIds )
{
var aHyperlinkIdSet = sHyperlinkIds.trim().split( ' ' );
var j;
for( j = 0; j < aHyperlinkIdSet.length; ++j )
{
var sId = aHyperlinkIdSet[j];
aHyperlinkSet[ sId ] = new HyperlinkElement( sId, this.aSlideAnimationsHandler.aEventMultiplexer );
}
}
}
}
}
return aHyperlinkSet;
},

getSlideAnimationsRoot : function()
{
return this.theMetaDoc.aSlideAnimationsMap[ this.slideId ];
}

}; // end MetaSlide prototype

function MasterPage( sMasterPageId, aMetaSlide )
{
this.id = sMasterPageId;
this.metaSlide = aMetaSlide;

this.element = document.getElementById( this.id );
assert( this.element,
'MasterPage: master page element <' + this.id + '> not found.' );

this.background = getElementByClassName( this.element, 'Background' );
if( this.background )
{
this.backgroundId = this.background.getAttribute( 'id' );
this.backgroundVisibility = initVisibilityProperty( this.background );
}
else
{
this.backgroundId = '';
log( 'MasterPage: the background element is not valid.' );
}

this.backgroundObjects = getElementByClassName( this.element, 'BackgroundObjects' );
if( this.backgroundObjects )
{
this.backgroundObjectsId = this.backgroundObjects.getAttribute( 'id' );
this.backgroundObjectsVisibility = initVisibilityProperty( this.backgroundObjects );

if( this.backgroundObjectsVisibility != HIDDEN )
{
var aBackgroundObjectList = getElementChildren( this.backgroundObjects );
var nFrom = 0;
var nCount = 0;
var nSubGroupId = 1;
var sClass;
var sId = '';
this.aBackgroundObjectSubGroupIdList = [];
var i = 0;
for( ; i < aBackgroundObjectList.length; ++i )
{
sClass = aBackgroundObjectList[i].getAttribute( 'class' );
if( !sClass || ( ( sClass !== aDateTimeClassName ) && ( sClass !== aFooterClassName )
&& ( sClass !== aHeaderClassName ) && ( sClass !== aSlideNumberClassName ) ) )
{
if( nCount === 0 )
{
nFrom = i;
sId = this.backgroundObjectsId + '.' + nSubGroupId;
++nSubGroupId;
this.aBackgroundObjectSubGroupIdList.push( sId );
}
++nCount;
}
else
{
this.aBackgroundObjectSubGroupIdList.push( sClass );
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
nCount = 0;
}
}
}
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
}
}
}
else
{
this.backgroundObjectsId = '';
log( 'MasterPage: the background objects element is not valid.' );
}

this.aPlaceholderShapeSet = {};
this.initPlaceholderShapes();
}

MasterPage.prototype =
{

initPlaceholderShapes : function()
{
this.aPlaceholderShapeSet[ aSlideNumberClassName ] = new PlaceholderShape( this, aSlideNumberClassName );
this.aPlaceholderShapeSet[ aDateTimeClassName ] = new PlaceholderShape( this, aDateTimeClassName );
this.aPlaceholderShapeSet[ aFooterClassName ] = new PlaceholderShape( this, aFooterClassName );
this.aPlaceholderShapeSet[ aHeaderClassName ] = new PlaceholderShape( this, aHeaderClassName );
}

}; // end MasterPage prototype

function PlaceholderShape( aMasterPage, sClassName )
{
this.masterPage = aMasterPage;
this.className = sClassName;

this.element = null;
this.textElement = null;
this.init();
}

PlaceholderShape.prototype.isValid = function()
{
return ( this.element && this.textElement );
};


PlaceholderShape.prototype.init = function()
{

var aTextFieldElement = getElementByClassName( this.masterPage.backgroundObjects, this.className );
if( aTextFieldElement )
{
var aPlaceholderElement = getElementByClassName( aTextFieldElement, 'PlaceholderText' );
if( aPlaceholderElement )
{
var aSVGRectElem = getElementByClassName( aTextFieldElement, 'BoundingBox' );
if( aSVGRectElem )
{
var aRect = new Rectangle( aSVGRectElem );
var sTextAdjust = getOOOAttribute( aTextFieldElement, aOOOAttrTextAdjust ) || 'left';
var sTextAnchor, sX;
if( sTextAdjust == 'left' )
{
sTextAnchor = 'start';
sX = String( aRect.left );
}
else if( sTextAdjust == 'right' )
{
sTextAnchor = 'end';
sX = String( aRect.right );
}
else if( sTextAdjust == 'center' )
{
sTextAnchor = 'middle';
var nMiddle = ( aRect.left + aRect.right ) / 2;
sX = String( parseInt( String( nMiddle ) ) );
}
if( sTextAnchor )
aPlaceholderElement.setAttribute( 'text-anchor', sTextAnchor );
if( sX )
aPlaceholderElement.setAttribute( 'x', sX );
}

if( this.masterPage.metaSlide.theMetaDoc.bIsUsePositionedChars )
{
var aTextLineGroupElem = aPlaceholderElement.parentNode.parentNode;
if( aTextLineGroupElem )
{
var sFontFamilyAttr = aTextLineGroupElem.getAttribute( 'font-family' );
if( sFontFamilyAttr )
{
var aChildSet = getElementChildren( aTextLineGroupElem );
if( aChildSet.length > 1  )
var i = 1;
for( ; i < aChildSet.length; ++i )
{
aTextLineGroupElem.removeChild( aChildSet[i] );
}
}
}
}
this.element = aTextFieldElement;
this.textElement = aPlaceholderElement;
}
}
};

function MasterPageView( aMetaSlide )
{
this.aMetaSlide = aMetaSlide;
this.aSlideElement = aMetaSlide.slideElement;
this.aPageElement = aMetaSlide.pageElement;
this.aMasterPage = aMetaSlide.masterPage;
this.aMPVElement = this.createElement();
this.bIsAttached = false;
}


MasterPageView.prototype.attachToSlide = function()
{
if( !this.bIsAttached )
{
var aInsertedElement = this.aSlideElement.insertBefore( this.aMPVElement, this.aPageElement );
assert( aInsertedElement === this.aMPVElement,
'MasterPageView.attachToSlide: aInsertedElement != this.aMPVElement' );

this.bIsAttached = true;
}
};

MasterPageView.prototype.detachFromSlide = function()
{
if( this.bIsAttached )
{
this.aSlideElement.removeChild( this.aMPVElement );
this.bIsAttached = false;
}
};

MasterPageView.prototype.update = function()
{
if( this.aDateTimeFieldHandler && this.aMetaSlide.bIsDateTimeVariable )
this.aDateTimeFieldHandler.update();
};


MasterPageView.prototype.createElement = function()
{
var theDocument = document;
var aMasterPageViewElement = theDocument.createElementNS( NSS['svg'], 'g' );
assert( aMasterPageViewElement,
'MasterPageView.createElement: failed to create a master page view element.' );
aMasterPageViewElement.setAttribute( 'class', 'MasterPageView' );

var aWhiteRect = theDocument.createElementNS( NSS['svg'], 'rect' );
var nWidthExt = WIDTH / 1000;
var nHeightExt = HEIGHT / 1000;
aWhiteRect.setAttribute( 'x', String( -nWidthExt / 2 ) );
aWhiteRect.setAttribute( 'y', String( -nHeightExt / 2 ) );
aWhiteRect.setAttribute( 'width', String( WIDTH + nWidthExt ) );
aWhiteRect.setAttribute( 'height', String( HEIGHT + nHeightExt ) );
aWhiteRect.setAttribute( 'fill', '#FFFFFF' );
aMasterPageViewElement.appendChild( aWhiteRect );

if( this.aMetaSlide.nIsBackgroundVisible )
{
this.aBackgroundElement = theDocument.createElementNS( NSS['svg'], 'use' );
this.aBackgroundElement.setAttribute( 'class', 'Background' );
setNSAttribute( 'xlink', this.aBackgroundElement,
'href', '#' + this.aMasterPage.backgroundId );

aMasterPageViewElement.appendChild( this.aBackgroundElement );
}

if( this.aMetaSlide.nAreMasterObjectsVisible )
{
this.aBackgroundObjectsElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aBackgroundObjectsElement.setAttribute( 'class', 'BackgroundObjects' );

var aBackgroundObjectSubGroupIdList = this.aMasterPage.aBackgroundObjectSubGroupIdList;
this.aBackgroundSubGroupElementSet = [];
var aPlaceholderShapeSet = this.aMasterPage.aPlaceholderShapeSet;
var aTextFieldContentProviderSet = this.aMetaSlide.aTextFieldContentProviderSet;
var aDefsElement = this.aMetaSlide.element.parentNode;
var aTextFieldHandlerSet = this.aMetaSlide.theMetaDoc.aTextFieldHandlerSet;
var sMasterSlideId = this.aMasterPage.id;

var i = 0;
var sId;
for( ; i < aBackgroundObjectSubGroupIdList.length; ++i )
{
sId = aBackgroundObjectSubGroupIdList[i];
if( sId === aSlideNumberClassName )
{
if( aPlaceholderShapeSet[aSlideNumberClassName] &&
aPlaceholderShapeSet[aSlideNumberClassName].isValid() &&
this.aMetaSlide.nIsPageNumberVisible &&
aTextFieldContentProviderSet[aSlideNumberClassName] )
{
this.aSlideNumberFieldHandler =
new SlideNumberFieldHandler( aPlaceholderShapeSet[aSlideNumberClassName],
aTextFieldContentProviderSet[aSlideNumberClassName] );
this.aSlideNumberFieldHandler.update( this.aMetaSlide.nSlideNumber );
this.aSlideNumberFieldHandler.appendTo( this.aBackgroundObjectsElement );
}
}
else if( sId === aDateTimeClassName )
{
if( this.aMetaSlide.nIsDateTimeVisible )
{
this.aDateTimeFieldHandler =
this.initTextFieldHandler( aDateTimeClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aFooterClassName )
{
if( this.aMetaSlide.nIsFooterVisible )
{
this.aFooterFieldHandler =
this.initTextFieldHandler( aFooterClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aHeaderClassName )
{
if( this.aMetaSlide.nIsHeaderVisible )
{
this.aHeaderFieldHandler =
this.initTextFieldHandler( aHeaderClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else
{
var aBackgroundSubGroupElement = theDocument.createElementNS( NSS['svg'], 'use' );
aBackgroundSubGroupElement.setAttribute( 'class', 'BackgroundObjectSubGroup' );
setNSAttribute( 'xlink', aBackgroundSubGroupElement,
'href', '#' + sId );
this.aBackgroundSubGroupElementSet.push( aBackgroundSubGroupElement );
this.aBackgroundObjectsElement.appendChild( aBackgroundSubGroupElement );
}

}
aMasterPageViewElement.appendChild( this.aBackgroundObjectsElement );
}

return aMasterPageViewElement;
};

MasterPageView.prototype.initTextFieldHandler =
function( sClassName, aPlaceholderShapeSet, aTextFieldContentProviderSet,
aDefsElement, aTextFieldHandlerSet, sMasterSlideId )
{
var aTextFieldHandler = null;
if( aPlaceholderShapeSet[sClassName] &&
aPlaceholderShapeSet[sClassName].isValid()
&& aTextFieldContentProviderSet[sClassName] )
{
var sTextFieldContentProviderId = aTextFieldContentProviderSet[sClassName].sId;
if ( !aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] )
{
aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] =
new TextFieldHandler( aPlaceholderShapeSet[sClassName],
aTextFieldContentProviderSet[sClassName] );
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
aTextFieldHandler.update();
aTextFieldHandler.appendTo( aDefsElement );
}
else
{
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
}

var aTextFieldElement = document.createElementNS( NSS['svg'], 'use' );
aTextFieldElement.setAttribute( 'class', sClassName );
setNSAttribute( 'xlink', aTextFieldElement,
'href', '#' + aTextFieldHandler.sId );
this.aBackgroundObjectsElement.appendChild( aTextFieldElement );
}
return aTextFieldHandler;
};

function TextFieldHandler( aPlaceholderShape, aTextContentProvider )
{
this.aPlaceHolderShape = aPlaceholderShape;
this.aTextContentProvider = aTextContentProvider;
assert( this.aTextContentProvider,
'TextFieldHandler: text content provider not defined.' );
this.sId = 'tf' + String( TextFieldHandler.getUniqueId() );
this.aTextFieldElement = null;
this.aTextPlaceholderElement = null;
this.cloneElement();
}


TextFieldHandler.CURR_UNIQUE_ID = 0;

TextFieldHandler.getUniqueId = function()
{
++TextFieldHandler.CURR_UNIQUE_ID;
return TextFieldHandler.CURR_UNIQUE_ID;
};

TextFieldHandler.prototype.cloneElement = function()
{
assert( this.aPlaceHolderShape && this.aPlaceHolderShape.isValid(),
'TextFieldHandler.cloneElement: placeholder shape is not valid.' );
this.aTextFieldElement = this.aPlaceHolderShape.element.cloneNode( true /* deep clone */ );
assert( this.aTextFieldElement,
'TextFieldHandler.cloneElement: aTextFieldElement is not defined' );
this.aTextFieldElement.setAttribute( 'id', this.sId );
this.aTextFieldElement.removeAttribute( 'visibility' );
this.aTextPlaceholderElement = getElementByClassName( this.aTextFieldElement, 'PlaceholderText' );
assert( this.aTextPlaceholderElement,
'TextFieldHandler.cloneElement: aTextPlaceholderElement is not defined' );
};


TextFieldHandler.prototype.appendTo = function( aParentNode )
{
if( !this.aTextFieldElement )
{
log( 'TextFieldHandler.appendTo: aTextFieldElement is not defined' );
return;
}
if( !aParentNode )
{
log( 'TextFieldHandler.appendTo: parent node is not defined' );
return;
}

aParentNode.appendChild( this.aTextFieldElement );
};

TextFieldHandler.prototype.setTextContent = function( sText )
{
if( !this.aTextPlaceholderElement )
{
log( 'PlaceholderShape.setTextContent: text element is not valid in placeholder of type '
+ this.className + ' that belongs to master slide ' + this.masterPage.id );
return;
}
this.aTextPlaceholderElement.textContent = sText;
};

TextFieldHandler.prototype.update = function()
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this );
};

function SlideNumberFieldHandler( aPlaceholderShape, aTextContentProvider )
{
SlideNumberFieldHandler.superclass.constructor.call( this, aPlaceholderShape, aTextContentProvider );
}
extend( SlideNumberFieldHandler, TextFieldHandler );


SlideNumberFieldHandler.prototype.update = function( nPageNumber )
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this, nPageNumber );
};


function TextFieldContentProvider( aTextFieldContentElement )
{
if( aTextFieldContentElement )
this.sId = aTextFieldContentElement.getAttribute( 'id' );
}

function FixedTextProvider( aTextFieldContentElement )
{
FixedTextProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.text = aTextFieldContentElement.textContent;
}
extend( FixedTextProvider, TextFieldContentProvider );


FixedTextProvider.prototype.update = function( aFixedTextField )
{
aFixedTextField.setTextContent( this.text );
};

function CurrentDateTimeProvider( aTextFieldContentElement )
{
CurrentDateTimeProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.dateTimeFormat = getOOOAttribute( aTextFieldContentElement, aOOOAttrDateTimeFormat );
}
extend( CurrentDateTimeProvider, TextFieldContentProvider );


CurrentDateTimeProvider.prototype.update = function( aDateTimeField )
{
var sText = this.createDateTimeText( this.dateTimeFormat );
aDateTimeField.setTextContent( sText );
};


CurrentDateTimeProvider.prototype.createDateTimeText = function( /*sDateTimeFormat*/ )
{
var aDate = new Date();
var sDate = aDate.toLocaleString();
return sDate;
};

function SlideNumberProvider( nInitialSlideNumber, sPageNumberingType )
{
SlideNumberProvider.superclass.constructor.call( this, null );
this.nInitialSlideNumber = nInitialSlideNumber;
this.pageNumberingType = sPageNumberingType;

}
extend( SlideNumberProvider, TextFieldContentProvider );


SlideNumberProvider.prototype.getNumberingType = function()
{
return this.pageNumberingType;
};


SlideNumberProvider.prototype.update = function( aSlideNumberField, nSlideNumber )
{
if( nSlideNumber === undefined )
{
if( nCurSlide === undefined )
nSlideNumber = this.nInitialSlideNumber;
else
nSlideNumber = nCurSlide + 1;
}
var sText = this.createSlideNumberText( nSlideNumber, this.getNumberingType() );
aSlideNumberField.setTextContent( sText );
};


SlideNumberProvider.prototype.createSlideNumberText = function( nSlideNumber /*, sNumberingType*/ )
{
return String( nSlideNumber );
};


function SlideIndexPage()
{
this.pageElementId = 'slide_index';
this.pageBgColor = 'rgb(252,252,252)';
this.pageElement = this.createPageElement();
assert( this.pageElement, 'SlideIndexPage: pageElement is not valid' );
this.indexColumns = INDEX_COLUMNS_DEFAULT;
this.totalThumbnails = this.indexColumns * this.indexColumns;
this.selectedSlideIndex = undefined;

this.xSpacingFactor = 600/28000;
this.ySpacingFactor = 450/21000;
this.xSpacing = WIDTH * this.xSpacingFactor;
this.ySpacing = HEIGHT * this.ySpacingFactor;
this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

this.thumbnailMouseAreaTemplateId = 'thumbnail_mouse_area';
this.thumbnailMouseAreaTemplateElement = null;
this.thumbnailBorderTemplateId = 'thumbnail_border';
this.thumbnailBorderTemplateElement = null;
this.createTemplateElements();

this.aThumbnailSet = new Array( this.totalThumbnails );
for( var i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = 0;
}


SlideIndexPage.prototype.getTotalThumbnails = function()
{
return this.totalThumbnails;
};

SlideIndexPage.prototype.show = function()
{
this.pageElement.setAttribute( 'display', 'inherit' );
};

SlideIndexPage.prototype.hide = function()
{
this.pageElement.setAttribute( 'display', 'none' );
};

SlideIndexPage.prototype.setSelection = function( nIndex )
{
nIndex = getSafeIndex( nIndex, 0, this.getTotalThumbnails() - 1 );
if( this.curThumbnailIndex != nIndex )
{
this.aThumbnailSet[ this.curThumbnailIndex ].unselect();
this.aThumbnailSet[ nIndex ].select();
this.curThumbnailIndex = nIndex;
}
this.selectedSlideIndex = this.aThumbnailSet[ nIndex ].slideIndex;
};

SlideIndexPage.prototype.createPageElement = function()
{
var aPageElement = document.createElementNS( NSS['svg'], 'g' );
aPageElement.setAttribute( 'id', this.pageElementId );
aPageElement.setAttribute( 'display', 'none' );
aPageElement.setAttribute( 'visibility', 'visible' );

var sPageBgColor = this.pageBgColor + ';';
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'style', 'stroke:none;fill:' + sPageBgColor );

aPageElement.appendChild( aRectElement );
ROOT_NODE.appendChild( aPageElement );
return( document.getElementById( this.pageElementId ) );
};

SlideIndexPage.prototype.createTemplateElements = function()
{
var aDefsElement = document.createElementNS( NSS['svg'], 'defs' );
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailBorderTemplateId );
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );
aRectElement.setAttribute( 'fill', 'none' );
aDefsElement.appendChild( aRectElement );

aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailMouseAreaTemplateId );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'fill', this.pageBgColor );
aDefsElement.appendChild( aRectElement );

this.pageElement.appendChild( aDefsElement );

this.thumbnailMouseAreaTemplateElement = document.getElementById( this.thumbnailMouseAreaTemplateId );
this.thumbnailBorderTemplateElement = document.getElementById( this.thumbnailBorderTemplateId );
};

SlideIndexPage.prototype.decreaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns - 1 );
};

SlideIndexPage.prototype.increaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns + 1 );
};

SlideIndexPage.prototype.resetNumberOfColumns  = function()
{
this.setNumberOfColumns( INDEX_COLUMNS_DEFAULT );
};

SlideIndexPage.prototype.setNumberOfColumns  = function( nNumberOfColumns )
{
if( this.indexColumns == nNumberOfColumns )  return;
if( nNumberOfColumns < 2 || nNumberOfColumns > 6 ) return;

var suspendHandle = ROOT_NODE.suspendRedraw(500);

var nOldTotalThumbnails = this.totalThumbnails;
this.indexColumns = nNumberOfColumns;
this.totalThumbnails = nNumberOfColumns * nNumberOfColumns;

this.aThumbnailSet[this.curThumbnailIndex].unselect();

var i;
for( i = this.totalThumbnails; i < nOldTotalThumbnails; ++i )
{
this.aThumbnailSet[i].removeElement();
}

for( i = nOldTotalThumbnails; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
}

this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

var aRectElement = this.thumbnailBorderTemplateElement;
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );

for( i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = this.selectedSlideIndex % this.totalThumbnails;
this.aThumbnailSet[this.curThumbnailIndex].select();

INDEX_OFFSET = -1;
indexSetPageSlide( this.selectedSlideIndex );

ROOT_NODE.unsuspendRedraw( suspendHandle );
ROOT_NODE.forceRedraw();
};


function Thumbnail( aSlideIndexPage, nIndex )
{
this.container = aSlideIndexPage;
this.index = nIndex;//= getSafeIndex( nIndex, 0, this.container.getTotalThumbnails() );
this.pageElement = this.container.pageElement;
this.thumbnailId = 'thumbnail' + this.index;
this.thumbnailElement = this.createThumbnailElement();
this.slideElement = getElementByClassName( this.thumbnailElement, 'Slide' );
this.borderElement = getElementByClassName( this.thumbnailElement, 'Border' );
this.mouseAreaElement = getElementByClassName( this.thumbnailElement, 'MouseArea' );
this.aTransformSet = new Array( 3 );
this.visibility = VISIBLE;
this.isSelected = false;
}

Thumbnail.prototype.sNormalBorderColor = 'rgb(216,216,216)';
Thumbnail.prototype.sSelectionBorderColor = 'rgb(92,92,255)';

Thumbnail.prototype.removeElement = function()
{
if( this.thumbnailElement )
this.container.pageElement.removeChild( this.thumbnailElement );
};

Thumbnail.prototype.show = function()
{
if( this.visibility == HIDDEN )
{
this.thumbnailElement.setAttribute( 'display', 'inherit' );
this.visibility = VISIBLE;
}
};

Thumbnail.prototype.hide = function()
{
if( this.visibility == VISIBLE )
{
this.thumbnailElement.setAttribute( 'display', 'none' );
this.visibility = HIDDEN;
}
};

Thumbnail.prototype.select = function()
{
if( !this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sSelectionBorderColor );
this.isSelected = true;
}
};

Thumbnail.prototype.unselect = function()
{
if( this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sNormalBorderColor );
this.isSelected = false;
}
};

Thumbnail.prototype.updateView = function()
{
this.column = this.index % this.container.indexColumns;
this.row = ( this.index - this.column ) / this.container.indexColumns;
this.halfBorderWidth = this.container.halfBorderWidth;
this.borderWidth = this.container.borderWidth;
this.width = ( WIDTH + this.borderWidth ) * this.container.scaleFactor;
this.height = ( HEIGHT + this.borderWidth ) * this.container.scaleFactor;
this.aTransformSet[2] = 'translate(' + this.halfBorderWidth + ' ' + this.halfBorderWidth + ')';
this.aTransformSet[1] = 'scale(' + this.container.scaleFactor + ')';
var sTransformAttrValue = this.computeTransform();
this.thumbnailElement.setAttribute( 'transform', sTransformAttrValue );
this.mouseAreaElement.setAttribute( 'onmouseover', 'theSlideIndexPage.aThumbnailSet[' + this.index  + '].onMouseOver()' );
};

Thumbnail.prototype.update = function( nIndex )
{
if( this.slideIndex == nIndex )  return;

var aMetaSlide = theMetaDoc.aMetaSlideSet[nIndex];
aMetaSlide.updateMasterPageView();
setNSAttribute( 'xlink', this.slideElement, 'href', '#' + aMetaSlide.slideId );
this.slideIndex = nIndex;
};

Thumbnail.prototype.clear = function( )
{
setNSAttribute( 'xlink', this.slideElement, 'href', '' );
};

Thumbnail.prototype.createThumbnailElement = function()
{
var aThumbnailElement = document.createElementNS( NSS['svg'], 'g' );
aThumbnailElement.setAttribute( 'id', this.thumbnailId );
aThumbnailElement.setAttribute( 'display', 'inherit' );

var aSlideElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aSlideElement, 'href', '' );
aSlideElement.setAttribute( 'class', 'Slide' );
aThumbnailElement.appendChild( aSlideElement );

var aMouseAreaElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aMouseAreaElement, 'href', '#' + this.container.thumbnailMouseAreaTemplateId );
aMouseAreaElement.setAttribute( 'class', 'MouseArea' );
aMouseAreaElement.setAttribute( 'opacity', 0.0 );
aThumbnailElement.appendChild( aMouseAreaElement );

var aBorderElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aBorderElement, 'href', '#' + this.container.thumbnailBorderTemplateId );
aBorderElement.setAttribute( 'stroke', this.sNormalBorderColor );
aBorderElement.setAttribute( 'class', 'Border' );
aThumbnailElement.appendChild( aBorderElement );

this.container.pageElement.appendChild( aThumbnailElement );
return( document.getElementById( this.thumbnailId ) );
};

Thumbnail.prototype.computeTransform = function()
{
var nXSpacing = this.container.xSpacing;
var nYSpacing = this.container.ySpacing;

var nXOffset = nXSpacing + ( this.width + nXSpacing ) * this.column;
var nYOffset = nYSpacing + ( this.height + nYSpacing ) * this.row;

this.aTransformSet[0] = 'translate(' + nXOffset + ' ' + nYOffset + ')';

var sTransform = this.aTransformSet.join( ' ' );

return sTransform;
};

Thumbnail.prototype.onMouseOver = function()
{
if( ( currentMode == INDEX_MODE ) && ( this.container.curThumbnailIndex !=  this.index ) )
{
this.container.setSelection( this.index );
}
};


function init()
{
var VIEWBOX = ROOT_NODE.getAttribute('viewBox');

if( VIEWBOX )
{
WIDTH = ROOT_NODE.viewBox.animVal.width;
HEIGHT = ROOT_NODE.viewBox.animVal.height;
}

aSlideShow = new SlideShow();
theMetaDoc =  new MetaDocument();
aSlideShow.bIsEnabled = theMetaDoc.bIsAnimated;
theSlideIndexPage = new SlideIndexPage();
aSlideShow.displaySlide( theMetaDoc.nStartSlideNumber, false );

var hammer = new Hammer(ROOT_NODE);
hammer.on('swipeleft', function() {
switchSlide(1, false);
});
hammer.on('swiperight', function() {
switchSlide(-1, false);
});
hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
hammer.on('swipeup', function() {
aSlideShow.exitSlideShowInApp();
});
hammer.on('swipedown', function() {
aSlideShow.exitSlideShowInApp();
});
}

function presentationEngineStop(message)
{
alert( message + '\nThe presentation engine will be stopped' );
document.onkeydown = null;
document.onkeypress = null;
document.onclick = null;
window.onmousewheel = null;
}

function assert( condition, message )
{
if (!condition)
{
presentationEngineStop( message );
if (typeof console == 'object')
console.trace();
throw new Error( message );
}
}

function dispatchEffects(dir)
{

if( dir == 1 )
{
var bRet = aSlideShow.nextEffect();

if( !bRet )
{
switchSlide( 1, false );
}
}
else
{
switchSlide( dir, false );
}
}

function skipAllEffects()
{
var bRet = aSlideShow.skipAllEffects();
if( !bRet )
{
switchSlide( 1, true );
}
}

function skipEffects(dir)
{
if( dir == 1 )
{
var bRet = aSlideShow.skipPlayingOrNextEffect();

if( !bRet )
{
switchSlide( 1, true );
}
}
else
{
switchSlide( dir, true );
}
}

function switchSlide( nOffset, bSkipTransition )
{
var nNextSlide = nCurSlide + nOffset;
aSlideShow.displaySlide( nNextSlide, bSkipTransition );
}

function displayIndex( offsetNumber )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
offsetNumber = getSafeIndex( offsetNumber, 0, aMetaSlideSet.length - 1 );

var nTotalThumbnails = theSlideIndexPage.getTotalThumbnails();
var nEnd = Math.min( offsetNumber + nTotalThumbnails, aMetaSlideSet.length);

var aThumbnailSet = theSlideIndexPage.aThumbnailSet;
var j = 0;
for( var i = offsetNumber; i < nEnd; ++i, ++j )
{
aThumbnailSet[j].update( i );
aThumbnailSet[j].show();
}
for( ; j < nTotalThumbnails; ++j )
{
aThumbnailSet[j].hide();
}

if (INDEX_OFFSET != offsetNumber)
INDEX_OFFSET = offsetNumber;
}

function toggleSlideIndex()
{
if( currentMode == SLIDE_MODE )
{

theMetaDoc.getCurrentSlide().hide();
INDEX_OFFSET = -1;
indexSetPageSlide( nCurSlide );
theSlideIndexPage.show();
currentMode = INDEX_MODE;
}
else if( currentMode == INDEX_MODE )
{
theSlideIndexPage.hide();
var nNewSlide = theSlideIndexPage.selectedSlideIndex;

aSlideShow.displaySlide( nNewSlide, true );
currentMode = SLIDE_MODE;
}
}

function abandonIndexMode()
{
theSlideIndexPage.selectedSlideIndex = nCurSlide;
toggleSlideIndex();
}


var CURR_UNIQUE_ID = 0;

function getUniqueId()
{
++CURR_UNIQUE_ID;
return CURR_UNIQUE_ID;
}

function mem_fn( sMethodName )
{
return  function( aObject )
{
var aMethod = aObject[ sMethodName ];
if( aMethod )
aMethod.call( aObject );
else
log( 'method sMethodName not found' );
};
}

function bind( aObject, aMethod )
{
return  function()
{
return aMethod.call( aObject, arguments[0] );
};
}

function bind2( aFunction )
{
if( !aFunction  )
log( 'bind2: passed function is not valid.' );

var aBoundArgList = arguments;

var aResultFunction = null;

switch( aBoundArgList.length )
{
case 1: aResultFunction = function()
{
return aFunction.call( arguments[0], arguments[1],
arguments[2], arguments[3],
arguments[4] );
};
break;
case 2: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], arguments[0],
arguments[1], arguments[2],
arguments[3] );
};
break;
case 3: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
arguments[0], arguments[1],
arguments[2] );
};
break;
case 4: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], arguments[0],
arguments[1] );
};
break;
case 5: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], aBoundArgList[4],
arguments[0] );
};
break;
default:
log( 'bind2: arity not handled.' );
}

return aResultFunction;
}

function getCurrentSystemTime()
{
return ( new Date() ).getTime();
}

function getSlideAnimationsRoot( sSlideId )
{
return theMetaDoc.aSlideAnimationsMap[ sSlideId ];
}

function getElementChildren( aElement )
{
var aChildrenArray = [];

var nSize = aElement.childNodes.length;

for( var i = 0; i < nSize; ++i )
{
if( aElement.childNodes[i].nodeType == 1 )
aChildrenArray.push( aElement.childNodes[i] );
}

return aChildrenArray;
}

function removeWhiteSpaces( str )
{
if( !str )
return '';

var re = / */;
var aSplitString = str.split( re );
return aSplitString.join('');
}

function clamp( nValue, nMinimum, nMaximum )
{
if( nValue < nMinimum )
{
return nMinimum;
}
else if( nValue > nMaximum )
{
return nMaximum;
}
else
{
return nValue;
}
}

function makeMatrixString( a, b, c, d, e, f )
{
var s = 'matrix(';
s += a + ', ';
s += b + ', ';
s += c + ', ';
s += d + ', ';
s += e + ', ';
s += f + ')';

return s;
}

function matrixToString( aSVGMatrix )
{
return makeMatrixString( aSVGMatrix.a, aSVGMatrix.b, aSVGMatrix.c,
aSVGMatrix.d, aSVGMatrix.e, aSVGMatrix.f );
}


function numberParser( sValue )
{
if( sValue === '.' )
return undefined;
var reFloatNumber = /^[+-]?[0-9]*[.]?[0-9]*$/;

if( reFloatNumber.test( sValue ) )
return parseFloat( sValue );
else
return undefined;
}

function booleanParser( sValue )
{
sValue = sValue.toLowerCase();
if( sValue === 'true' )
return true;
else if( sValue === 'false' )
return false;
else
return undefined;
}

function colorParser( sValue )
{

function hsl( nHue, nSaturation, nLuminance )
{
return new HSLColor( nHue, nSaturation / 100, nLuminance / 100 );
}

function rgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 255, nGreen / 255, nBlue / 255 );
}

function prgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 100, nGreen / 100, nBlue / 100 );
}

var sCommaPattern = ' *[,] *';
var sIntegerPattern = '[+-]?[0-9]+';
var sHexDigitPattern = '[0-9A-Fa-f]';

var sHexColorPattern = '#(' + sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})';

var sRGBIntegerPattern = 'rgb[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + sCommaPattern
+ sIntegerPattern + ' *[)]';

var sRGBPercentPattern = 'rgb[(] *' + sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var sHSLPercentPattern = 'hsl[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var reHexColor = new RegExp( sHexColorPattern );
var reRGBInteger = new RegExp( sRGBIntegerPattern );
var reRGBPercent = new RegExp( sRGBPercentPattern );
var reHSLPercent = new RegExp( sHSLPercentPattern );

if( reHexColor.test( sValue ) )
{
var aRGBTriple = reHexColor.exec( sValue );

var nRed    = parseInt( aRGBTriple[1], 16 ) / 255;
var nGreen  = parseInt( aRGBTriple[2], 16 ) / 255;
var nBlue   = parseInt( aRGBTriple[3], 16 ) / 255;

return new RGBColor( nRed, nGreen, nBlue );
}
else if( reHSLPercent.test( sValue ) )
{
sValue = sValue.replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else if( reRGBInteger.test( sValue ) )
{
return eval( sValue );
}
else if( reRGBPercent.test( sValue ) )
{
sValue = 'p' + sValue.replace( '%', '' ).replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else
{
return null;
}
}


function RGBColor( nRed, nGreen, nBlue )
{
this.eColorSpace = COLOR_SPACE_RGB;
this.nRed = nRed;
this.nGreen = nGreen;
this.nBlue = nBlue;
}


RGBColor.prototype.clone = function()
{
return new RGBColor( this.nRed, this.nGreen, this.nBlue );
};

RGBColor.prototype.equal = function( aRGBColor )
{
return ( this.nRed == aRGBColor.nRed ) &&
( this.nGreen == aRGBColor.nGreen ) &&
( this.nBlue == aRGBColor.nBlue );
};

RGBColor.prototype.add = function( aRGBColor )
{
this.nRed += aRGBColor.nRed;
this.nGreen += aRGBColor.nGreen;
this.nBlue += aRGBColor.nBlue;
return this;
};

RGBColor.prototype.scale = function( aT )
{
this.nRed *= aT;
this.nGreen *= aT;
this.nBlue *= aT;
return this;
};

RGBColor.clamp = function( aRGBColor )
{
var aClampedRGBColor = new RGBColor( 0, 0, 0 );

aClampedRGBColor.nRed   = clamp( aRGBColor.nRed, 0.0, 1.0 );
aClampedRGBColor.nGreen = clamp( aRGBColor.nGreen, 0.0, 1.0 );
aClampedRGBColor.nBlue  = clamp( aRGBColor.nBlue, 0.0, 1.0 );

return aClampedRGBColor;
};

RGBColor.prototype.convertToHSL = function()
{
var nRed   = clamp( this.nRed, 0.0, 1.0 );
var nGreen = clamp( this.nGreen, 0.0, 1.0 );
var nBlue  = clamp( this.nBlue, 0.0, 1.0 );

var nMax = Math.max( nRed, nGreen, nBlue );
var nMin = Math.min( nRed, nGreen, nBlue );
var nDelta = nMax - nMin;

var nLuminance  = ( nMax + nMin ) / 2.0;
var nSaturation = 0.0;
var nHue = 0.0;
if( nDelta !== 0 )
{
nSaturation = ( nLuminance > 0.5 ) ?
( nDelta / ( 2.0 - nMax - nMin) ) :
( nDelta / ( nMax + nMin ) );

if( nRed == nMax )
nHue = ( nGreen - nBlue ) / nDelta;
else if( nGreen == nMax )
nHue = 2.0 + ( nBlue - nRed ) / nDelta;
else if( nBlue == nMax )
nHue = 4.0 + ( nRed - nGreen ) / nDelta;

nHue *= 60.0;

if( nHue < 0.0 )
nHue += 360.0;
}

return new HSLColor( nHue, nSaturation, nLuminance );

};

RGBColor.prototype.toString = function( bClamped )
{
var aRGBColor;
if( bClamped )
{
aRGBColor = RGBColor.clamp( this );
}
else
{
aRGBColor = this;
}

var nRed = Math.round( aRGBColor.nRed * 255 );
var nGreen = Math.round( aRGBColor.nGreen * 255 );
var nBlue = Math.round( aRGBColor.nBlue * 255 );

return ( 'rgb(' + nRed + ',' + nGreen + ',' + nBlue + ')' );
};

RGBColor.interpolate = function( aStartRGB , aEndRGB, nT )
{
var aResult = aStartRGB.clone();
var aTEndRGB = aEndRGB.clone();
aResult.scale( 1.0 - nT );
aTEndRGB.scale( nT );
aResult.add( aTEndRGB );

return aResult;
};


function HSLColor( nHue, nSaturation, nLuminance )
{
this.eColorSpace = COLOR_SPACE_HSL;
this.nHue = nHue;
this.nSaturation = nSaturation;
this.nLuminance = nLuminance;

this.normalizeHue();
}


HSLColor.prototype.clone = function()
{
return new HSLColor( this.nHue, this.nSaturation, this.nLuminance );
};

HSLColor.prototype.equal = function( aHSLColor )
{
return ( this.nHue == aHSLColor.nHue ) &&
( this.nSaturation += aHSLColor.nSaturation ) &&
( this.nLuminance += aHSLColor.nLuminance );
};

HSLColor.prototype.add = function( aHSLColor )
{
this.nHue += aHSLColor.nHue;
this.nSaturation += aHSLColor.nSaturation;
this.nLuminance += aHSLColor.nLuminance;
this.normalizeHue();
return this;
};

HSLColor.prototype.scale = function( aT )
{
this.nHue *= aT;
this.nSaturation *= aT;
this.nLuminance *= aT;
this.normalizeHue();
return this;
};

HSLColor.clamp = function( aHSLColor )
{
var aClampedHSLColor = new HSLColor( 0, 0, 0 );

aClampedHSLColor.nHue = aHSLColor.nHue % 360;
if( aClampedHSLColor.nHue < 0 )
aClampedHSLColor.nHue += 360;
aClampedHSLColor.nSaturation = clamp( aHSLColor.nSaturation, 0.0, 1.0 );
aClampedHSLColor.nLuminance = clamp( aHSLColor.nLuminance, 0.0, 1.0 );
};

HSLColor.prototype.normalizeHue = function()
{
this.nHue = this.nHue % 360;
if( this.nHue < 0 ) this.nHue += 360;
};

HSLColor.prototype.toString = function()
{
return 'hsl(' + this.nHue.toFixed( 3 ) + ','
+ this.nSaturation.toFixed( 3 ) + ','
+ this.nLuminance.toFixed( 3 ) + ')';
};

HSLColor.prototype.convertToRGB = function()
{

var nHue = this.nHue % 360;
if( nHue < 0 ) nHue += 360;
var nSaturation =  clamp( this.nSaturation, 0.0, 1.0 );
var nLuminance = clamp( this.nLuminance, 0.0, 1.0 );


if( nSaturation === 0 )
{
return new RGBColor( nLuminance, nLuminance, nLuminance );
}

var nVal1 = ( nLuminance <= 0.5 ) ?
( nLuminance * (1.0 + nSaturation) ) :
( nLuminance + nSaturation - nLuminance * nSaturation );

var nVal2 = 2.0 * nLuminance - nVal1;

var nRed    = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue + 120 );
var nGreen  = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue );
var nBlue   = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue - 120 );

return new RGBColor( nRed, nGreen, nBlue );
};

HSLColor.hsl2rgbHelper = function( nValue1, nValue2, nHue )
{
nHue = nHue % 360;
if( nHue < 0 )
nHue += 360;

if( nHue < 60.0 )
return nValue1 + ( nValue2 - nValue1 ) * nHue / 60.0;
else if( nHue < 180.0 )
return nValue2;
else if( nHue < 240.0 )
return ( nValue1 + ( nValue2 - nValue1 ) * ( 240.0 - nHue ) / 60.0 );
else
return nValue1;
};

HSLColor.interpolate = function( aFrom, aTo, nT, bCCW )
{
var nS = 1.0 - nT;

var nHue = 0.0;
if( aFrom.nHue <= aTo.nHue && !bCCW )
{
nHue = nS * (aFrom.nHue + 360.0) + nT * aTo.nHue;
}
else if( aFrom.nHue > aTo.nHue && bCCW )
{
nHue = nS * aFrom.nHue + nT * (aTo.nHue + 360.0);
}
else
{
nHue = nS * aFrom.nHue + nT * aTo.nHue;
}

var nSaturation = nS * aFrom.nSaturation + nT * aTo.nSaturation;
var nLuminance = nS * aFrom.nLuminance + nT * aTo.nLuminance;

return new HSLColor( nHue, nSaturation, nLuminance );
};


var SVGIdentityMatrix = document.documentElement.createSVGMatrix();

SVGMatrix.prototype.setToIdentity = function()
{
this.a = this.d = 1;
this.b = this.c = this.d = this.e = 0;
};

SVGMatrix.prototype.setToRotationAroundPoint = function( nX, nY, nAngle )
{
nAngle = Math.PI * nAngle / 180;
var nSin = Math.sin( nAngle );
var nCos = Math.cos( nAngle );

this.a = nCos; this.c = -nSin; this.e = nX * (1 - nCos) + nY * nSin;
this.b = nSin; this.d =  nCos; this.f = nY * (1 - nCos) - nX * nSin;
};


SVGPathElement.prototype.prependPath = function( aPath )
{
var sPathData = aPath.getAttribute( 'd' );
sPathData += ( ' ' + this.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

SVGPathElement.prototype.appendPath = function( aPath )
{
var sPathData = this.getAttribute( 'd' );
sPathData += ( ' ' + aPath.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

function flipOnYAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.a = -1;
aTransform.e = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

function flipOnXAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.d = -1;
aTransform.f = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

SVGPathElement.prototype.matrixTransform = function( aSVGMatrix )
{
if( SVGPathSegList.prototype.matrixTransform )
{
this.pathSegList.matrixTransform( aSVGMatrix );
return;
}

var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
var i;
for( i = 0; i < nLength; ++i )
{
aPathSegList.getItem( i ).matrixTransform( aSVGMatrix );
}
};

SVGPathElement.prototype.changeOrientation = function()
{
var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
if( nLength == 0 ) return;

if( SVGPathSegList.prototype.changeOrientation )
{
aPathSegList.changeOrientation();
return;
}

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList.getItem( 0 );
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.removeItem( 0 );
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList.getItem( i );
var aPoint = aPathSeg.changeOrientation( nCurrentX, nCurrentY );
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
}


for( i = nLength - 2; i >= 0; --i )
{
aPathSeg = aPathSegList.removeItem( i );
aPathSegList.appendItem( aPathSeg );
}

var aMovePathSeg = this.createSVGPathSegMovetoAbs( nCurrentX, nCurrentY );
aPathSegList.insertItemBefore( aMovePathSeg, 0 );

};


try
{   // Firefox, Google Chrome, Internet Explorer, Safari.

SVGPathSegMovetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegLinetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegCurvetoQuadraticAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
};

SVGPathSegCurvetoCubicAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
};


SVGPathSegMovetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegLinetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoQuadraticAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoCubicAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
return aPoint;
};

}
catch( e )
{   // Opera

if( e.name == 'ReferenceError' )
{
SVGPathSeg.prototype.matrixTransform = function( aSVGMatrix )
{
var nX;
switch( this.pathSegTypeAsLetter )
{
case 'C':
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
case 'Q':
nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
case 'M':
case 'L':
SVGPathMatrixTransform( this, aSVGMatrix );
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
}
};

SVGPathSeg.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
switch( this.pathSegTypeAsLetter )
{
case 'C':
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
default:
log( 'SVGPathSeg.changeOrientation: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
return null;
}
}
}
else throw e;
}

function SVGPathMatrixTransform( aPath, aSVGMatrix )
{
var nX = aPath.x;
aPath.x = aSVGMatrix.a * nX + aSVGMatrix.c * aPath.y + aSVGMatrix.e;
aPath.y = aSVGMatrix.b * nX + aSVGMatrix.d * aPath.y + aSVGMatrix.f;
}


function PriorityQueue( aCompareFunc )
{
this.aSequence = [];
this.aCompareFunc = aCompareFunc;
}

PriorityQueue.prototype.clone = function()
{
var aCopy = new PriorityQueue( this.aCompareFunc );
var src = this.aSequence;
var dest = [];
var i, l;
for( i = 0, l = src.length; i < l; ++i )
{
if( i in src )
{
dest.push( src[i] );
}
}
aCopy.aSequence = dest;
return aCopy;
};

PriorityQueue.prototype.top = function()
{
return this.aSequence[this.aSequence.length - 1];
};

PriorityQueue.prototype.isEmpty = function()
{
return ( this.aSequence.length === 0 );
};

PriorityQueue.prototype.push = function( aValue )
{
this.aSequence.unshift( aValue );
this.aSequence.sort(this.aCompareFunc);
};

PriorityQueue.prototype.clear = function()
{
this.aSequence = [];
};

PriorityQueue.prototype.pop = function()
{
return this.aSequence.pop();
};


var ANIMATION_NODE_CUSTOM               = 0;
var ANIMATION_NODE_PAR                  = 1;
var ANIMATION_NODE_SEQ                  = 2;
var ANIMATION_NODE_ITERATE              = 3;
var ANIMATION_NODE_ANIMATE              = 4;
var ANIMATION_NODE_SET                  = 5;
var ANIMATION_NODE_ANIMATEMOTION        = 6;
var ANIMATION_NODE_ANIMATECOLOR         = 7;
var ANIMATION_NODE_ANIMATETRANSFORM     = 8;
var ANIMATION_NODE_TRANSITIONFILTER     = 9;
var ANIMATION_NODE_AUDIO                = 10;
var ANIMATION_NODE_COMMAND              = 11;

var aAnimationNodeTypeInMap = {
'par'               : ANIMATION_NODE_PAR,
'seq'               : ANIMATION_NODE_SEQ,
'iterate'           : ANIMATION_NODE_ITERATE,
'animate'           : ANIMATION_NODE_ANIMATE,
'set'               : ANIMATION_NODE_SET,
'animatemotion'     : ANIMATION_NODE_ANIMATEMOTION,
'animatecolor'      : ANIMATION_NODE_ANIMATECOLOR,
'animatetransform'  : ANIMATION_NODE_ANIMATETRANSFORM,
'transitionfilter'  : ANIMATION_NODE_TRANSITIONFILTER,
'audio'             : ANIMATION_NODE_AUDIO,
'command'           : ANIMATION_NODE_COMMAND
};


function getAnimationElementType( aElement )
{
var sName = aElement.localName.toLowerCase();

if( sName && aAnimationNodeTypeInMap[ sName ] )
return aAnimationNodeTypeInMap[ sName ];
else
return ANIMATION_NODE_CUSTOM;
}


var INVALID_NODE                = 0;
var UNRESOLVED_NODE             = 1;
var RESOLVED_NODE               = 2;
var ACTIVE_NODE                 = 4;
var FROZEN_NODE                 = 8;
var ENDED_NODE                  = 16;

function getNodeStateName( eNodeState )
{
switch( eNodeState )
{
case INVALID_NODE:
return 'INVALID';
case UNRESOLVED_NODE:
return 'UNRESOLVED';
case RESOLVED_NODE:
return 'RESOLVED';
case ACTIVE_NODE:
return 'ACTIVE';
case FROZEN_NODE:
return 'FROZEN';
case ENDED_NODE:
return 'ENDED';
default:
return 'UNKNOWN';
}
}


var IMPRESS_DEFAULT_NODE                    = 0;
var IMPRESS_ON_CLICK_NODE                   = 1;
var IMPRESS_WITH_PREVIOUS_NODE              = 2;
var IMPRESS_AFTER_PREVIOUS_NODE             = 3;
var IMPRESS_MAIN_SEQUENCE_NODE              = 4;
var IMPRESS_TIMING_ROOT_NODE                = 5;
var IMPRESS_INTERACTIVE_SEQUENCE_NODE       = 6;

var aImpressNodeTypeInMap = {
'on-click'                  : IMPRESS_ON_CLICK_NODE,
'with-previous'             : IMPRESS_WITH_PREVIOUS_NODE,
'after-previous'            : IMPRESS_AFTER_PREVIOUS_NODE,
'main-sequence'             : IMPRESS_MAIN_SEQUENCE_NODE,
'timing-root'               : IMPRESS_TIMING_ROOT_NODE,
'interactive-sequence'      : IMPRESS_INTERACTIVE_SEQUENCE_NODE
};

var aImpressNodeTypeOutMap = [ 'default', 'on-click', 'with-previous', 'after-previous',
'main-sequence', 'timing-root', 'interactive-sequence' ];


var aPresetClassInMap = {};


var aPresetIdInMap = {};


var RESTART_MODE_DEFAULT            = 0;
var RESTART_MODE_INHERIT            = 0; // eslint-disable-line no-unused-vars
var RESTART_MODE_ALWAYS             = 1;
var RESTART_MODE_WHEN_NOT_ACTIVE    = 2;
var RESTART_MODE_NEVER              = 3;

var aRestartModeInMap = {
'inherit'       : RESTART_MODE_DEFAULT,
'always'        : RESTART_MODE_ALWAYS,
'whenNotActive' : RESTART_MODE_WHEN_NOT_ACTIVE,
'never'         : RESTART_MODE_NEVER
};

var aRestartModeOutMap = [ 'inherit','always', 'whenNotActive', 'never' ];


var FILL_MODE_DEFAULT           = 0;
var FILL_MODE_INHERIT           = 0; // eslint-disable-line no-unused-vars
var FILL_MODE_REMOVE            = 1;
var FILL_MODE_FREEZE            = 2;
var FILL_MODE_HOLD              = 3;
var FILL_MODE_TRANSITION        = 4;
var FILL_MODE_AUTO              = 5;

var aFillModeInMap = {
'inherit'       : FILL_MODE_DEFAULT,
'remove'        : FILL_MODE_REMOVE,
'freeze'        : FILL_MODE_FREEZE,
'hold'          : FILL_MODE_HOLD,
'transition'    : FILL_MODE_TRANSITION,
'auto'          : FILL_MODE_AUTO
};

var aFillModeOutMap = [ 'inherit', 'remove', 'freeze', 'hold', 'transition', 'auto' ];


var ADDITIVE_MODE_UNKNOWN       = 0; // eslint-disable-line no-unused-vars
var ADDITIVE_MODE_BASE          = 1;
var ADDITIVE_MODE_SUM           = 2;
var ADDITIVE_MODE_REPLACE       = 3;
var ADDITIVE_MODE_MULTIPLY      = 4;
var ADDITIVE_MODE_NONE          = 5;

var aAddittiveModeInMap = {
'base'          : ADDITIVE_MODE_BASE,
'sum'           : ADDITIVE_MODE_SUM,
'replace'       : ADDITIVE_MODE_REPLACE,
'multiply'      : ADDITIVE_MODE_MULTIPLY,
'none'          : ADDITIVE_MODE_NONE
};

var aAddittiveModeOutMap = [ 'unknown', 'base', 'sum', 'replace', 'multiply', 'none' ];


var ACCUMULATE_MODE_NONE        = 0;
var ACCUMULATE_MODE_SUM         = 1;

var aAccumulateModeOutMap = [ 'none', 'sum' ];

var CALC_MODE_DISCRETE          = 1;
var CALC_MODE_LINEAR            = 2;
var CALC_MODE_PACED             = 3;
var CALC_MODE_SPLINE            = 4;

var aCalcModeInMap = {
'discrete'      : CALC_MODE_DISCRETE,
'linear'        : CALC_MODE_LINEAR,
'paced'         : CALC_MODE_PACED,
'spline'        : CALC_MODE_SPLINE
};

var aCalcModeOutMap = [ 'unknown', 'discrete', 'linear', 'paced', 'spline' ];


var COLOR_SPACE_RGB = 0;
var COLOR_SPACE_HSL = 1;

var aColorSpaceInMap = { 'rgb': COLOR_SPACE_RGB, 'hsl': COLOR_SPACE_HSL };

var aColorSpaceOutMap = [ 'rgb', 'hsl' ];


var CLOCKWISE               = 0;
var COUNTERCLOCKWISE        = 1;

var aClockDirectionInMap = { 'clockwise': CLOCKWISE, 'counter-clockwise': COUNTERCLOCKWISE };

var aClockDirectionOutMap = [ 'clockwise', 'counter-clockwise' ];


var UNKNOWN_PROPERTY        = 0; // eslint-disable-line no-unused-vars
var NUMBER_PROPERTY         = 1;
var ENUM_PROPERTY           = 2;
var COLOR_PROPERTY          = 3;
var STRING_PROPERTY         = 4;
var BOOL_PROPERTY           = 5;

var aValueTypeOutMap = [ 'unknown', 'number', 'enum', 'color', 'string', 'boolean' ];


var aAttributeMap =
{
'height':           {   'type':         NUMBER_PROPERTY,
'get':          'getHeight',
'set':          'setHeight',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'opacity':          {   'type':         NUMBER_PROPERTY,
'get':          'getOpacity',
'set':          'setOpacity'                    },

'rotate':           {   'type':         NUMBER_PROPERTY,
'get':          'getRotationAngle',
'set':          'setRotationAngle'              },

'width':            {   'type':         NUMBER_PROPERTY,
'get':          'getWidth',
'set':          'setWidth',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'x':                {   'type':         NUMBER_PROPERTY,
'get':          'getX',
'set':          'setX',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'y':                {   'type':         NUMBER_PROPERTY,
'get':          'getY',
'set':          'setY',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'fill':             {   'type':         ENUM_PROPERTY,
'get':          'getFillStyle',
'set':          'setFillStyle'                  },

'stroke':           {   'type':         ENUM_PROPERTY,
'get':          'getStrokeStyle',
'set':          'setStrokeStyle'                },

'visibility':       {   'type':         ENUM_PROPERTY,
'get':          'getVisibility',
'set':          'setVisibility'                 },

'fill-color':       {   'type':         COLOR_PROPERTY,
'get':          'getFillColor',
'set':          'setFillColor'                  },

'stroke-color':     {   'type':         COLOR_PROPERTY,
'get':          'getStrokeColor',
'set':          'setStrokeColor'                },

'color':            {   'type':         COLOR_PROPERTY,
'get':          'getFontColor',
'set':          'setFontColor'                  }

};


var TRANSITION_INVALID              = 0;    // Invalid type
var TRANSITION_CLIP_POLYPOLYGON     = 1;    // Transition expressed by parametric clip polygon
var TRANSITION_SPECIAL              = 2;    // Transition expressed by hand-crafted function


var BARWIPE_TRANSITION              = 1;
var BOXWIPE_TRANSITION              = 2;
var FOURBOXWIPE_TRANSITION          = 3;
var ELLIPSEWIPE_TRANSITION          = 4; // 17
var CLOCKWIPE_TRANSITION            = 5; // 22
var PINWHEELWIPE_TRANSITION         = 6; // 23
var PUSHWIPE_TRANSITION             = 7; // 35
var SLIDEWIPE_TRANSITION            = 8; // 36
var FADE_TRANSITION                 = 9; // 37
var RANDOMBARWIPE_TRANSITION        = 10; // 38
var CHECKERBOARDWIPE_TRANSITION     = 11; // 39
var DISSOLVE_TRANSITION             = 12; // 40
var SNAKEWIPE_TRANSITION            = 13; // 30
var PARALLELSNAKESWIPE_TRANSITION   = 14; // 32
var IRISWIPE_TRANSITION             = 15; // 12
var BARNDOORWIPE_TRANSITION         = 16; // 4
var VEEWIPE_TRANSITION              = 17; // 8
var ZIGZAGWIPE_TRANSITION           = 18; // 10
var BARNZIGZAGWIPE_TRANSITION       = 19; // 11
var FANWIPE_TRANSITION              = 20; // 25
var SINGLESWEEPWIPE_TRANSITION      = 21; // 24
var WATERFALLWIPE_TRANSITION        = 22; // 34
var SPIRALWIPE_TRANSITION           = 23; // 31
var MISCDIAGONALWIPE_TRANSITION     = 24; // 7
var BOXSNAKESWIPE_TRANSITION        = 25; // 33

var aTransitionTypeInMap = {
'barWipe'           : BARWIPE_TRANSITION,
'boxWipe'           : BOXWIPE_TRANSITION,
'barnDoorWipe'      : BARNDOORWIPE_TRANSITION,
'fourBoxWipe'       : FOURBOXWIPE_TRANSITION,
'ellipseWipe'       : ELLIPSEWIPE_TRANSITION,
'clockWipe'         : CLOCKWIPE_TRANSITION,
'pinWheelWipe'      : PINWHEELWIPE_TRANSITION,
'miscDiagonalWipe'  : MISCDIAGONALWIPE_TRANSITION,
'pushWipe'          : PUSHWIPE_TRANSITION,
'slideWipe'         : SLIDEWIPE_TRANSITION,
'fade'              : FADE_TRANSITION,
'fanWipe'           : FANWIPE_TRANSITION,
'randomBarWipe'     : RANDOMBARWIPE_TRANSITION,
'checkerBoardWipe'  : CHECKERBOARDWIPE_TRANSITION,
'dissolve'          : DISSOLVE_TRANSITION,
'singleSweepWipe'   : SINGLESWEEPWIPE_TRANSITION,
'snakeWipe'         : SNAKEWIPE_TRANSITION,
'parallelSnakesWipe': PARALLELSNAKESWIPE_TRANSITION,
'spiralWipe'        : SPIRALWIPE_TRANSITION,
'boxSnakesWipe'     : BOXSNAKESWIPE_TRANSITION,
'irisWipe'          : IRISWIPE_TRANSITION,
'veeWipe'           : VEEWIPE_TRANSITION,
'zigZagWipe'        : ZIGZAGWIPE_TRANSITION,
'barnZigZagWipe'    : BARNZIGZAGWIPE_TRANSITION,
'waterfallWipe'     : WATERFALLWIPE_TRANSITION
};

var DEFAULT_TRANS_SUBTYPE                       = 0;
var LEFTTORIGHT_TRANS_SUBTYPE                   = 1;
var TOPTOBOTTOM_TRANS_SUBTYPE                   = 2;
var CORNERSIN_TRANS_SUBTYPE                     = 3; // 11
var CORNERSOUT_TRANS_SUBTYPE                    = 4;
var VERTICAL_TRANS_SUBTYPE                      = 5;
var HORIZONTAL_TRANS_SUBTYPE                    = 6; // 14
var DOWN_TRANS_SUBTYPE                          = 7; // 19
var CIRCLE_TRANS_SUBTYPE                        = 8; // 27
var CLOCKWISETWELVE_TRANS_SUBTYPE               = 9; // 33
var CLOCKWISETHREE_TRANS_SUBTYPE                = 10;
var CLOCKWISESIX_TRANS_SUBTYPE                  = 11;
var CLOCKWISENINE_TRANS_SUBTYPE                 = 12;
var TWOBLADEVERTICAL_TRANS_SUBTYPE              = 13;
var TWOBLADEHORIZONTAL_TRANS_SUBTYPE            = 14;
var FOURBLADE_TRANS_SUBTYPE                     = 15; // 39
var FROMLEFT_TRANS_SUBTYPE                      = 16; // 97
var FROMTOP_TRANS_SUBTYPE                       = 17;
var FROMRIGHT_TRANS_SUBTYPE                     = 18;
var FROMBOTTOM_TRANS_SUBTYPE                    = 19;
var CROSSFADE_TRANS_SUBTYPE                     = 20;
var FADETOCOLOR_TRANS_SUBTYPE                   = 21;
var FADEFROMCOLOR_TRANS_SUBTYPE                 = 22;
var FADEOVERCOLOR_TRANS_SUBTYPE                 = 23;
var THREEBLADE_TRANS_SUBTYPE                    = 24;
var EIGHTBLADE_TRANS_SUBTYPE                    = 25;
var ONEBLADE_TRANS_SUBTYPE                      = 26; // 107
var ACROSS_TRANS_SUBTYPE                        = 27;
var TOPLEFTVERTICAL_TRANS_SUBTYPE               = 28; // 109
var TOPLEFTHORIZONTAL_TRANS_SUBTYPE             = 29; // 64
var TOPLEFTDIAGONAL_TRANS_SUBTYPE               = 30; // 65
var TOPRIGHTDIAGONAL_TRANS_SUBTYPE              = 31; // 66
var BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE           = 32; // 67
var BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE            = 33; // 68
var RECTANGLE_TRANS_SUBTYPE                     = 34; // 101
var DIAMOND_TRANS_SUBTYPE                       = 35; // 102
var TOPLEFT_TRANS_SUBTYPE                       = 36; // 3
var TOPRIGHT_TRANS_SUBTYPE                      = 37; // 4
var BOTTOMRIGHT_TRANS_SUBTYPE                   = 38; // 5
var BOTTOMLEFT_TRANS_SUBTYPE                    = 39; // 6
var TOPCENTER_TRANS_SUBTYPE                     = 40; // 7
var RIGHTCENTER_TRANS_SUBTYPE                   = 41; // 8
var BOTTOMCENTER_TRANS_SUBTYPE                  = 42; // 9
var LEFTCENTER_TRANS_SUBTYPE                    = 43; // 10
var LEFT_TRANS_SUBTYPE                          = 44; // 20
var UP_TRANS_SUBTYPE                            = 45; // 21
var RIGHT_TRANS_SUBTYPE                         = 46; // 22
var DIAGONALBOTTOMLEFT_TRANS_SUBTYPE            = 47; // 15
var DIAGONALTOPLEFT_TRANS_SUBTYPE               = 48; // 16
var CENTERTOP_TRANS_SUBTYPE                     = 49; // 48
var CENTERRIGHT_TRANS_SUBTYPE                   = 50; // 49
var TOP_TRANS_SUBTYPE                           = 51; // 50
var BOTTOM_TRANS_SUBTYPE                        = 52; // 52
var CLOCKWISETOP_TRANS_SUBTYPE                  = 53; // 40
var CLOCKWISERIGHT_TRANS_SUBTYPE                = 54; // 41
var CLOCKWISEBOTTOM_TRANS_SUBTYPE               = 55; // 42
var CLOCKWISELEFT_TRANS_SUBTYPE                 = 56; // 43
var CLOCKWISETOPLEFT_TRANS_SUBTYPE              = 57; // 44
var COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE    = 58; // 45
var CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE          = 59; // 46
var COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE      = 60; // 47
var VERTICALLEFT_TRANS_SUBTYPE                  = 61; // 93
var VERTICALRIGHT_TRANS_SUBTYPE                 = 62; // 94
var HORIZONTALLEFT_TRANS_SUBTYPE                = 63; // 95
var HORIZONTALRIGHT_TRANS_SUBTYPE               = 64; // 96
var TOPLEFTCLOCKWISE_TRANS_SUBTYPE              = 65; // 69
var TOPRIGHTCLOCKWISE_TRANS_SUBTYPE             = 66; // 70
var BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE          = 67; // 71
var BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE           = 68; // 72
var TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE       = 69; // 73
var TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE      = 70; // 74
var BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE   = 71; // 75
var BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE    = 72; // 76
var DOUBLEBARNDOOR_TRANS_SUBTYPE                = 73; // 17
var DOUBLEDIAMOND_TRANS_SUBTYPE                 = 74; // 18
var VERTICALTOPSAME_TRANS_SUBTYPE               = 75; // 77
var VERTICALBOTTOMSAME_TRANS_SUBTYPE            = 76; // 78
var VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 77; // 79
var VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 78; // 80
var HORIZONTALLEFTSAME_TRANS_SUBTYPE            = 79; // 81
var HORIZONTALRIGHTSAME_TRANS_SUBTYPE           = 80; // 82
var HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE     = 81; // 83
var HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE    = 82; // 84
var DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 83; // 85
var DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 84; // 86
var TWOBOXTOP_TRANS_SUBTYPE                     = 85; // 87
var TWOBOXBOTTOM_TRANS_SUBTYPE                  = 86; // 88
var TWOBOXLEFT_TRANS_SUBTYPE                    = 87; // 89
var TWOBOXRIGHT_TRANS_SUBTYPE                   = 88; // 90
var FOURBOXVERTICAL_TRANS_SUBTYPE               = 89; // 91
var FOURBOXHORIZONTAL_TRANS_SUBTYPE             = 90; // 92

var aTransitionSubtypeInMap = {
'default'                       : DEFAULT_TRANS_SUBTYPE,
'leftToRight'                   : LEFTTORIGHT_TRANS_SUBTYPE,
'topToBottom'                   : TOPTOBOTTOM_TRANS_SUBTYPE,
'cornersIn'                     : CORNERSIN_TRANS_SUBTYPE,
'cornersOut'                    : CORNERSOUT_TRANS_SUBTYPE,
'vertical'                      : VERTICAL_TRANS_SUBTYPE,
'centerTop'                     : CENTERTOP_TRANS_SUBTYPE,
'centerRight'                   : CENTERRIGHT_TRANS_SUBTYPE,
'top'                           : TOP_TRANS_SUBTYPE,
'right'                         : RIGHT_TRANS_SUBTYPE,
'bottom'                        : BOTTOM_TRANS_SUBTYPE,
'left'                          : LEFT_TRANS_SUBTYPE,
'horizontal'                    : HORIZONTAL_TRANS_SUBTYPE,
'down'                          : DOWN_TRANS_SUBTYPE,
'circle'                        : CIRCLE_TRANS_SUBTYPE,
'clockwiseTwelve'               : CLOCKWISETWELVE_TRANS_SUBTYPE,
'clockwiseThree'                : CLOCKWISETHREE_TRANS_SUBTYPE,
'clockwiseSix'                  : CLOCKWISESIX_TRANS_SUBTYPE,
'clockwiseNine'                 : CLOCKWISENINE_TRANS_SUBTYPE,
'clockwiseRight'                : CLOCKWISERIGHT_TRANS_SUBTYPE,
'clockwiseTop'                  : CLOCKWISETOP_TRANS_SUBTYPE,
'clockwiseBottom'               : CLOCKWISEBOTTOM_TRANS_SUBTYPE,
'clockwiseLeft'                 : CLOCKWISELEFT_TRANS_SUBTYPE,
'clockwiseTopLeft'              : CLOCKWISETOPLEFT_TRANS_SUBTYPE,
'counterClockwiseBottomLeft'    : COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE,
'clockwiseBottomRight'          : CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE,
'counterClockwiseTopRight'      : COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE,
'twoBladeVertical'              : TWOBLADEVERTICAL_TRANS_SUBTYPE,
'twoBladeHorizontal'            : TWOBLADEHORIZONTAL_TRANS_SUBTYPE,
'fourBlade'                     : FOURBLADE_TRANS_SUBTYPE,
'fromLeft'                      : FROMLEFT_TRANS_SUBTYPE,
'fromTop'                       : FROMTOP_TRANS_SUBTYPE,
'fromRight'                     : FROMRIGHT_TRANS_SUBTYPE,
'fromBottom'                    : FROMBOTTOM_TRANS_SUBTYPE,
'crossfade'                     : CROSSFADE_TRANS_SUBTYPE,
'fadeToColor'                   : FADETOCOLOR_TRANS_SUBTYPE,
'fadeFromColor'                 : FADEFROMCOLOR_TRANS_SUBTYPE,
'fadeOverColor'                 : FADEOVERCOLOR_TRANS_SUBTYPE,
'threeBlade'                    : THREEBLADE_TRANS_SUBTYPE,
'eightBlade'                    : EIGHTBLADE_TRANS_SUBTYPE,
'oneBlade'                      : ONEBLADE_TRANS_SUBTYPE,
'across'                        : ACROSS_TRANS_SUBTYPE,
'topLeftVertical'               : TOPLEFTVERTICAL_TRANS_SUBTYPE,
'topLeftHorizontal'             : TOPLEFTHORIZONTAL_TRANS_SUBTYPE,
'topLeftDiagonal'               : TOPLEFTDIAGONAL_TRANS_SUBTYPE,
'topRightDiagonal'              : TOPRIGHTDIAGONAL_TRANS_SUBTYPE,
'bottomRightDiagonal'           : BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE,
'topLeftClockwise'              : TOPLEFTCLOCKWISE_TRANS_SUBTYPE,
'topRightClockwise'             : TOPRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomRightClockwise'          : BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftClockwise'           : BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE,
'topLeftCounterClockwise'       : TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'topRightCounterClockwise'      : TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomRightCounterClockwise'   : BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftCounterClockwise'    : BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftDiagonal'            : BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE,
'rectangle'                     : RECTANGLE_TRANS_SUBTYPE,
'diamond'                       : DIAMOND_TRANS_SUBTYPE,
'topLeft'                       : TOPLEFT_TRANS_SUBTYPE,
'topRight'                      : TOPRIGHT_TRANS_SUBTYPE,
'bottomRight'                   : BOTTOMRIGHT_TRANS_SUBTYPE,
'bottomLeft'                    : BOTTOMLEFT_TRANS_SUBTYPE,
'topCenter'                     : TOPCENTER_TRANS_SUBTYPE,
'rightCenter'                   : RIGHTCENTER_TRANS_SUBTYPE,
'bottomCenter'                  : BOTTOMCENTER_TRANS_SUBTYPE,
'leftCenter'                    : LEFTCENTER_TRANS_SUBTYPE,
'up'                            : UP_TRANS_SUBTYPE,
'diagonalBottomLeft'            : DIAGONALBOTTOMLEFT_TRANS_SUBTYPE,
'diagonalTopLeft'               : DIAGONALTOPLEFT_TRANS_SUBTYPE,
'verticalLeft'                  : VERTICALLEFT_TRANS_SUBTYPE,
'verticalRight'                 : VERTICALRIGHT_TRANS_SUBTYPE,
'horizontalLeft'                : HORIZONTALLEFT_TRANS_SUBTYPE,
'horizontalRight'               : HORIZONTALRIGHT_TRANS_SUBTYPE,
'doubleBarnDoor'                : DOUBLEBARNDOOR_TRANS_SUBTYPE,
'doubleDiamond'                 : DOUBLEDIAMOND_TRANS_SUBTYPE,
'verticalTopSame'               : VERTICALTOPSAME_TRANS_SUBTYPE,
'verticalBottomSame'            : VERTICALBOTTOMSAME_TRANS_SUBTYPE,
'verticalTopLeftOpposite'       : VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'verticalBottomLeftOpposite'    : VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalLeftSame'            : HORIZONTALLEFTSAME_TRANS_SUBTYPE,
'horizontalRightSame'           : HORIZONTALRIGHTSAME_TRANS_SUBTYPE,
'horizontalTopLeftOpposite'     : HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalTopRightOpposite'    : HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE,
'diagonalBottomLeftOpposite'    : DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'diagonalTopLeftOpposite'       : DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'twoBoxTop'                     : TWOBOXTOP_TRANS_SUBTYPE,
'twoBoxBottom'                  : TWOBOXBOTTOM_TRANS_SUBTYPE,
'twoBoxLeft'                    : TWOBOXLEFT_TRANS_SUBTYPE,
'twoBoxRight'                   : TWOBOXRIGHT_TRANS_SUBTYPE,
'fourBoxVertical'               : FOURBOXVERTICAL_TRANS_SUBTYPE,
'fourBoxHorizontal'             : FOURBOXHORIZONTAL_TRANS_SUBTYPE
};

var TRANSITION_MODE_IN  = 1;
var TRANSITION_MODE_OUT = 0;

var aTransitionModeOutMap = [ 'out', 'in' ];


var REVERSEMETHOD_IGNORE                    = 0;
var REVERSEMETHOD_INVERT_SWEEP              = 1;
var REVERSEMETHOD_SUBTRACT_POLYGON          = 2;
var REVERSEMETHOD_SUBTRACT_AND_INVERT       = 3;
var REVERSEMETHOD_ROTATE_180                = 4;
var REVERSEMETHOD_FLIP_X                    = 5;
var REVERSEMETHOD_FLIP_Y                    = 6;

var aReverseMethodOutMap = ['ignore', 'invert sweep', 'subtract polygon',
'subtract and invert', 'rotate 180', 'flip x', 'flip y'];


var aTransitionInfoTable = {};

aTransitionInfoTable[0] = {};
aTransitionInfoTable[0][0] =
{
'class' : TRANSITION_INVALID,
'rotationAngle' : 0.0,
'scaleX' : 0.0,
'scaleY' : 0.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[SNAKEWIPE_TRANSITION] = {};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
}

aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALLEFTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALRIGHTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SPIRALWIPE_TRANSITION] = {};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNDOORWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 90.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALTOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': -45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION] = {};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEBARNDOOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEDIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1,
'scaleY': 1,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION] = {};
aTransitionInfoTable[IRISWIPE_TRANSITION][RECTANGLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION][DIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[ZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARWIPE_TRANSITION] = {};
aTransitionInfoTable[BARWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[WATERFALLWIPE_TRANSITION] = {};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][RIGHTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][LEFTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FOURBOXWIPE_TRANSITION] = {};
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSIN_TRANS_SUBTYPE] =
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSOUT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[ELLIPSEWIPE_TRANSITION] = {};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][CIRCLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CLOCKWIPE_TRANSITION] = {};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETWELVE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETHREE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISESIX_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISENINE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[VEEWIPE_TRANSITION] = {};
aTransitionInfoTable[VEEWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][UP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FANWIPE_TRANSITION] = {};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][TOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][BOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[PINWHEELWIPE_TRANSITION] = {};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][ONEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEVERTICAL_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][THREEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][FOURBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][EIGHTBLADE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};

aTransitionInfoTable[PUSHWIPE_TRANSITION] = {};
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION] = {};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISERIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISELEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SLIDEWIPE_TRANSITION] = {};
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FADE_TRANSITION] = {};
aTransitionInfoTable[FADE_TRANSITION][CROSSFADE_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADETOCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEFROMCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEOVERCOLOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[RANDOMBARWIPE_TRANSITION] = {};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION] = {};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][ACROSS_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[DISSOLVE_TRANSITION] = {};
aTransitionInfoTable[DISSOLVE_TRANSITION][DEFAULT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};


function createStateTransitionTable()
{
var aSTT = {};

aSTT[RESTART_MODE_NEVER] = {};
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE] = {};
aSTT[RESTART_MODE_ALWAYS] = {};

var aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = ENDED_NODE;    // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = ENDED_NODE;
aTable[ENDED_NODE]          = ENDED_NODE;   // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

return aSTT;
}

var aStateTransitionTable = createStateTransitionTable();


function getTransitionTable( eRestartMode, eFillMode )
{
if( eRestartMode == RESTART_MODE_DEFAULT )
{
log( 'getTransitionTable: unexpected restart mode: ' + eRestartMode
+ '. Used NEVER instead.');
eRestartMode = RESTART_MODE_NEVER;
}

if( eFillMode == FILL_MODE_DEFAULT ||
eFillMode == FILL_MODE_AUTO )
{
eFillMode = FILL_MODE_REMOVE;
}

return aStateTransitionTable[eRestartMode][eFillMode];
}


var EVENT_TRIGGER_UNKNOWN               = 0;
var EVENT_TRIGGER_ON_SLIDE_BEGIN        = 1; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_SLIDE_END          = 2; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_BEGIN_EVENT           = 3;
var EVENT_TRIGGER_END_EVENT             = 4;
var EVENT_TRIGGER_ON_CLICK              = 5;
var EVENT_TRIGGER_ON_DBL_CLICK          = 6; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_ENTER        = 7; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_LEAVE        = 8; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_NEXT_EFFECT        = 9;
var EVENT_TRIGGER_ON_PREV_EFFECT        = 10;
var EVENT_TRIGGER_REPEAT                = 11; // eslint-disable-line no-unused-vars

var aEventTriggerOutMap = [ 'unknown', 'slideBegin', 'slideEnd', 'begin', 'end', 'click',
'doubleClick', 'mouseEnter', 'mouseLeave', 'next', 'previous', 'repeat' ];


function getEventTriggerType( sEventTrigger )
{
if( sEventTrigger == 'begin' )
return EVENT_TRIGGER_BEGIN_EVENT;
else if( sEventTrigger == 'end' )
return EVENT_TRIGGER_END_EVENT;
else if( sEventTrigger == 'next' )
return EVENT_TRIGGER_ON_NEXT_EFFECT;
else if( sEventTrigger == 'prev' )
return EVENT_TRIGGER_ON_PREV_EFFECT;
else if( sEventTrigger == 'click' )
return EVENT_TRIGGER_ON_CLICK;
else
return EVENT_TRIGGER_UNKNOWN;
}


var UNKNOWN_TIMING          = 0;
var OFFSET_TIMING           = 1;
var WALLCLOCK_TIMING        = 2; // eslint-disable-line no-unused-vars
var INDEFINITE_TIMING       = 3;
var EVENT_TIMING            = 4;
var SYNCBASE_TIMING         = 5;
var MEDIA_TIMING            = 6; // eslint-disable-line no-unused-vars

var aTimingTypeOutMap = [ 'unknown', 'offset', 'wallclock', 'indefinite', 'event', 'syncbase', 'media' ];


var CHARCODE_PLUS       = '+'.charCodeAt(0);
var CHARCODE_MINUS      = '-'.charCodeAt(0);
var CHARCODE_0          = '0'.charCodeAt(0);
var CHARCODE_9          = '9'.charCodeAt(0);


function Timing( aAnimationNode, sTimingAttribute )
{
this.aAnimationNode = aAnimationNode;     // the node, the timing attribute belongs to
this.sTimingDescription = removeWhiteSpaces( sTimingAttribute );
this.eTimingType = UNKNOWN_TIMING;
this.nOffset = 0.0;                       // in seconds
this.sEventBaseElementId = '';            // the element id for event based timing
this.eEventType = EVENT_TRIGGER_UNKNOWN;  // the event type
}

Timing.prototype.getAnimationNode = function()
{
return this.aAnimationNode;
};

Timing.prototype.getType = function()
{
return this.eTimingType;
};

Timing.prototype.getOffset = function()
{
return this.nOffset;
};

Timing.prototype.getEventBaseElementId = function()
{
return this.sEventBaseElementId;
};

Timing.prototype.getEventType = function()
{
return this.eEventType;
};

Timing.prototype.parse = function()
{
if( !this.sTimingDescription )
{
this.eTimingType = OFFSET_TIMING;
return;
}

if( this.sTimingDescription == 'indefinite' )
this.eTimingType = INDEFINITE_TIMING;
else
{
var nFirstCharCode = this.sTimingDescription.charCodeAt(0);
var bPositiveOffset = !( nFirstCharCode == CHARCODE_MINUS );
if ( ( nFirstCharCode == CHARCODE_PLUS ) ||
( nFirstCharCode == CHARCODE_MINUS ) ||
( ( nFirstCharCode >= CHARCODE_0 ) && ( nFirstCharCode <= CHARCODE_9 ) ) )
{
var sClockValue
= ( ( nFirstCharCode == CHARCODE_PLUS ) || ( nFirstCharCode == CHARCODE_MINUS ) )
? this.sTimingDescription.substr( 1 )
: this.sTimingDescription;

var TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.eTimingType = OFFSET_TIMING;
this.nOffset = bPositiveOffset ? TimeInSec : -TimeInSec;
}
}
else
{
var aTimingSplit = [];
bPositiveOffset = true;
if( this.sTimingDescription.indexOf( '+' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '+' );
}
else if( this.sTimingDescription.indexOf( '-' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '-' );
bPositiveOffset = false;
}
else
{
aTimingSplit[0] = this.sTimingDescription;
aTimingSplit[1] = '';
}

if( aTimingSplit[0].indexOf( '.' ) != -1 )
{
var aEventSplit = aTimingSplit[0].split( '.' );
this.sEventBaseElementId = aEventSplit[0];
this.eEventType = getEventTriggerType( aEventSplit[1] );
}
else
{
this.eEventType = getEventTriggerType( aTimingSplit[0] );
}

if( this.eEventType == EVENT_TRIGGER_UNKNOWN )
return;

if( ( this.eEventType == EVENT_TRIGGER_BEGIN_EVENT ) ||
( this.eEventType == EVENT_TRIGGER_END_EVENT ) )
{
this.eTimingType = SYNCBASE_TIMING;
}
else
{
this.eTimingType = EVENT_TIMING;
}

if( aTimingSplit[1] )
{
sClockValue = aTimingSplit[1];
TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.nOffset = ( bPositiveOffset ) ? TimeInSec : -TimeInSec;
}
else
{
this.eTimingType = UNKNOWN_TIMING;
}

}
}
}

};

Timing.parseClockValue = function( sClockValue )
{
if( !sClockValue )
return 0.0;

var nTimeInSec = undefined;

var reFullClockValue = /^([0-9]+):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var rePartialClockValue = /^([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var reTimeCountValue = /^([0-9]+)(.[0-9]+)?(h|min|s|ms)?$/;

if( reFullClockValue.test( sClockValue ) )
{
var aClockTimeParts = reFullClockValue.exec( sClockValue );

var nHours = parseInt( aClockTimeParts[1] );
var nMinutes = parseInt( aClockTimeParts[2] );
var nSeconds = parseInt( aClockTimeParts[3] );
if( aClockTimeParts[4] )
nSeconds += parseFloat( aClockTimeParts[4] );

nTimeInSec = ( ( nHours * 60 ) +  nMinutes ) * 60 + nSeconds;

}
else if( rePartialClockValue.test( sClockValue ) )
{
aClockTimeParts = rePartialClockValue.exec( sClockValue );

nMinutes = parseInt( aClockTimeParts[1] );
nSeconds = parseInt( aClockTimeParts[2] );
if( aClockTimeParts[3] )
nSeconds += parseFloat( aClockTimeParts[3] );

nTimeInSec = nMinutes * 60 + nSeconds;
}
else if( reTimeCountValue.test( sClockValue ) )
{
aClockTimeParts = reTimeCountValue.exec( sClockValue );

var nTimeCount = parseInt( aClockTimeParts[1] );
if( aClockTimeParts[2] )
nTimeCount += parseFloat( aClockTimeParts[2] );

if( aClockTimeParts[3] )
{
if( aClockTimeParts[3] == 'h' )
{
nTimeInSec = nTimeCount * 3600;
}
else if( aClockTimeParts[3] == 'min' )
{
nTimeInSec = nTimeCount * 60;
}
else if( aClockTimeParts[3] == 's' )
{
nTimeInSec = nTimeCount;
}
else if( aClockTimeParts[3] == 'ms' )
{
nTimeInSec = nTimeCount / 1000;
}
}
else
{
nTimeInSec = nTimeCount;
}

}

if( nTimeInSec )
nTimeInSec = parseFloat( nTimeInSec.toFixed( 3 ) );
return nTimeInSec;
};

Timing.prototype.info = function( bVerbose )
{

var sInfo = '';

if( bVerbose )
{
sInfo = 'description: ' + this.sTimingDescription + ', ';

sInfo += ', type: ' +  aTimingTypeOutMap[ this.getType() ];
sInfo += ', offset: ' + this.getOffset();
sInfo += ', event base element id: ' + this.getEventBaseElementId();
sInfo += ', timing event type: ' + aEventTriggerOutMap[ this.getEventType() ];
}
else
{
switch( this.getType() )
{
case INDEFINITE_TIMING:
sInfo += 'indefinite';
break;
case OFFSET_TIMING:
sInfo += this.getOffset();
break;
case EVENT_TIMING:
case SYNCBASE_TIMING:
if( this.getEventBaseElementId() )
sInfo += this.getEventBaseElementId() + '.';
sInfo += aEventTriggerOutMap[ this.getEventType() ];
if( this.getOffset() )
{
if( this.getOffset() > 0 )
sInfo += '+';
sInfo += this.getOffset();
}
}
}

return sInfo;
};


function Duration( sDurationAttribute )
{
this.bIndefinite = false;
this.bMedia = false;
this.nValue = undefined;
this.bDefined = false;

if( !sDurationAttribute )
return;

if( sDurationAttribute == 'indefinite' )
this.bIndefinite = true;
else if( sDurationAttribute == 'media' )
this.bMedia = true;
else
{
this.nValue = Timing.parseClockValue( sDurationAttribute );
if( this.nValue <= 0.0 )
this.nValue = 0.001;  // duration must be always greater than 0
}
this.bDefined = true;
}


Duration.prototype.isSet = function()
{
return this.bDefined;
};

Duration.prototype.isIndefinite = function()
{
return this.bIndefinite;
};

Duration.prototype.isMedia = function()
{
return this.bMedia;
};

Duration.prototype.isValue = function()
{
return this.nValue != undefined;
};

Duration.prototype.getValue= function()
{
return this.nValue;
};

Duration.prototype.info= function()
{
var sInfo;

if( this.isIndefinite() )
sInfo = 'indefinite';
else if( this.isMedia() )
sInfo = 'media';
else if( this.getValue() )
sInfo = this.getValue();

return sInfo;
};


function AnimationNode()
{
}

AnimationNode.prototype.init = function() {};
AnimationNode.prototype.resolve = function() {};
AnimationNode.prototype.activate = function() {};
AnimationNode.prototype.deactivate = function() {};
AnimationNode.prototype.end = function() {};
AnimationNode.prototype.getState = function() {};
AnimationNode.prototype.registerDeactivatingListener = function() {};
AnimationNode.prototype.notifyDeactivating = function() {};


function NodeContext( aSlideShowContext )
{
this.aContext = aSlideShowContext;
this.aAnimationNodeMap = null;
this.aAnimatedElementMap = null;
this.aSourceEventElementMap = null;
this.nStartDelay = 0.0;
this.bFirstRun = undefined;
this.aSlideHeight = HEIGHT;
this.aSlideWidth = WIDTH;
}


NodeContext.prototype.makeSourceEventElement = function( sId, aEventBaseElem )
{
if( !aEventBaseElem )
{
log( 'NodeContext.makeSourceEventElement: event base element is not valid' );
return null;
}

if( !this.aContext.aEventMultiplexer )
{
log( 'NodeContext.makeSourceEventElement: event multiplexer not initialized' );
return null;
}

if( !this.aSourceEventElementMap[ sId ] )
{
this.aSourceEventElementMap[ sId ] = new SourceEventElement( sId, aEventBaseElem, this.aContext.aEventMultiplexer );
}
return this.aSourceEventElementMap[ sId ];
};


function StateTransition( aBaseNode )
{
this.aNode = aBaseNode;
this.eToState = INVALID_NODE;
}

StateTransition.prototype.enter = function( eNodeState, bForce )
{
if( !bForce ) bForce = false;

if( this.eToState != INVALID_NODE )
{
log( 'StateTransition.enter: commit() before enter()ing again!' );
return false;
}
if( !bForce && !this.aNode.isTransition( this.aNode.getState(), eNodeState  ) )
return false;

if( ( this.aNode.nCurrentStateTransition & eNodeState ) != 0 )
return false; // already in wanted transition

this.aNode.nCurrentStateTransition |= eNodeState;
this.eToState = eNodeState;
return true;
};

StateTransition.prototype.commit = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.eCurrentState = this.eToState;
this.clear();
}
};

StateTransition.prototype.clear = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.nCurrentStateTransition &= ~this.eToState;
this.eToState = INVALID_NODE;
}
};


function BaseNode( aAnimElem, aParentNode, aNodeContext )
{
this.nId = getUniqueId();
this.sClassName = 'BaseNode';

if( !aAnimElem )
log( 'BaseNode(id:' + this.nId + ') constructor: aAnimElem is not valid' );

if( !aNodeContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext is not valid' );

if( !aNodeContext.aContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext.aContext is not valid' );


this.bIsContainer = false;
this.aElement = aAnimElem;
this.aParentNode = aParentNode;
this.aNodeContext = aNodeContext;
this.aContext = aNodeContext.aContext;
this.nStartDelay = aNodeContext.nStartDelay;
this.eCurrentState = UNRESOLVED_NODE;
this.nCurrentStateTransition = 0;
this.aDeactivatingListenerArray = [];
this.aActivationEvent = null;
this.aDeactivationEvent = null;

this.aBegin = null;
this.aDuration = null;
this.aEnd = null;
this.bMainSequenceRootNode = false;
this.bInteractiveSequenceRootNode = false;
this.eFillMode = FILL_MODE_FREEZE;
this.eRestartMode = RESTART_MODE_NEVER;
this.nReapeatCount = undefined;
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
this.bAutoReverse = false;

}
extend( BaseNode, AnimationNode );


BaseNode.prototype.getId = function()
{
return this.nId;
};

BaseNode.prototype.parseElement = function()
{
var aAnimElem = this.aElement;

var sIdAttr = aAnimElem.getAttributeNS( NSS['xml'], 'id' );
if( sIdAttr )
this.aNodeContext.aAnimationNodeMap[ sIdAttr ] = this;

this.aBegin = null;
var sBeginAttr = aAnimElem.getAttributeNS( NSS['smil'], 'begin' );
this.aBegin = new Timing( this, sBeginAttr );
this.aBegin.parse();

this.aEnd = null;
var sEndAttr = aAnimElem.getAttributeNS( NSS['smil'], 'end' );
if( sEndAttr )
{
this.aEnd = new Timing( this, sEndAttr );
this.aEnd.parse();
}

this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
if( this.isContainer() )
this.aDuration = null;
else
this.aDuration = new Duration( 'indefinite' );
}

var sFillAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fill' );
if( sFillAttr && aFillModeInMap[ sFillAttr ])
this.eFillMode = aFillModeInMap[ sFillAttr ];
else
this.eFillMode = FILL_MODE_DEFAULT;

var sRestartAttr = aAnimElem.getAttributeNS( NSS['smil'], 'restart' );
if( sRestartAttr && aRestartModeInMap[ sRestartAttr ] )
this.eRestartMode = aRestartModeInMap[ sRestartAttr ];
else
this.eRestartMode = RESTART_MODE_DEFAULT;

var sRepeatCount = aAnimElem.getAttributeNS( NSS['smil'], 'repeatCount' );
if( !sRepeatCount )
this.nReapeatCount = 1;
else
this.nReapeatCount = parseFloat( sRepeatCount );
if( ( isNaN(this.nReapeatCount) ) && ( sRepeatCount != 'indefinite' ) )
this.nReapeatCount = 1;

this.nAccelerate = 0.0;
var sAccelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accelerate' );
if( sAccelerateAttr )
this.nAccelerate = parseFloat( sAccelerateAttr );
if( isNaN(this.nAccelerate) )
this.nAccelerate = 0.0;

this.nDecelerate = 0.0;
var sDecelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'decelerate' );
if( sDecelerateAttr )
this.nDecelerate = parseFloat( sDecelerateAttr );
if( isNaN(this.nDecelerate) )
this.nDecelerate = 0.0;

this.bAutoreverse = false;
var sAutoReverseAttr = aAnimElem.getAttributeNS( NSS['smil'], 'autoReverse' );
if( sAutoReverseAttr == 'true' )
this.bAutoreverse = true;


if( this.eFillMode == FILL_MODE_DEFAULT )
if( this.getParentNode() )
this.eFillMode = this.getParentNode().getFillMode();
else
this.eFillMode = FILL_MODE_AUTO;

if( this.eFillMode ==  FILL_MODE_AUTO ) // see SMIL recommendation document
{
this.eFillMode = ( this.aEnd ||
( this.nReapeatCount != 1) ||
( this.aDuration && !this.aDuration.isIndefinite() ) )
? FILL_MODE_REMOVE
: FILL_MODE_FREEZE;
}

if( this.eRestartMode == RESTART_MODE_DEFAULT )
if( this.getParentNode() )
this.eRestartMode = this.getParentNode().getRestartMode();
else
this.eRestartMode = RESTART_MODE_ALWAYS;

if( ( this.nAccelerate + this.nDecelerate ) > 1.0 )
{
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
}

this.aStateTransTable = getTransitionTable( this.getRestartMode(), this.getFillMode() );

return true;
};

BaseNode.prototype.getParentNode = function()
{
return this.aParentNode;
};

BaseNode.prototype.init = function()
{
this.DBG( this.callInfo( 'init' ) );
if( ! this.checkValidNode() )
return false;
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();

this.eCurrentState = UNRESOLVED_NODE;

return this.init_st();
};

BaseNode.prototype.resolve = function()
{
if( ! this.checkValidNode() )
return false;

this.DBG( this.callInfo( 'resolve' ) );

if( this.eCurrentState == RESOLVED_NODE )
log( 'BaseNode.resolve: already in RESOLVED state' );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( RESOLVED_NODE ) &&
this.isTransition( RESOLVED_NODE, ACTIVE_NODE ) &&
this.resolve_st() )
{
aStateTrans.commit();

if( this.aActivationEvent )
{
this.aActivationEvent.charge();
}
else
{
this.aActivationEvent = makeDelay( bind( this, this.activate ), this.getBegin().getOffset() + this.nStartDelay );
}
registerEvent( this.getId(), this.getBegin(), this.aActivationEvent, this.aNodeContext );

return true;
}

return false;
};

BaseNode.prototype.activate = function()
{
if( ! this.checkValidNode() )
return false;

if( this.eCurrentState == ACTIVE_NODE )
log( 'BaseNode.activate: already in ACTIVE state' );

this.DBG( this.callInfo( 'activate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( ACTIVE_NODE ) )
{
this.activate_st();
aStateTrans.commit();
if( !this.aContext.aEventMultiplexer )
log( 'BaseNode.activate: this.aContext.aEventMultiplexer is not valid' );
this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_BEGIN_EVENT, this.getId() );
return true;
}
return false;
};

BaseNode.prototype.deactivate = function()
{
if( this.inStateOrTransition( ENDED_NODE | FROZEN_NODE ) || !this.checkValidNode() )
return;

if( this.isTransition( this.eCurrentState, FROZEN_NODE ) )
{
this.DBG( this.callInfo( 'deactivate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( FROZEN_NODE, true /* FORCE */ ) )
{
this.deactivate_st( FROZEN_NODE );
aStateTrans.commit();

this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
}
else
{
this.end();
}
};

BaseNode.prototype.end = function()
{
var bIsFrozenOrInTransitionToFrozen = this.inStateOrTransition( FROZEN_NODE );
if( this.inStateOrTransition( ENDED_NODE ) || !this.checkValidNode() )
return;

if( !(this.isTransition( this.eCurrentState, ENDED_NODE ) ) )
log( 'BaseNode.end: end state not reachable in transition table' );

this.DBG( this.callInfo( 'end' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( ENDED_NODE, true /* FORCE */ ) )
{
this.deactivate_st( ENDED_NODE );
aStateTrans.commit();

if( !bIsFrozenOrInTransitionToFrozen )
this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
};

BaseNode.prototype.dispose = function()
{
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
this.aDeactivatingListenerArray = [];
};

BaseNode.prototype.getState = function()
{
return this.eCurrentState;
};

BaseNode.prototype.registerDeactivatingListener = function( aNotifiee )
{
if (! this.checkValidNode())
return false;

if( !aNotifiee )
{
log( 'BaseNode.registerDeactivatingListener(): invalid notifiee' );
return false;
}
this.aDeactivatingListenerArray.push( aNotifiee );

return true;
};

BaseNode.prototype.notifyDeactivating = function( aNotifier )
{
assert( ( aNotifier.getState() == FROZEN_NODE ) || ( aNotifier.getState() == ENDED_NODE ),
'BaseNode.notifyDeactivating: Notifier node is neither in FROZEN nor in ENDED state' );
};

BaseNode.prototype.isMainSequenceRootNode = function()
{
return this.bMainSequenceRootNode;
};

BaseNode.prototype.isInteractiveSequenceRootNode = function()
{
return this.bInteractiveSequenceRootNode;
};

BaseNode.prototype.makeDeactivationEvent = function( nDelay )
{
if( this.aDeactivationEvent )
{
this.aDeactivationEvent.charge();
}
else
{
if( typeof( nDelay ) == typeof(0) )
this.aDeactivationEvent = makeDelay( bind( this, this.deactivate ), nDelay );
else
this.aDeactivationEvent = null;
}
return this.aDeactivationEvent;
};

BaseNode.prototype.scheduleDeactivationEvent = function( aEvent )
{
this.DBG( this.callInfo( 'scheduleDeactivationEvent' ) );

if( !aEvent )
{
if( this.getDuration() && this.getDuration().isValue() )
aEvent = this.makeDeactivationEvent( this.getDuration().getValue() );
}
if( aEvent )
{
this.aContext.aTimerEventQueue.addEvent( aEvent );
}
};

BaseNode.prototype.checkValidNode = function()
{
return ( this.eCurrentState != INVALID_NODE );
};

BaseNode.prototype.init_st = function()
{
return true;
};

BaseNode.prototype.resolve_st = function()
{
return true;
};

BaseNode.prototype.activate_st = function()
{
this.scheduleDeactivationEvent();
};

BaseNode.prototype.deactivate_st = function( /*aNodeState*/ )
{
};

BaseNode.prototype.notifyEndListeners = function()
{
var nDeactivatingListenerCount = this.aDeactivatingListenerArray.length;

for( var i = 0; i < nDeactivatingListenerCount; ++i )
{
this.aDeactivatingListenerArray[i].notifyDeactivating( this );
}

this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_END_EVENT, this.getId() );
if( this.getParentNode() && this.getParentNode().isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyNextEffectEndEvent();

if( this.isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyAnimationsEndEvent();
};

BaseNode.prototype.getContext = function()
{
return this.aContext;
};

BaseNode.prototype.isTransition = function( eFromState, eToState )
{
return ( ( this.aStateTransTable[ eFromState ] & eToState ) != 0 );
};

BaseNode.prototype.inStateOrTransition = function( nMask )
{
return ( ( ( this.eCurrentState & nMask ) != 0 ) || ( ( this.nCurrentStateTransition & nMask ) != 0 ) );
};

BaseNode.prototype.isContainer = function()
{
return this.bIsContainer;
};

BaseNode.prototype.getBegin = function()
{
return this.aBegin;
};

BaseNode.prototype.getDuration = function()
{
return this.aDuration;
};

BaseNode.prototype.getEnd = function()
{
return this.aEnd;
};

BaseNode.prototype.getFillMode = function()
{
return this.eFillMode;
};

BaseNode.prototype.getRestartMode = function()
{
return this.eRestartMode;
};

BaseNode.prototype.getRepeatCount = function()
{
return this.nReapeatCount;
};

BaseNode.prototype.getAccelerateValue = function()
{
return this.nAccelerate;
};

BaseNode.prototype.getDecelerateValue = function()
{
return this.nDecelerate;
};

BaseNode.prototype.isAutoReverseEnabled = function()
{
return this.bAutoreverse;
};

BaseNode.prototype.info = function( bVerbose )
{
var sInfo = 'class name: ' + this.sClassName;
sInfo += ';  element name: ' + this.aElement.localName;
sInfo += ';  id: ' + this.getId();
sInfo += ';  state: ' + getNodeStateName( this.getState() );

if( bVerbose )
{
sInfo += ';  is container: ' + this.isContainer();

if( this.getBegin() )
sInfo += ';  begin: ' + this.getBegin().info();

if( this.getDuration() )
sInfo += ';  dur: ' + this.getDuration().info();

if( this.getEnd() )
sInfo += ';  end: ' + this.getEnd().info();

if( this.getFillMode() )
sInfo += ';  fill: ' + aFillModeOutMap[ this.getFillMode() ];

if( this.getRestartMode() )
sInfo += ';  restart: ' + aRestartModeOutMap[ this.getRestartMode() ];

if( this.getRepeatCount() && ( this.getRepeatCount() != 1.0 ) )
sInfo += ';  repeatCount: ' + this.getRepeatCount();

if( this.getAccelerateValue() )
sInfo += ';  accelerate: ' + this.getAccelerateValue();

if( this.getDecelerateValue() )
sInfo += ';  decelerate: ' + this.getDecelerateValue();

if( this.isAutoReverseEnabled() )
sInfo += ';  autoReverse: true';

}

return sInfo;
};

BaseNode.prototype.callInfo = function( sMethodName )
{
var sInfo = this.sClassName +
'( ' + this.getId() +
', ' + getNodeStateName( this.getState() ) +
' ).' + sMethodName;
return sInfo;
};

BaseNode.prototype.DBG = function( sMessage, nTime )
{
ANIMDBG.print( sMessage, nTime );
};


function AnimationBaseNode( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationBaseNode';
this.bIsContainer = false;
this.aTargetElement = null;
this.bIsTargetTextElement = false;
this.aAnimatedElement = null;
this.aActivity = null;

this.nMinFrameCount = undefined;
this.eAdditiveMode = undefined;

}
extend( AnimationBaseNode, BaseNode );


AnimationBaseNode.prototype.parseElement = function()
{
var bRet = AnimationBaseNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.aTargetElement = null;
var sTargetElementAttr = aAnimElem.getAttributeNS( NSS['smil'], 'targetElement' );
if( sTargetElementAttr )
this.aTargetElement = document.getElementById( sTargetElementAttr );

if( !this.aTargetElement )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode.parseElement: target element not found: ' + sTargetElementAttr );
}

var sSubItemAttr = aAnimElem.getAttributeNS( NSS['anim'], 'sub-item' );
this.bIsTargetTextElement = ( sSubItemAttr && ( sSubItemAttr === 'text' ) );

var sAdditiveAttr = aAnimElem.getAttributeNS( NSS['smil'], 'additive' );
if( sAdditiveAttr && aAddittiveModeInMap[sAdditiveAttr] )
this.eAdditiveMode = aAddittiveModeInMap[sAdditiveAttr];
else
this.eAdditiveMode = ADDITIVE_MODE_REPLACE;

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;


if( this.aTargetElement )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' ) === 'visibility' )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'to' ) === 'visible' )
this.aTargetElement.setAttribute( 'visibility', 'hidden' );
}

if( !this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ] )
{
if( this.bIsTargetTextElement )
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedTextElement( this.aTargetElement );
}
else
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedElement( this.aTargetElement );
}
}
this.aAnimatedElement = this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ];

this.aAnimatedElement.setAdditiveMode( this.eAdditiveMode );
}


return bRet;
};

AnimationBaseNode.prototype.init_st = function()
{
if( this.aActivity )
this.aActivity.activate( makeEvent( bind( this, this.deactivate ) ) );
else
this.aActivity = this.createActivity();
return true;
};

AnimationBaseNode.prototype.resolve_st = function()
{
return true;
};

AnimationBaseNode.prototype.activate_st = function()
{
if( this.aActivity )
{
this.saveStateOfAnimatedElement();
this.aActivity.setTargets( this.getAnimatedElement() );
if( this.getContext().bIsSkipping  )
{
this.aActivity.end();
}
else
{
this.getContext().aActivityQueue.addActivity( this.aActivity );
}
}
else
{
AnimationBaseNode.superclass.scheduleDeactivationEvent.call( this );
}
};

AnimationBaseNode.prototype.deactivate_st = function( eDestState )
{
if( eDestState == FROZEN_NODE )
{
if( this.aActivity )
this.aActivity.end();
}
if( eDestState == ENDED_NODE )
{
if( this.aActivity )
this.aActivity.dispose();
if( ( this.getFillMode() == FILL_MODE_REMOVE ) && this.getAnimatedElement()  )
this.removeEffect();
}
};

AnimationBaseNode.prototype.createActivity = function()
{
log( 'AnimationBaseNode.createActivity: abstract method called' );
};

AnimationBaseNode.prototype.fillActivityParams = function()
{

var nDuration = 0.001;
if( this.getDuration().isValue() )
{
nDuration = this.getDuration().getValue();
}
else
{
log( 'AnimationBaseNode.fillActivityParams: duration is not a number' );
}

var aActivityParamSet = new ActivityParamSet();

aActivityParamSet.aEndEvent             = makeEvent( bind( this, this.deactivate ) );
aActivityParamSet.aTimerEventQueue      = this.aContext.aTimerEventQueue;
aActivityParamSet.aActivityQueue        = this.aContext.aActivityQueue;
aActivityParamSet.nMinDuration          = nDuration;
aActivityParamSet.nMinNumberOfFrames    = this.getMinFrameCount();
aActivityParamSet.bAutoReverse          = this.isAutoReverseEnabled();
aActivityParamSet.nRepeatCount          = this.getRepeatCount();
aActivityParamSet.nAccelerationFraction = this.getAccelerateValue();
aActivityParamSet.nDecelerationFraction = this.getDecelerateValue();
aActivityParamSet.nSlideWidth           = this.aNodeContext.aSlideWidth;
aActivityParamSet.nSlideHeight          = this.aNodeContext.aSlideHeight;

return aActivityParamSet;
};

AnimationBaseNode.prototype.hasPendingAnimation = function()
{
return true;
};

AnimationBaseNode.prototype.saveStateOfAnimatedElement = function()
{
this.getAnimatedElement().saveState( this.getId() );
};

AnimationBaseNode.prototype.removeEffect = function()
{
this.getAnimatedElement().restoreState( this.getId() );
};

AnimationBaseNode.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

AnimationBaseNode.prototype.getAnimatedElement = function()
{
return this.aAnimatedElement;
};

AnimationBaseNode.prototype.dispose= function()
{
if( this.aActivity )
this.aActivity.dispose();

AnimationBaseNode.superclass.dispose.call( this );
};

AnimationBaseNode.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

AnimationBaseNode.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimationBaseNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getMinFrameCount() )
sInfo += ';  min frame count: ' + this.getMinFrameCount();

sInfo += ';  additive: ' + aAddittiveModeOutMap[ this.getAdditiveMode() ];

if( this.getTargetElement() )
{
var sElemId = this.getTargetElement().getAttribute( 'id' );
sInfo += ';  targetElement: ' +  sElemId;
}
}

return sInfo;
};


function AnimationBaseNode2( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode2.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sAttributeName = '';
this.aToValue = null;

}
extend( AnimationBaseNode2, AnimationBaseNode );


AnimationBaseNode2.prototype.parseElement = function()
{
var bRet = AnimationBaseNode2.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.sAttributeName = aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' );
if( !this.sAttributeName )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode2.parseElement: target attribute name not found: ' + this.sAttributeName );
}

this.aToValue = aAnimElem.getAttributeNS( NSS['smil'], 'to' );

return bRet;
};

AnimationBaseNode2.prototype.getAttributeName = function()
{
return this.sAttributeName;
};

AnimationBaseNode2.prototype.getToValue = function()
{
return this.aToValue;
};

AnimationBaseNode2.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode2.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAttributeName() )
sInfo += ';  attributeName: ' + this.getAttributeName();

if( this.getToValue() )
sInfo += ';  to: ' + this.getToValue();
}

return sInfo;
};


function AnimationBaseNode3( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode3.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.eAccumulate = undefined;
this.eCalcMode = undefined;
this.aFromValue = null;
this.aByValue = null;
this.aKeyTimes = null;
this.aValues = null;
this.aFormula= null;
}
extend( AnimationBaseNode3, AnimationBaseNode2 );


AnimationBaseNode3.prototype.parseElement = function()
{
var bRet = AnimationBaseNode3.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eAccumulate = ACCUMULATE_MODE_NONE;
var sAccumulateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accumulate' );
if( sAccumulateAttr == 'sum' )
this.eAccumulate = ACCUMULATE_MODE_SUM;

this.eCalcMode = CALC_MODE_LINEAR;
var sCalcModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'calcMode' );
if( sCalcModeAttr && aCalcModeInMap[ sCalcModeAttr ] )
this.eCalcMode = aCalcModeInMap[ sCalcModeAttr ];

this.aFromValue = aAnimElem.getAttributeNS( NSS['smil'], 'from' );

this.aByValue = aAnimElem.getAttributeNS( NSS['smil'], 'by' );

this.aKeyTimes = [];
var sKeyTimesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'keyTimes' );
sKeyTimesAttr = removeWhiteSpaces( sKeyTimesAttr );
if( sKeyTimesAttr )
{
var aKeyTimes = sKeyTimesAttr.split( ';' );
for( var i = 0; i < aKeyTimes.length; ++i )
this.aKeyTimes.push( parseFloat( aKeyTimes[i] ) );
}

var sValuesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'values' );
if( sValuesAttr )
{
this.aValues = sValuesAttr.split( ';' );
}
else
{
this.aValues = [];
}

this.aFormula = aAnimElem.getAttributeNS( NSS['anim'], 'formula' );

return bRet;
};

AnimationBaseNode3.prototype.getAccumulate = function()
{
return this.eAccumulate;
};

AnimationBaseNode3.prototype.getCalcMode = function()
{
return this.eCalcMode;
};

AnimationBaseNode3.prototype.getFromValue = function()
{
return this.aFromValue;
};

AnimationBaseNode3.prototype.getByValue = function()
{
return this.aByValue;
};

AnimationBaseNode3.prototype.getKeyTimes = function()
{
return this.aKeyTimes;
};

AnimationBaseNode3.prototype.getValues = function()
{
return this.aValues;
};

AnimationBaseNode3.prototype.getFormula = function()
{
return this.aFormula;
};

AnimationBaseNode3.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode3.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAccumulate() )
sInfo += ';  accumulate: ' + aAccumulateModeOutMap[ this.getAccumulate() ];

sInfo += ';  calcMode: ' + aCalcModeOutMap[ this.getCalcMode() ];

if( this.getFromValue() )
sInfo += ';  from: ' + this.getFromValue();

if( this.getByValue() )
sInfo += ';  by: ' + this.getByValue();

if( this.getKeyTimes().length )
sInfo += ';  keyTimes: ' + this.getKeyTimes().join( ',' );

if( this.getValues().length )
sInfo += ';  values: ' + this.getValues().join( ',' );

if( this.getFormula() )
sInfo += ';  formula: ' + this.getFormula();
}

return sInfo;
};


function BaseContainerNode( aAnimElem, aParentNode, aNodeContext )
{
BaseContainerNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'BaseContainerNode';
this.bIsContainer = true;
this.aChildrenArray = [];
this.nFinishedChildren = 0;
this.bDurationIndefinite = false;
this.nLeftIterations = 1;

this.eImpressNodeType = undefined;
this.ePresetClass =  undefined;
this.ePresetId =  undefined;
}
extend( BaseContainerNode, BaseNode );


BaseContainerNode.prototype.parseElement= function()
{
var bRet = BaseContainerNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eImpressNodeType = IMPRESS_DEFAULT_NODE;
var sNodeTypeAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'node-type' );
if( sNodeTypeAttr && aImpressNodeTypeInMap[ sNodeTypeAttr ] )
this.eImpressNodeType = aImpressNodeTypeInMap[ sNodeTypeAttr ];
this.bMainSequenceRootNode = ( this.eImpressNodeType == IMPRESS_MAIN_SEQUENCE_NODE );
this.bInteractiveSequenceRootNode = ( this.eImpressNodeType == IMPRESS_INTERACTIVE_SEQUENCE_NODE );

this.ePresetClass =  undefined;
var sPresetClassAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-class' );
if( sPresetClassAttr && aPresetClassInMap[ sPresetClassAttr ] )
this.ePresetClass = aPresetClassInMap[ sPresetClassAttr ];

this.ePresetId =  undefined;
var sPresetIdAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-id' );
if( sPresetIdAttr && aPresetIdInMap[ sPresetIdAttr ] )
this.ePresetId = aPresetIdInMap[ sPresetIdAttr ];


var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].parseElement();
}


this.bDurationIndefinite
= ( !this.getDuration() || this.getDuration().isIndefinite()  ) &&
( !this.getEnd() || ( this.getEnd().getType() != OFFSET_TIMING ) );

return bRet;
};

BaseContainerNode.prototype.appendChildNode = function( aAnimationNode )
{
if( ! this.checkValidNode() )
return ;

if( aAnimationNode.registerDeactivatingListener( this ) )
this.aChildrenArray.push( aAnimationNode );
};

BaseContainerNode.prototype.removeAllChildrenNodes = function()
{
this.aChildrenArray = [];
};

BaseContainerNode.prototype.init_st = function()
{
this.nLeftIterations = this.getRepeatCount();

return this.init_children();
};

BaseContainerNode.prototype.init_children = function()
{
this.nFinishedChildren = 0;
var nChildrenCount = this.aChildrenArray.length;
var nInitChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].init() )
{
++nInitChildren;
}
}
return ( nChildrenCount == nInitChildren );
};


BaseContainerNode.prototype.deactivate_st = function( eDestState )
{
this.nLeftIterations = 0;
if( eDestState == FROZEN_NODE )
{
this.forEachChildNode( mem_fn( 'deactivate' ), ~( FROZEN_NODE | ENDED_NODE ) );
}
else
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
if( this.getFillMode() == FILL_MODE_REMOVE )
this.removeEffect();
}
};

BaseContainerNode.prototype.hasPendingAnimation = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].hasPendingAnimation() )
return true;
}
return false;
};

BaseContainerNode.prototype.activate_st = function()
{
log( 'BaseContainerNode.activate_st: abstract method called' );
};

BaseContainerNode.prototype.notifyDeactivating = function( /*aAnimationNode*/ )
{
log( 'BaseContainerNode.notifyDeactivating: abstract method called' );
};

BaseContainerNode.prototype.isDurationIndefinite = function()
{
return this.bDurationIndefinite;
};

BaseContainerNode.prototype.isChildNode = function( aAnimationNode )
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].getId() == aAnimationNode.getId() )
return true;
}
return false;
};

BaseContainerNode.prototype.notifyDeactivatedChild = function( aChildNode )
{
assert( ( aChildNode.getState() == FROZEN_NODE ) || ( aChildNode.getState() == ENDED_NODE ),
'BaseContainerNode.notifyDeactivatedChild: passed child node is neither in FROZEN nor in ENDED state' );

assert( this.getState() != INVALID_NODE,
'BaseContainerNode.notifyDeactivatedChild: this node is invalid' );

if( !this.isChildNode( aChildNode ) )
{
log( 'BaseContainerNode.notifyDeactivatedChild: unknown child notifier!' );
return false;
}

var nChildrenCount = this.aChildrenArray.length;

assert( ( this.nFinishedChildren < nChildrenCount ),
'BaseContainerNode.notifyDeactivatedChild: assert(this.nFinishedChildren < nChildrenCount) failed' );

++this.nFinishedChildren;
var bFinished = ( this.nFinishedChildren >= nChildrenCount );

if( bFinished && this.isDurationIndefinite() )
{
if( this.nLeftIterations >= 1.0 )
{
this.nLeftIterations -= 1.0;
}
if( this.nLeftIterations >= 1.0 )
{
bFinished = false;
var aRepetitionEvent = makeDelay( bind( this, this.repeat ), 0.0 );
this.aContext.aTimerEventQueue.addEvent( aRepetitionEvent );
}
else
{
this.deactivate();
}
}

return bFinished;
};

BaseContainerNode.prototype.repeat = function()
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
this.removeEffect();
var bInitialized = this.init_children();
if( bInitialized )
this.activate_st();
return bInitialized;
};

BaseContainerNode.prototype.removeEffect = function()
{
var nChildrenCount = this.aChildrenArray.length;
if( nChildrenCount == 0 )
return;
for( var i = nChildrenCount - 1; i >= 0; --i )
{
if( ( this.aChildrenArray[i].getState() & ( FROZEN_NODE | ENDED_NODE ) ) == 0 )
{
log( 'BaseContainerNode.removeEffect: child(id:'
+ this.aChildrenArray[i].getId() + ') is neither frozen nor ended;'
+ ' state: '
+ aTransitionModeOutMap[ this.aChildrenArray[i].getState() ] );
continue;
}
this.aChildrenArray[i].removeEffect();
}
};

BaseContainerNode.prototype.saveStateOfAnimatedElement = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].saveStateOfAnimatedElement();
}
};

BaseContainerNode.prototype.forEachChildNode = function( aFunction, eNodeStateMask )
{
if( !eNodeStateMask )
eNodeStateMask = -1;

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( ( eNodeStateMask != -1 ) && ( ( this.aChildrenArray[i].getState() & eNodeStateMask ) == 0 ) )
continue;
aFunction( this.aChildrenArray[i] );
}
};

BaseContainerNode.prototype.dispose = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].dispose();
}

BaseContainerNode.superclass.dispose.call( this );
};

BaseContainerNode.prototype.getImpressNodeType = function()
{
return this.eImpressNodeType;
};

BaseContainerNode.prototype.info = function( bVerbose )
{
var sInfo = BaseContainerNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getImpressNodeType() )
sInfo += ';  node-type: ' + aImpressNodeTypeOutMap[ this.getImpressNodeType() ];
}

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
sInfo += '\n';
sInfo += this.aChildrenArray[i].info( bVerbose );
}

return sInfo;
};


function ParallelTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
ParallelTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'ParallelTimeContainer';
}
extend( ParallelTimeContainer, BaseContainerNode );


ParallelTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
var nResolvedChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].resolve() )
{
++nResolvedChildren;
}
}

if( nChildrenCount != nResolvedChildren )
{
log( 'ParallelTimeContainer.activate_st: resolving all children failed' );
return;
}


if( this.isDurationIndefinite() && ( nChildrenCount == 0  ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

ParallelTimeContainer.prototype.notifyDeactivating = function( aAnimationNode )
{
this.notifyDeactivatedChild( aAnimationNode );
};


function SequentialTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
SequentialTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'SequentialTimeContainer';
this.bIsRewinding = false;
this.aCurrentSkipEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
}
extend( SequentialTimeContainer, BaseContainerNode );


SequentialTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( ; this.nFinishedChildren < nChildrenCount; ++this.nFinishedChildren )
{
if( this.resolveChild( this.aChildrenArray[ this.nFinishedChildren ] ) )
break;
else
log( 'SequentialTimeContainer.activate_st: resolving child failed!' );
}

if( this.isDurationIndefinite() && ( ( nChildrenCount == 0 ) || ( this.nFinishedChildren >= nChildrenCount ) ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

SequentialTimeContainer.prototype.notifyDeactivating = function( aNotifier )
{
if( this.bIsRewinding )
return;

if( this.notifyDeactivatedChild( aNotifier ) )
return;

assert( this.nFinishedChildren < this.aChildrenArray.length,
'SequentialTimeContainer.notifyDeactivating: assertion (this.nFinishedChildren < this.aChildrenArray.length) failed' );

var aNextChild = this.aChildrenArray[ this.nFinishedChildren ];

assert( aNextChild.getState() == UNRESOLVED_NODE,
'SequentialTimeContainer.notifyDeactivating: assertion (aNextChild.getState == UNRESOLVED_NODE) failed' );

if( !this.resolveChild( aNextChild ) )
{
this.deactivate();
}
};

SequentialTimeContainer.prototype.skipEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
var aEvent = makeEvent( bind2( aChildNode.deactivate, aChildNode ) );
this.getContext().aTimerEventQueue.addEvent( aEvent );
}
else
{
log( 'SequentialTimeContainer.skipEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindCurrentEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindCurrentEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
this.getContext().aActivityQueue.endAll();

aChildNode.end();
aChildNode.removeEffect();
aChildNode.init();
this.resolveChild( aChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindCurrentEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindLastEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindLastEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().aActivityQueue.clear();
aChildNode.end();

--this.nFinishedChildren;
var aPreviousChildNode = this.aChildrenArray[ this.nFinishedChildren ];

aPreviousChildNode.removeEffect();
aPreviousChildNode.init();
aChildNode.init();
this.resolveChild( aPreviousChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindLastEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.resolveChild = function( aChildNode )
{
var bResolved = aChildNode.resolve();

if( bResolved && ( this.isMainSequenceRootNode() || this.isInteractiveSequenceRootNode() ) )
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();
this.aCurrentSkipEvent = makeEvent( bind2( SequentialTimeContainer.prototype.skipEffect, this, aChildNode ) );

if( this.aRewindCurrentEffectEvent )
this.aRewindCurrentEffectEvent.dispose();
this.aRewindCurrentEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindCurrentEffect, this, aChildNode ) );

if( this.aRewindLastEffectEvent )
this.aRewindLastEffectEvent.dispose();
this.aRewindLastEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindLastEffect, this, aChildNode ) );

if( this.isMainSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipEffectEvent( this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindCurrentEffectEvent( this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindLastEffectEvent( this.aRewindLastEffectEvent );
}
else if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipInteractiveEffectEvent( aChildNode.getId(), this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindRunningInteractiveEffectEvent( aChildNode.getId(), this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindEndedInteractiveEffectEvent( aChildNode.getId(), this.aRewindLastEffectEvent );
}
}
return bResolved;
};

SequentialTimeContainer.prototype.notifyRewindedEvent = function( aChildNode )
{
if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( aChildNode.getId() );

var sId = aChildNode.getBegin().getEventBaseElementId();
if( sId )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( sId );
}
}
};

SequentialTimeContainer.prototype.dispose = function()
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();

SequentialTimeContainer.superclass.dispose.call( this );
};


function PropertyAnimationNode(  aAnimElem, aParentNode, aNodeContext )
{
PropertyAnimationNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'PropertyAnimationNode';
}
extend( PropertyAnimationNode, AnimationBaseNode3 );


PropertyAnimationNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aInterpolator = null;  // createActivity will compute it;
return createActivity( aActivityParamSet, this, aAnimation, aInterpolator );
};


function AnimationSetNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationSetNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationSetNode';
}
extend( AnimationSetNode, AnimationBaseNode2 );


AnimationSetNode.prototype.createActivity = function()
{
var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aActivityParamSet = this.fillActivityParams();

return new SetActivity( aActivityParamSet, aAnimation, this.getToValue() );
};


function AnimationColorNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationColorNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationColorNode';

this.eColorInterpolation = undefined;
this.eColorInterpolationDirection = undefined;
}
extend( AnimationColorNode, AnimationBaseNode3 );


AnimationColorNode.prototype.parseElement = function()
{
var bRet = AnimationColorNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eColorInterpolation = COLOR_SPACE_RGB;
var sColorInterpolationAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation' );
if( sColorInterpolationAttr && aColorSpaceInMap[ sColorInterpolationAttr ] )
this.eColorInterpolation = aColorSpaceInMap[ sColorInterpolationAttr ];

this.eColorInterpolationDirection = CLOCKWISE;
var sColorInterpolationDirectionAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation-direction' );
if( sColorInterpolationDirectionAttr && aClockDirectionInMap[ sColorInterpolationDirectionAttr ] )
this.eColorInterpolationDirection = aClockDirectionInMap[ sColorInterpolationDirectionAttr ];

return bRet;
};

AnimationColorNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aColorAnimation;
var aInterpolator;
if( this.getColorInterpolation() === COLOR_SPACE_HSL )
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space hsl'  );
aColorAnimation = new HSLAnimationWrapper( aAnimation );
var aInterpolatorMaker = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_HSL );
aInterpolator = aInterpolatorMaker( this.getColorInterpolationDirection() );
}
else
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space rgb'  );
aColorAnimation = aAnimation;
aInterpolator = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_RGB );
}

return createActivity( aActivityParamSet, this, aColorAnimation, aInterpolator );
};

AnimationColorNode.prototype.getColorInterpolation = function()
{
return this.eColorInterpolation;
};

AnimationColorNode.prototype.getColorInterpolationDirection = function()
{
return this.eColorInterpolationDirection;
};

AnimationColorNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationColorNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  color-interpolation: ' + aColorSpaceOutMap[ this.getColorInterpolation() ];

sInfo += ';  color-interpolation-direction: ' + aClockDirectionOutMap[ this.getColorInterpolationDirection() ];
}
return sInfo;
};


function AnimationTransitionFilterNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationTransitionFilterNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationTransitionFilterNode';

this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = undefined;
this.eTransitionMode = undefined;
}
extend( AnimationTransitionFilterNode, AnimationBaseNode );


AnimationTransitionFilterNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

return createShapeTransition( aActivityParamSet,
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight,
this );
};

AnimationTransitionFilterNode.prototype.parseElement = function()
{
var bRet = AnimationTransitionFilterNode.superclass.parseElement.call( this );
var bIsValidTransition = true;

var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined  ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( !bIsValidTransition )
{
this.eTransitionType = FADE_TRANSITION;
this.eTransitionSubType = CROSSFADE_TRANS_SUBTYPE;
log( 'AnimationTransitionFilterNode.parseElement: in place of the invalid transition a crossfade transition is used' );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.eTransitionMode = TRANSITION_MODE_IN;
var sModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'mode' );
if( sModeAttr === 'out' )
this.eTransitionMode = TRANSITION_MODE_OUT;

return bRet;
};

AnimationTransitionFilterNode.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

AnimationTransitionFilterNode.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

AnimationTransitionFilterNode.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

AnimationTransitionFilterNode.prototype.getReverseDirection = function()
{
return this.bReverseDirection;
};

AnimationTransitionFilterNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationTransitionFilterNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( this.getReverseDirection() )
sInfo += ';  direction: reverse';
}

return sInfo;
};


function createAnimationTree( aRootElement, aNodeContext )
{
return createAnimationNode( aRootElement, null, aNodeContext );
}


function createAnimationNode( aElement, aParentNode, aNodeContext )
{
assert( aElement, 'createAnimationNode: invalid animation element' );

var eAnimationNodeType = getAnimationElementType( aElement );

var aCreatedNode = null;
var aCreatedContainer = null;

switch( eAnimationNodeType )
{
case ANIMATION_NODE_PAR:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ITERATE:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SEQ:
aCreatedNode = aCreatedContainer =
new SequentialTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATE:
aCreatedNode = new PropertyAnimationNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SET:
aCreatedNode = new AnimationSetNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATEMOTION:
log( 'createAnimationNode: ANIMATEMOTION not implemented' );
return null;
case ANIMATION_NODE_ANIMATECOLOR:
aCreatedNode = new AnimationColorNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATETRANSFORM:
log( 'createAnimationNode: ANIMATETRANSFORM not implemented' );
return null;
case ANIMATION_NODE_TRANSITIONFILTER:
aCreatedNode = new AnimationTransitionFilterNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_AUDIO:
log( 'createAnimationNode: AUDIO not implemented' );
return null;
case ANIMATION_NODE_COMMAND:
log( 'createAnimationNode: COMMAND not implemented' );
return null;
default:
log( 'createAnimationNode: invalid Animation Node Type: ' + eAnimationNodeType );
return null;
}

if( aCreatedContainer )
{
if( eAnimationNodeType == ANIMATION_NODE_ITERATE )
{
createIteratedNodes( aElement, aCreatedContainer, aNodeContext );
}
else
{
var aChildrenArray = getElementChildren( aElement );
for( var i = 0; i < aChildrenArray.length; ++i )
{
if( !createChildNode( aChildrenArray[i], aCreatedContainer, aNodeContext ) )
{
aCreatedContainer.removeAllChildrenNodes();
break;
}
}
}
}

return aCreatedNode;
}


function createChildNode( aElement, aParentNode, aNodeContext )
{
var aChildNode = createAnimationNode( aElement, aParentNode, aNodeContext );

if( !aChildNode )
{
log( 'createChildNode: child node creation failed' );
return false;
}
else
{
aParentNode.appendChildNode( aChildNode );
return true;
}
}


function createIteratedNodes( /*aElement, aContainerNode, aNodeContext*/ )
{
}


function makeScaler( nScale )
{
if( ( typeof( nScale ) !== typeof( 0 ) ) || !isFinite( nScale ) )
{
log( 'makeScaler: not valid param passed: ' + nScale );
return null;
}

return  function( nValue )
{
return ( nScale * nValue );
};
}


function createPropertyAnimation( sAttrName, aAnimatedElement, nWidth, nHeight )
{
if( !aAttributeMap[ sAttrName ] )
{
log( 'createPropertyAnimation: attribute is unknown' );
return null;
}


var aFunctorSet = aAttributeMap[ sAttrName ];

var sGetValueMethod =   aFunctorSet.get;
var sSetValueMethod =   aFunctorSet.set;

if( !sGetValueMethod || !sSetValueMethod  )
{
log( 'createPropertyAnimation: attribute is not handled' );
return null;
}

var aGetModifier =  eval( aFunctorSet.getmod );
var aSetModifier =  eval( aFunctorSet.setmod );


return new GenericAnimation( bind( aAnimatedElement, aAnimatedElement[ sGetValueMethod ] ),
bind( aAnimatedElement, aAnimatedElement[ sSetValueMethod ] ),
aGetModifier,
aSetModifier);
}


function createShapeTransition( aActivityParamSet, aAnimatedElement,
nSlideWidth, nSlideHeight,
aAnimatedTransitionFilterNode )
{
if( !aAnimatedTransitionFilterNode )
{
log( 'createShapeTransition: the animated transition filter node is not valid.' );
return null;
}
var eTransitionType = aAnimatedTransitionFilterNode.getTransitionType();
var eTransitionSubType = aAnimatedTransitionFilterNode.getTransitionSubType();
var bDirectionForward = ! aAnimatedTransitionFilterNode.getReverseDirection();
var bModeIn = ( aAnimatedTransitionFilterNode.getTransitionMode() == FORWARD );

var aTransitionInfo = aTransitionInfoTable[eTransitionType][eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'createShapeTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( eTransitionType, eTransitionSubType );
var aClippingAnimation
= new ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn );
return new SimpleActivity( aActivityParamSet, aClippingAnimation, true );

case TRANSITION_SPECIAL:
switch( eTransitionType )
{
default:
var aAnimation
= createPropertyAnimation( 'opacity',
aAnimatedElement,
nSlideWidth,
nSlideHeight );
return new SimpleActivity( aActivityParamSet, aAnimation, bModeIn );
}
}

}


function ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn )
{
this.aClippingFunctor = new ClippingFunctor( aParametricPolyPolygon,
aTransitionInfo,
bDirectionForward, bModeIn );
this.bAnimationStarted = false;
}

ClippingAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement,
'ClippingAnimation.start: animatable element is not valid' );
this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.initClipPath();
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;

};

ClippingAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.aAnimatableElement.cleanClipPath();
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

ClippingAnimation.prototype.perform = function( nValue )
{
var nWidth = this.aAnimatableElement.aClippingBBox.width;
var nHeight = this.aAnimatableElement.aClippingBBox.height;
var aPolyPolygonElement = this.aClippingFunctor.perform( nValue, nWidth, nHeight );
this.aAnimatableElement.setClipPath( aPolyPolygonElement );
};

ClippingAnimation.prototype.getUnderlyingValue = function()
{
return 0.0;
};


function GenericAnimation( aGetValueFunc, aSetValueFunc, aGetModifier, aSetModifier )
{
assert( aGetValueFunc && aSetValueFunc,
'GenericAnimation constructor: get value functor and/or set value functor are not valid' );

this.aGetValueFunc = aGetValueFunc;
this.aSetValueFunc = aSetValueFunc;
this.aGetModifier = aGetModifier;
this.aSetModifier = aSetModifier;
this.aAnimatableElement = null;
this.bAnimationStarted = false;
}


GenericAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement, 'GenericAnimation.start: animatable element is not valid' );

this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;
};

GenericAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

GenericAnimation.prototype.perform = function( aValue )
{
if( this.aSetModifier )
aValue = this.aSetModifier( aValue );

this.aSetValueFunc( aValue );
};

GenericAnimation.prototype.getUnderlyingValue = function()
{
var aValue = this.aGetValueFunc();
if( this.aGetModifier )
aValue = this.aGetModifier( aValue );
return aValue;
};


function HSLAnimationWrapper( aColorAnimation )
{
assert( aColorAnimation,
'HSLAnimationWrapper constructor: invalid color animation delegate' );

this.aAnimation = aColorAnimation;
}


HSLAnimationWrapper.prototype.start = function( aAnimatableElement )
{
this.aAnimation.start( aAnimatableElement );
};

HSLAnimationWrapper.prototype.end = function()
{
this.aAnimation.end();
};
HSLAnimationWrapper.prototype.perform = function( aHSLValue )
{
this.aAnimation.perform( aHSLValue.convertToRGB() );
};

HSLAnimationWrapper.prototype.getUnderlyingValue = function()
{
return this.aAnimation.getUnderlyingValue().convertToHSL();
};


function SlideChangeBase(aLeavingSlide, aEnteringSlide)
{
this.aLeavingSlide = aLeavingSlide;
this.aEnteringSlide = aEnteringSlide;
this.bIsFinished = false;
}

SlideChangeBase.prototype.start = function()
{
};

SlideChangeBase.prototype.end = function()
{
if( this.bIsFinished )
return;

this.aLeavingSlide.hide();
this.aEnteringSlide.reset();
this.aLeavingSlide.reset();

this.bIsFinished = true;
};

SlideChangeBase.prototype.perform = function( nValue )
{
if( this.bIsFinished ) return false;

if( this.aLeavingSlide )
this.performOut( nValue );

if( this.aEnteringSlide )
this.performIn( nValue );

return true;
};

SlideChangeBase.prototype.getUnderlyingValue = function()
{
return 0.0;
};

SlideChangeBase.prototype.performIn = function( )
{
log( 'SlideChangeBase.performIn: abstract method called' );
};

SlideChangeBase.prototype.performOut = function( )
{
log( 'SlideChangeBase.performOut: abstract method called' );
};


function FadingSlideChange( aLeavingSlide, aEnteringSlide )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.bFirstRun = true;
}
extend( FadingSlideChange, SlideChangeBase );

FadingSlideChange.prototype.start = function()
{
FadingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( nT );
};

FadingSlideChange.prototype.performOut = function( nT )
{

this.aLeavingSlide.setOpacity( 1 - nT );
};


function FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, sFadeColor )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.sFadeColor = sFadeColor;
if( !this.sFadeColor )
{
log( 'FadingOverColorSlideChange: sFadeColor not valid.' );
this.sFadeColor = '#000000';
}
this.aColorPlaneElement = this.createColorPlaneElement();
}
extend( FadingOverColorSlideChange, SlideChangeBase );

FadingOverColorSlideChange.prototype.start = function()
{
FadingOverColorSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.insertBefore( this.aColorPlaneElement );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingOverColorSlideChange.prototype.end = function()
{
FadingOverColorSlideChange.superclass.end.call( this );
this.aLeavingSlide.removeElement( this.aColorPlaneElement );
};

FadingOverColorSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( (nT > 0.55) ? 2.0*(nT-0.55) : 0.0 );
};

FadingOverColorSlideChange.prototype.performOut = function( nT )
{
this.aLeavingSlide.setOpacity( (nT > 0.45) ? 0.0 : 2.0*(0.45-nT) );
};

FadingOverColorSlideChange.prototype.createColorPlaneElement = function()
{
var aColorPlaneElement = document.createElementNS( NSS['svg'], 'rect' );
aColorPlaneElement.setAttribute( 'width', String( this.aLeavingSlide.getWidth() ) );
aColorPlaneElement.setAttribute( 'height', String( this.aLeavingSlide.getHeight() ) );
aColorPlaneElement.setAttribute( 'fill', this.sFadeColor );
return aColorPlaneElement;
};


function MovingSlideChange( aLeavingSlide, aEnteringSlide,
aLeavingDirection, aEnteringDirection )
{
MovingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.aLeavingDirection = aLeavingDirection;
this.aEnteringDirection = aEnteringDirection;
}
extend( MovingSlideChange, SlideChangeBase );

MovingSlideChange.prototype.start = function()
{
MovingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'transform' );
this.aLeavingSlide.notifyUsedAttribute( 'transform' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

MovingSlideChange.prototype.performIn = function( nT )
{
var nS = nT - 1;
var dx = nS * this.aEnteringDirection.x * this.aEnteringSlide.getWidth();
var dy = nS * this.aEnteringDirection.y * this.aEnteringSlide.getHeight();
this.aEnteringSlide.translate( dx, dy );
};

MovingSlideChange.prototype.performOut = function( nT )
{
var dx = nT * this.aLeavingDirection.x * this.aLeavingSlide.getWidth();
var dy = nT * this.aLeavingDirection.y * this.aLeavingSlide.getHeight();
this.aLeavingSlide.translate( dx, dy );
};


function ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, bIsDirectionForward )
{
ClippedSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );

var bIsModeIn = true;
this.aClippingFunctor= new ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn );
}
extend( ClippedSlideChange, SlideChangeBase );

ClippedSlideChange.prototype.start = function()
{
ClippedSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'clip-path' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

ClippedSlideChange.prototype.performIn = function( nT )
{
var nWidth = this.aEnteringSlide.getWidth();
var nHeight = this.aEnteringSlide.getHeight();
var aPolyPolygonElement = this.aClippingFunctor.perform( nT, nWidth, nHeight );
this.aEnteringSlide.setClipPath( aPolyPolygonElement );
};

ClippedSlideChange.prototype.performOut = function( )
{
};


function ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn)
{
this.aParametricPolyPolygon = aParametricPolyPolygon;
this.aStaticTransformation = null;
this.bForwardParameterSweep = true;
this.bSubtractPolygon = false;
this.bScaleIsotropically = aTransitionInfo.scaleIsotropically;
this.bFlip = false;

assert( this.aParametricPolyPolygon,
'ClippingFunctor: parametric polygon is not valid' );

if( aTransitionInfo.rotationAngle != 0.0 ||
aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
{
this.aStaticTransformation = SVGIdentityMatrix.translate( 0.5, 0.5 );
if( aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
this.aStaticTransformation
= this.aStaticTransformation.scaleNonUniform( aTransitionInfo.scaleX,
aTransitionInfo.scaleY );
if( aTransitionInfo.rotationAngle != 0.0 )
this.aStaticTransformation
= this.aStaticTransformation.rotate( aTransitionInfo.rotationAngle );
this.aStaticTransformation = this.aStaticTransformation.translate( -0.5, -0.5 );
}
else
{
this.aStaticTransformation = document.documentElement.createSVGMatrix();
}

if( !bIsDirectionForward )
{
var aMatrix = null;
switch( aTransitionInfo.reverseMethod )
{
default:
log( 'ClippingFunctor: unexpected reverse method.' );
break;
case REVERSEMETHOD_IGNORE:
break;
case REVERSEMETHOD_INVERT_SWEEP:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
break;
case REVERSEMETHOD_SUBTRACT_POLYGON:
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_SUBTRACT_AND_INVERT:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_ROTATE_180:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.setToRotationAroundPoint( 0.5, 0.5, 180 );
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
break;
case REVERSEMETHOD_FLIP_X:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.a = -1; aMatrix.e = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
case REVERSEMETHOD_FLIP_Y:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.d = -1; aMatrix.f = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
}
}

if( !bIsModeIn )
{
if( aTransitionInfo.outInvertsSweep )
{
this.bForwardParameterSweep = !this.bForwardParameterSweep;
}
else
{
this.bSubtractPolygon = !this.bSubtractPolygon;
}
}
}

ClippingFunctor.aBoundingPath = document.createElementNS( NSS['svg'], 'path' );
ClippingFunctor.aBoundingPath.setAttribute( 'd', 'M -1 -1 L 2 -1 L 2 2 L -1 2 L -1 -1' );

ClippingFunctor.prototype.perform = function( nT, nWidth, nHeight )
{
var aClipPoly = this.aParametricPolyPolygon.perform( this.bForwardParameterSweep ? nT : (1 - nT) );


if( this.bSubtractPolygon )
{
aClipPoly.changeOrientation();
aClipPoly.prependPath( ClippingFunctor.aBoundingPath );
}

var aMatrix;
if( this.bScaleIsotropically )
{
var nScaleFactor = Math.max( nWidth, nHeight );
aMatrix = SVGIdentityMatrix.translate( -( nScaleFactor - nWidth ) / 2.0,
-( nScaleFactor - nHeight ) / 2.0 );
aMatrix = aMatrix.scale( nScaleFactor );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}
else
{
aMatrix = SVGIdentityMatrix.scaleNonUniform( nWidth, nHeight );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}

aClipPoly.matrixTransform( aMatrix );

return aClipPoly;
};


function createClipPolyPolygon( nType, nSubtype )
{
switch( nType )
{
default:
log( 'createClipPolyPolygon: unknown transition type: ' + nType );
return null;
case BARWIPE_TRANSITION:
return new BarWipePath( 1 );
case FOURBOXWIPE_TRANSITION:
return new FourBoxWipePath( nSubtype === CORNERSOUT_TRANS_SUBTYPE );
case BOXWIPE_TRANSITION:
return new BoxWipePath( nSubtype == LEFTCENTER_TRANS_SUBTYPE ||
nSubtype == TOPCENTER_TRANS_SUBTYPE ||
nSubtype == RIGHTCENTER_TRANS_SUBTYPE ||
nSubtype == BOTTOMCENTER_TRANS_SUBTYPE );
case ELLIPSEWIPE_TRANSITION:
return new EllipseWipePath( nSubtype );
case FANWIPE_TRANSITION:
return new FanWipePath(nSubtype == CENTERTOP_TRANS_SUBTYPE ||
nSubtype == CENTERRIGHT_TRANS_SUBTYPE, true, false);
case PINWHEELWIPE_TRANSITION:
var nBlades;
switch( nSubtype )
{
case ONEBLADE_TRANS_SUBTYPE:
nBlades = 1;
break;
case DEFAULT_TRANS_SUBTYPE:
case TWOBLADEVERTICAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case TWOBLADEHORIZONTAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case THREEBLADE_TRANS_SUBTYPE:
nBlades = 3;
break;
case FOURBLADE_TRANS_SUBTYPE:
nBlades = 4;
break;
case EIGHTBLADE_TRANS_SUBTYPE:
nBlades = 8;
break;
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
return new PinWheelWipePath( nBlades );
case CLOCKWIPE_TRANSITION:
return new ClockWipePath();
case RANDOMBARWIPE_TRANSITION:
return new RandomWipePath( 128, true /* bars */ );
case CHECKERBOARDWIPE_TRANSITION:
return new CheckerBoardWipePath( 10 );
case ZIGZAGWIPE_TRANSITION:
return new ZigZagWipePath( 5 );
case BARNZIGZAGWIPE_TRANSITION:
return new BarnZigZagWipePath( 5 );
case IRISWIPE_TRANSITION:
switch(nSubtype)
{
case RECTANGLE_TRANS_SUBTYPE:
return new IrisWipePath(0);
case DIAMOND_TRANS_SUBTYPE:
return new IrisWipePath(1);
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
case BARNDOORWIPE_TRANSITION:
return new BarnDoorWipePath(false);
case SINGLESWEEPWIPE_TRANSITION:
return new SweepWipePath(
nSubtype == CLOCKWISETOP_TRANS_SUBTYPE ||
nSubtype == CLOCKWISERIGHT_TRANS_SUBTYPE ||
nSubtype == CLOCKWISEBOTTOM_TRANS_SUBTYPE ||
nSubtype == CLOCKWISELEFT_TRANS_SUBTYPE,
true,
false,
nSubtype == COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE ||
nSubtype == COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE );
case WATERFALLWIPE_TRANSITION:
return new WaterfallWipePath(128, // flipOnYAxis
nSubtype == VERTICALRIGHT_TRANS_SUBTYPE ||
nSubtype == HORIZONTALLEFT_TRANS_SUBTYPE);
case MISCDIAGONALWIPE_TRANSITION:
switch(nSubtype) {
case DOUBLEBARNDOOR_TRANS_SUBTYPE:
return new BarnDoorWipePath(true /* Doubled */);
case DOUBLEDIAMOND_TRANS_SUBTYPE:
return new DoubleDiamondWipePath();
default:
log( 'createClipPolyPolygon: unhandled subtype: ' + nSubtype );
return null;
}
case DISSOLVE_TRANSITION:
return new RandomWipePath( 16 * 16, false /* dissolve */ );
case VEEWIPE_TRANSITION:
return new VeeWipePath();
case SNAKEWIPE_TRANSITION:
return new SnakeWipePath( 8 * 8, // diagonal
nSubtype == TOPLEFTDIAGONAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE   ,
nSubtype == TOPLEFTVERTICAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE
);
case PARALLELSNAKESWIPE_TRANSITION:
return new ParallelSnakesWipePath(
8 * 8, // elements
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE    ||
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE
);

case SPIRALWIPE_TRANSITION:
return new SpiralWipePath(
8 * 8, // elements
nSubtype == TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE );

case BOXSNAKESWIPE_TRANSITION:
return new BoxSnakesWipePath(
8 * 8,
nSubtype == FOURBOXVERTICAL_TRANS_SUBTYPE ||
nSubtype == FOURBOXHORIZONTAL_TRANS_SUBTYPE );
}
}


function createUnitSquarePath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 1 0 L 1 1 L 0 1 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function createEmptyPath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function pruneScaleValue( nVal )
{
if( nVal < 0.0 )
return (nVal < -0.00001 ? nVal : -0.00001);
else
return (nVal > 0.00001 ? nVal : 0.00001);
}


function BarWipePath( nBars /* nBars > 1: blinds effect */ )
{
this.nBars = nBars;
if( this.nBars === undefined || this.nBars < 1 )
this.nBars = 1;
this.aBasePath = createUnitSquarePath();
}

BarWipePath.prototype.perform = function( nT )
{

var aMatrix = SVGIdentityMatrix.scaleNonUniform( pruneScaleValue( nT / this.nBars ), 1.0 );

var aPolyPath = this.aBasePath.cloneNode( true );
aPolyPath.matrixTransform( aMatrix );

if( this.nBars > 1 )
{
var i;
var aTransform;
var aPath;
for( i = this.nBars - 1; i > 0; --i )
{
aTransform = SVGIdentityMatrix.translate( i / this.nBars, 0.0 );
aTransform = aTransform.multiply( aMatrix );
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}
}
return aPolyPath;
};


function BoxWipePath(bIsTopCentered) {
this.bIsTopCentered = bIsTopCentered;
this.aBasePath = createUnitSquarePath();
}

BoxWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix;
if(this.bIsTopCentered) {
aTransform = aTransform.translate(-0.5, 0.0).scale(d, d).translate(0.5, 0.0);
}
else {
aTransform = aTransform.scale(d, d);
}
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function SweepWipePath(bCenter, bSingle, bOppositeVertical, bFlipOnYAxis) {
this.bCenter = bCenter;
this.bSingle = bSingle;
this.bOppositeVertical = bOppositeVertical;
this.bFlipOnYAxis = bFlipOnYAxis;
this.aBasePath = createUnitSquarePath();
}

SweepWipePath.prototype.perform = function( nT ) {
nT /= 2.0;
if(!this.bCenter)
nT /= 2.0;
if(!this.bSingle && !this.bOppositeVertical)
nT /= 2.0;

var poly = PinWheelWipePath.calcCenteredClock( nT + 0.25, 1.0 );
var aTransform;

if(this.bCenter) {
aTransform = SVGIdentityMatrix.translate(0.5, 0.0);
poly.matrixTransform(aTransform);
}
var res = poly;

if(!this.bSingle) {
if(this.bOppositeVertical) {
aTransform = SVGIdentityMatrix.scale(1.0, -1.0);
aTransform.translate(0.0, 1.0);
poly.matrixTransform(aTransform);
poly.changeOrientation();
}
else {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
}
res.appendPath(poly);
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function FourBoxWipePath( bCornersOut )
{
this.bCornersOut = bCornersOut;
this.aBasePath = createUnitSquarePath();
}

FourBoxWipePath.prototype.perform = function( nT )
{
var aMatrix;
var d = pruneScaleValue( nT / 2.0 );

if( this.bCornersOut )
{
aMatrix = SVGIdentityMatrix.translate( -0.25, -0.25 ).scale( d ).translate( -0.5, -0.5 );
}
else
{
aMatrix = SVGIdentityMatrix.translate( -0.5, -0.5 ).scale( d );
}


var aTransform = aMatrix;
var aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
var aPolyPath = aSquare;
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipX();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );

aMatrix = SVGIdentityMatrix.translate( 0.5, 0.5 );
aMatrix = aMatrix.scale( 1.1 );
aPolyPath.matrixTransform( aMatrix );

return aPolyPath;
};


function EllipseWipePath( eSubtype )
{
this.eSubtype = eSubtype;

var sPathData = 'M 0.5 -0.207107 ' +
'C 0.687536 -0.207107 0.867392 -0.132608 1 0 ' +
'C 1.13261 0.132608 1.20711 0.312464 1.20711 0.5 ' +
'C 1.20711 0.687536 1.13261 0.867392 1 1 ' +
'C 0.867392 1.13261 0.687536 1.20711 0.5 1.20711 ' +
'C 0.312464 1.20711 0.132608 1.13261 0 1 ' +
'C -0.132608 0.867392 -0.207107 0.687536 -0.207107 0.5 ' +
'C -0.207107 0.312464 -0.132608 0.132608 0 0 ' +
'C 0.132608 -0.132608 0.312464 -0.207107 0.5 -0.207107';

this.aBasePath = document.createElementNS( NSS['svg'], 'path' );
this.aBasePath.setAttribute( 'd', sPathData );
}

EllipseWipePath.prototype.perform = function( nT )
{

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( nT ).translate( -0.5, -0.5 );
var aEllipse = this.aBasePath.cloneNode( true );
aEllipse.matrixTransform( aTransform );

return aEllipse;
};

function FanWipePath(bIsCenter, bIsSingle, bIsFanIn) {
this.bCenter = bIsCenter;
this.bSingle = bIsSingle;
this.bFanIn  = bIsFanIn;
this.aBasePath = createUnitSquarePath();
}

FanWipePath.prototype.perform = function( nT ) {
var res = this.aBasePath.cloneNode(true);
var poly = PinWheelWipePath.calcCenteredClock(
nT / ((this.bCenter && this.bSingle) ? 2.0 : 4.0), 1.0);
res.appendPath(poly);
var aTransform = SVGIdentityMatrix.flipY();
aTransform = aTransform.scaleNonUniform(-1.0, 1.0);
poly.matrixTransform(aTransform);
res.appendPath(poly);

if(this.bCenter) {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
res.matrixTransform(aTransform);

if(!this.bSingle)
res.appendPath(flipOnXAxis(res));
}
else {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 1.0).translate(0.5, 1.0);
res.matrixTransform(aTransform);
}
return res;
}

function ClockWipePath() { }

ClockWipePath.prototype.perform = function( nT ) {
const aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
var aPolyPath = PinWheelWipePath.calcCenteredClock(nT, 1.0);
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
}

function PinWheelWipePath( nBlades )
{
this.nBlades = nBlades;
if( !this.nBlades || this.nBlades < 1 )
this.nBlades = 1;
}

PinWheelWipePath.calcCenteredClock = function( nT, nE )
{
var nMAX_EDGE = 2;

var aTransform = SVGIdentityMatrix.rotate( nT * 360 );

var aPoint = document.documentElement.createSVGPoint();
aPoint.y = -nMAX_EDGE;
aPoint = aPoint.matrixTransform( aTransform );

var sPathData = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
if( nT >= 0.875 )
sPathData += 'L ' + '-' + nE + ' -' + nE + ' ';
if( nT >= 0.625 )
sPathData += 'L ' + '-' + nE + ' ' + nE + ' ';
if( nT >= 0.375 )
sPathData += 'L ' + nE + ' ' + nE + ' ';
if( nT >= 0.125 )
sPathData += 'L ' + nE + ' -' + nE + ' ';

sPathData += 'L 0 -' + nE + ' ';
sPathData += 'L 0 0 ';
sPathData += 'L '  + aPoint.x + ' ' + aPoint.y;

var aPath = document.createElementNS( NSS['svg'], 'path' );
aPath.setAttribute( 'd', sPathData );
return aPath;
};

PinWheelWipePath.prototype.perform = function( nT )
{
var aBasePath = PinWheelWipePath.calcCenteredClock( nT / this.nBlades,
2.0 /* max edge when rotating */  );

var aPolyPath = aBasePath.cloneNode( true );
var aPath;
var aRotation;
var i;
for( i = this.nBlades - 1; i > 0; --i )
{
aRotation = SVGIdentityMatrix.rotate( (i * 360) / this.nBlades );
aPath = aBasePath.cloneNode( true );
aPath.matrixTransform( aRotation );
aPolyPath.appendPath( aPath );
}

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( 0.5 );
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
};

function BarnDoorWipePath(doubled) {
this.aBasePath = createUnitSquarePath();
this.doubled   = doubled;
}

BarnDoorWipePath.prototype.perform = function( nT ) {
if(this.doubled)
nT /= 2.0;
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.scaleNonUniform(pruneScaleValue(nT), 1.0).translate(0.5, 0.5);
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
var res = aPath;

if(this.doubled) {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI / 2).translate(0.5, 0.5);
aPath.matrixTransform(aTransform);
res.appendPath(aPath);
}
return res;
}

function WaterfallWipePath(nElements, bFlipOnYAxis) {
this.bFlipOnYAxis = bFlipOnYAxis;

var sqrtElements = Math.floor(Math.sqrt(nElements));
var elementEdge = 1.0/sqrtElements;

var aPath = 'M '+ 0.0 + ' ' + -1.0 + ' ';
for(var pos = sqrtElements; pos--; ) {
var xPos = sqrtElements - pos - 1;
var yPos = pruneScaleValue( ((pos+1) * elementEdge) - 1.0);

aPath += 'L ' + pruneScaleValue(xPos * elementEdge) + ' ' + yPos + ' ';
aPath += 'L ' + pruneScaleValue((xPos+1)*elementEdge) + ' ' + yPos + ' ';
}
aPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';
this.aBasePath = document.createElementNS( NSS['svg'], 'path');
this.aBasePath.setAttribute('d', aPath);
}

WaterfallWipePath.prototype.perform = function( nT ) {
var poly = this.aBasePath.cloneNode(true);
var aTransform = SVGIdentityMatrix.translate(0.0, pruneScaleValue(2.0 * nT));
poly.matrixTransform(aTransform);
var aHead = 'M ' + 0.0 + ' ' + -1.0 + ' ';
var aHeadPath= document.createElementNS( NSS['svg'], 'path');
aHeadPath.setAttribute('d', aHead);

var aTail = 'M ' + 1.0 + ' ' + -1.0 + ' ';
var aTailPath = document.createElementNS( NSS['svg'], 'path');
aTailPath.setAttribute('d', aTail);

poly.prependPath(aHeadPath);
poly.appendPath(aTailPath);

return this.bFlipOnYAxis ? flipOnYAxis(poly) : poly;
}

function DoubleDiamondWipePath() { }

DoubleDiamondWipePath.prototype.perform = function( nT ) {
var a = pruneScaleValue(0.25 + (nT * 0.75));
var aPath = 'M ' + (0.5 + a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - a) + ' ';
aPath += 'L ' + (0.5 - a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + a) + ' ';
aPath += 'L ' + (0.5 + a) + ' ' + 0.5 + ' ';
var poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
var res = poly.cloneNode(true);

var b = pruneScaleValue( (1.0 - nT) * 0.25);
aPath = 'M ' + (0.5 + b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + b) + ' ';
aPath += 'L ' + (0.5 - b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - b) + ' ';
aPath += 'L ' + (0.5 + b) + ' ' + 0.5 + ' ';
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);

return res;
}

function IrisWipePath(unitRect) {
this.unitRect = unitRect;
this.aBasePath = createUnitSquarePath();
}


IrisWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.multiply(SVGIdentityMatrix.scaleNonUniform(d, d).translate(0.5, 0.5));
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function ZigZagWipePath(nZigs) {
this.zigEdge = 1.0/nZigs;
const d = this.zigEdge;
const d2 = (d / 2.0);
this.aBasePath = 'M ' + (-1.0 - d) + ' ' + -d + ' ';
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + (1.0 + d) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (1.0 + d) + ' ';

for(var pos = (nZigs + 2); pos--; ) {
this.aBasePath += 'L ' + 0.0 + ' ' + ((pos - 1) * d + d2) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (pos - 1) * d + ' ';
}
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + -d + ' ';
}

ZigZagWipePath.prototype.perform = function( nT ) {
var res = document.createElementNS( NSS['svg'], 'path');
res.setAttribute('d', this.aBasePath);
res.matrixTransform(SVGIdentityMatrix.translate((1.0 + this.zigEdge) * nT, 0.0));
return res;
}

function BarnZigZagWipePath( nZigs ) { ZigZagWipePath.call(this, nZigs); }

BarnZigZagWipePath.prototype = Object.create(ZigZagWipePath);

BarnZigZagWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath();
var poly = document.createElementNS( NSS['svg'], 'path');
var aTransform = SVGIdentityMatrix.translate(
((1.0 + this.zigEdge) * (1.0 - nT)) / 2.0, 0.0);
poly.setAttribute('d', this.aBasePath);
poly.changeOrientation();
poly.matrixTransform(aTransform);
res.appendPath(poly);

aTransform = SVGIdentityMatrix.scale(-1.0, 1.0);
aTransform.translate(1.0, this.zigEdge / 2.0);
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', this.aBasePath);
poly.matrixTransform(aTransform);
res.appendPath(poly);

return res;
}

function CheckerBoardWipePath( unitsPerEdge )
{
this.unitsPerEdge = unitsPerEdge;
if( this.unitsPerEdge === undefined || this.unitsPerEdge < 1 )
this.unitsPerEdge = 10;
this.aBasePath = createUnitSquarePath();
}

CheckerBoardWipePath.prototype.perform = function( nT )
{
var d = pruneScaleValue(1.0 / this.unitsPerEdge);
var aMatrix = SVGIdentityMatrix.scaleNonUniform(pruneScaleValue( d*2.0*nT ),
pruneScaleValue( d ) );

var aPolyPath = null;
var i, j;
var aTransform;
var aPath;
for ( i = this.unitsPerEdge; i--; )
{
aTransform = SVGIdentityMatrix;

if ((i % 2) == 1) // odd line
aTransform = aTransform.translate( -d, 0.0 );

aTransform = aTransform.multiply( aMatrix );

for ( j = (this.unitsPerEdge / 2) + 1; j--;)
{
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
if (aPolyPath == null) aPolyPath = aPath;
else aPolyPath.appendPath( aPath );
aTransform = SVGIdentityMatrix.translate( d*2.0, 0.0 ).multiply( aTransform );
}

aMatrix = SVGIdentityMatrix.translate( 0.0, d ).multiply( aMatrix ); // next line
}

return aPolyPath;
};


function RandomWipePath( nElements, bRandomBars )
{
this.nElements = nElements;
this.aBasePath = createUnitSquarePath();
this.aPositionArray = new Array( nElements );
this.aClipPath = createEmptyPath();
this.nAlreadyAppendedElements = 0;

var fEdgeLength, nPos, aTransform;

if( bRandomBars ) // random bar wipe
{
fEdgeLength = 1.0 / nElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = { x: 0.0, y: pruneScaleValue( nPos * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scaleNonUniform( 1.0, pruneScaleValue( fEdgeLength ) );
}
else // dissolve wipe
{
var nSqrtElements = Math.round( Math.sqrt( nElements ) );
fEdgeLength = 1.0 / nSqrtElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = {
x: pruneScaleValue( ( nPos % nSqrtElements ) * fEdgeLength ),
y: pruneScaleValue( ( nPos / nSqrtElements ) * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scale( pruneScaleValue( fEdgeLength ) );
}
this.aBasePath.matrixTransform( aTransform );

var nPos1, nPos2;
var tmp;
for( nPos1 = nElements - 1; nPos1 > 0; --nPos1 )
{
nPos2 = getRandomInt( nPos1 + 1 );
tmp = this.aPositionArray[nPos1];
this.aPositionArray[nPos1] = this.aPositionArray[nPos2];
this.aPositionArray[nPos2] = tmp;
}
}

RandomWipePath.prototype.perform = function( nT )
{
var aPolyPath = createEmptyPath();
var aPoint;
var aPath;
var aTransform;
var nElements = Math.round( nT * this.nElements );
if( nElements === 0 )
{
return aPolyPath;
}
if( this.nAlreadyAppendedElements >= nElements )
{
this.nAlreadyAppendedElements = 0;
this.aClipPath = createEmptyPath();
}
var nPos;
for( nPos = this.nAlreadyAppendedElements; nPos < nElements; ++nPos )
{
aPoint = this.aPositionArray[nPos];
aPath = this.aBasePath.cloneNode( true );
aTransform = SVGIdentityMatrix.translate( aPoint.x, aPoint.y );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}

this.nAlreadyAppendedElements = nElements;
this.aClipPath.appendPath( aPolyPath );

return this.aClipPath.cloneNode( true );
};

function SnakeWipePath(nElements, bDiagonal, bflipOnYAxis)
{
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.elementEdge  = (1.0 / this.sqrtElements);
this.diagonal     = bDiagonal;
this.flipOnYAxis  = bflipOnYAxis;
this.aBasePath    = createUnitSquarePath();
}

SnakeWipePath.prototype.calcSnake = function(t)
{
var aPolyPath = createEmptyPath();
const area   = (t * this.sqrtElements * this.sqrtElements);
const line_  = Math.floor(area) / this.sqrtElements;
const line   = pruneScaleValue(line_ / this.sqrtElements);
const col    = pruneScaleValue((area - (line_ * this.sqrtElements)) / this.sqrtElements);

if(line != 0) {
let aPath = 'M '+ 0.0 + ' ' + 0.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + 0.0 + ' ';
aPath += 'L 0 0 ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}
if(col != 0) {
var offset = 0.0;
if((line_ & 1) == 1) {
offset = (1.0 - col);
}
let aPath = 'M ' + offset + ' ' + line + ' ';
aPath += 'L '+ offset + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + line + ' ';
aPath += 'L ' + offset + ' ' + line + ' ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}

return aPolyPath;
}

SnakeWipePath.prototype.calcHalfDiagonalSnake = function(nT, bIn) {
var res = createEmptyPath();

if(bIn) {
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(sqrtArea2 / this.sqrtElements);

var aPath, aPoint = document.documentElement.createSVGPoint();
if(edge) {
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = (nT * Math.SQRT1_2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.rotate((Math.PI)/2 + (Math.PI)/4);
aTransform.translate(edge + this.elementEdge, 0.0);
}
else {
aTransform = SVGIdentityMatrix.translate(-a, 0.0);
aTransform.rotate(-(Math.PI/4));
aTransform.translate(0.0, edge);
}

poly.matrixTransform(aTransform);
res.appendPath(poly);
}
else { //out
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(Math.floor(sqrtArea2)/this.sqrtElements);

let aPath, aPoint = document.documentElement.createSVGPoint();
if(edge != 0) {
aPoint.y = 1.0;
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 1.0;
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = ((1.0 - nT) * Math.SQRT2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.translate(0.0, -height);
aTransform.rotate(Math.PI/2 + Math.PI/4);
aTransform.translate(1.0, edge);
}
else {
aTransform = SVGIdentityMatrix.rotate(-(Math.PI/4));
aTransform = aTransform.translate(edge, 1.0);
}
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
return res;
}

SnakeWipePath.prototype.perform = function(nT) {
var res = createEmptyPath();
if(this.diagonal) {
if(nT >= 0.5) {
res.appendPath(this.calcHalfDiagonalSnake(1.0, true));
res.appendPath(this.calcHalfDiagonalSnake(2.0*(nT-0.5), false));
}
else
res.appendPath(this.calcHalfDiagonalSnake(2.0*nT, true));
}
else
res = this.calcSnake(nT);

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function ParallelSnakesWipePath(nElements, bDiagonal, bFlipOnYAxis, bOpposite) {
SnakeWipePath.call(this, nElements, bDiagonal, bFlipOnYAxis);
this.bOpposite = bOpposite;
}

ParallelSnakesWipePath.prototype = Object.create(SnakeWipePath);

ParallelSnakesWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath(), half, aTransform;
if(this.diagonal) {
assert(this.bOpposite);
half = SnakeWipePath.prototype.calcHalfDiagonalSnake.call(this, nT, false);
aTransform = SVGIdentityMatrix.scale(1, -1);
aTransform.translate(-0.5, 0.5);
aTransform.rotate(Math.PI/2);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
half.changeOrientation();
res.appendPath(half);

aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(half);
}
else {
half = SnakeWipePath.prototype.calcSnake.call(this, nT / 2.0 );
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI/2);
aTransform = aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(flipOnYAxis(half));
res.appendPath(this.bOpposite ? flipOnXAxis(half) : half);
}

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function SpiralWipePath(nElements, bFlipOnYAxis) {
this.nElements    = nElements;
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.bFlipOnYAxis = bFlipOnYAxis;
}

SpiralWipePath.prototype.calcNegSpiral = function( nT ) {
var area  = nT * this.nElements;
var e     = (Math.sqrt(area) / 2.0);
var edge  = Math.floor(e) * 2;

var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
var edge_ = pruneScaleValue(edge / this.sqrtElements);

aTransform = aTransform.scale(edge_, edge_);
aTransform = aTransform.translate(0.5, 0.5);
var poly = createUnitSquarePath();
poly.matrixTransform(aTransform);
var res = poly.cloneNode(true);

if(1.0 - nT != 0) {
var edge1 = edge + 1;
var len   = Math.floor( (e - edge/2) * edge1 * 4);
var w     = Math.PI / 2;

while(len > 0) {
var alen = Math.min(len, edge1);
len -= alen;
poly = createUnitSquarePath();
aTransform = SVGIdentityMatrix.scale(
pruneScaleValue( alen / this.sqrtElements ),
pruneScaleValue( 1.0 / this.sqrtElements ));
aTransform = aTransform.translate(
- pruneScaleValue( (edge / 2) / this.sqrtElements ),
pruneScaleValue( (edge / 2) / this.sqrtElements ));
aTransform = aTransform.rotate( w );
w -= Math.PI / 2;
aTransform = aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
}

return res;
}

SpiralWipePath.prototype.perform = function( nT ) {
var res         = createUnitSquarePath();
var innerSpiral = this.calcNegSpiral( 1.0 - nT );
innerSpiral.changeOrientation();
res.appendPath(innerSpiral);

return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function BoxSnakesWipePath(nElements, bFourBox) {
SpiralWipePath.call(this, nElements);
this.bFourBox = bFourBox;
}

BoxSnakesWipePath.prototype = Object.create(SpiralWipePath);

BoxSnakesWipePath.prototype.perform = function( nT ) {
var res = createUnitSquarePath(), aTransform;
var innerSpiral = SpiralWipePath.prototype.calcNegSpiral.call(this, 1.0 - nT);
innerSpiral.changeOrientation();

if(this.bFourBox) {
aTransform = SVGIdentityMatrix.scale(0.5, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
innerSpiral = flipOnYAxis(innerSpiral);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
else {
aTransform = SVGIdentityMatrix.scale(1.0, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function VeeWipePath() { }

VeeWipePath.prototype.perform = function( nT ) {
const d = pruneScaleValue(2.0 * nT);
var polyPath = 'M ' + 0.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 0.5 + ' ' + d + ' ';
polyPath += 'L ' + 1.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';

var aPolyPolyPath = document.createElementNS( NSS['svg'], 'path');
aPolyPolyPath.setAttribute('d', polyPath);
return aPolyPolyPath;
}


function AnimatedSlide( aMetaSlide )
{
if( !aMetaSlide )
{
log( 'AnimatedSlide constructor: meta slide is not valid' );
}

this.aMetaSlide = aMetaSlide;
this.aSlideElement = this.aMetaSlide.slideElement;
this.sSlideId = this.aMetaSlide.slideId;

this.aUsedAttributeSet = [];

this.aClipPathElement = null;
this.aClipPathContent = null;
this.bIsClipped = false;
}

AnimatedSlide.prototype.show = function()
{
this.aMetaSlide.show();
};

AnimatedSlide.prototype.hide = function()
{
this.aMetaSlide.hide();
};

AnimatedSlide.prototype.notifyUsedAttribute = function( sName )
{
if( sName == 'clip-path' )
{
this.initClipPath();
this.bIsClipped = true;
}
else
{
this.aUsedAttributeSet.push( sName );
}
};

AnimatedSlide.prototype.reset = function()
{
if( this.bIsClipped )
{
this.cleanClipPath();
this.bIsClipped = false;
}

var i;
for( i = 0; i < this.aUsedAttributeSet.length; ++i )
{
var sAttrName = this.aUsedAttributeSet[i];
this.aSlideElement.removeAttribute( sAttrName );
}
this.aUsedAttributeSet = [];
};

AnimatedSlide.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sSlideId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
var sPathData = 'M 0 0 h ' + WIDTH + ' v ' + HEIGHT + ' h -' + WIDTH + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aSlideElement.parentNode.setAttribute( 'clip-path', sRef );
};

AnimatedSlide.prototype.cleanClipPath = function()
{
this.aSlideElement.parentNode.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedSlide.prototype.insertBefore = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.insertBefore( aElement, this.aSlideElement );
}
};

AnimatedSlide.prototype.appendElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.appendChild( aElement );
}
};

AnimatedSlide.prototype.removeElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.removeChild( aElement );
}
};

AnimatedSlide.prototype.getWidth = function()
{
return WIDTH;
};

AnimatedSlide.prototype.getHeight = function()
{
return HEIGHT;
};

AnimatedSlide.prototype.setOpacity = function( nValue )
{
this.aSlideElement.setAttribute( 'opacity', nValue );
};

AnimatedSlide.prototype.translate = function( nDx, nDy )
{
var sTransformAttr = 'translate(' + nDx + ',' + nDy + ')';
this.aSlideElement.setAttribute( 'transform', sTransformAttr );
};

AnimatedSlide.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


function AnimatedElement( aElement )
{
if( !aElement )
{
log( 'AnimatedElement constructor: element is not valid' );
}

this.aSlideShowContext = null;

this.aBaseElement = aElement.cloneNode( true );
this.aActiveElement = aElement;
this.sElementId = this.aActiveElement.getAttribute( 'id' );

this.aBaseBBox = this.aActiveElement.getBBox();
this.nBaseCenterX = this.aBaseBBox.x + this.aBaseBBox.width / 2;
this.nBaseCenterY = this.aBaseBBox.y + this.aBaseBBox.height / 2;


this.aClipPathElement = null;
this.aClipPathContent = null;

this.aPreviousElement = null;
this.aStateSet = {};

this.eAdditiveMode = ADDITIVE_MODE_REPLACE;
this.bIsUpdated = true;

this.aTMatrix = document.documentElement.createSVGMatrix();
this.aCTM = document.documentElement.createSVGMatrix();
this.aICTM = document.documentElement.createSVGMatrix();

this.initElement();
}

AnimatedElement.prototype.initElement = function()
{
this.nCenterX = this.nBaseCenterX;
this.nCenterY = this.nBaseCenterY;
this.nScaleFactorX = 1.0;
this.nScaleFactorY = 1.0;
this.nRotationAngle = 0.0;

this.aActiveElement.setAttribute( 'transform', makeMatrixString( 1, 0, 0, 1, 0, 0 ) );
};

AnimatedElement.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sElementId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
this.aClippingBBox = this.getBBoxWithStroke();
var nWidth = this.aClippingBBox.width;
var nHeight = this.aClippingBBox.height;
var sPathData = 'M ' + this.aClippingBBox.x + ' ' + this.aClippingBBox.y +
' h ' + nWidth + ' v ' + nHeight + ' h -' + nWidth + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aActiveElement.setAttribute( 'clip-path', sRef );
};

AnimatedElement.prototype.cleanClipPath = function()
{
this.aActiveElement.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedElement.prototype.getId = function()
{
return this.aActiveElement.getAttribute( 'id' );
};

AnimatedElement.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimatedElement.prototype.setAdditiveMode = function( eAdditiveMode )
{
this.eAdditiveMode = eAdditiveMode;
};

AnimatedElement.prototype.setToElement = function( aElement )
{
if( !aElement )
{
log( 'AnimatedElement(' + this.getId() + ').setToElement: element is not valid' );
return false;
}

var aClone = aElement.cloneNode( true );
this.aPreviousElement = this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

return true;
};

AnimatedElement.prototype.notifySlideStart = function( aSlideShowContext )
{
if( !aSlideShowContext )
{
log( 'AnimatedElement.notifySlideStart: slideshow context is not valid' );
}
this.aSlideShowContext = aSlideShowContext;

var aClone = this.aBaseElement.cloneNode( true );
this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

this.initElement();
this.DBG( '.notifySlideStart invoked' );
};

AnimatedElement.prototype.notifySlideEnd = function()
{
};

AnimatedElement.prototype.notifyAnimationStart = function()
{
};

AnimatedElement.prototype.notifyAnimationEnd = function()
{
};

AnimatedElement.prototype.notifyNextEffectStart = function( /*nEffectIndex*/ )
{
};

AnimatedElement.prototype.saveState = function( nAnimationNodeId )
{
ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').saveState(' + nAnimationNodeId +')' );
if( !this.aStateSet[ nAnimationNodeId ] )
{
this.aStateSet[ nAnimationNodeId ] = {};
}
var aState = this.aStateSet[ nAnimationNodeId ];
aState.aElement = this.aActiveElement.cloneNode( true );
aState.nCenterX = this.nCenterX;
aState.nCenterY = this.nCenterY;
aState.nScaleFactorX = this.nScaleFactorX;
aState.nScaleFactorY = this.nScaleFactorY;
aState.nRotationAngle = this.nRotationAngle;

};

AnimatedElement.prototype.restoreState = function( nAnimationNodeId )
{
if( !this.aStateSet[ nAnimationNodeId ] )
{
log( 'AnimatedElement(' + this.getId() + ').restoreState: state '
+nAnimationNodeId  + ' is not valid' );
return false;
}

ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').restoreState(' + nAnimationNodeId +')' );
var aState = this.aStateSet[ nAnimationNodeId ];
var bRet = this.setToElement( aState.aElement );
if( bRet )
{
this.nCenterX = aState.nCenterX;
this.nCenterY = aState.nCenterY;
this.nScaleFactorX = aState.nScaleFactorX;
this.nScaleFactorY = aState.nScaleFactorY;
this.nRotationAngle = aState.nRotationAngle;
}
return bRet;
};

AnimatedElement.prototype.getBaseBBox = function()
{
return this.aBaseBBox;
};

AnimatedElement.prototype.getBaseCenterX = function()
{
return this.nBaseCenterX;
};

AnimatedElement.prototype.getBaseCenterY = function()
{
return this.nBaseCenterY;
};

AnimatedElement.prototype.getBBox = function()
{
return this.aActiveElement.parentNode.getBBox();
};

AnimatedElement.prototype.getBBoxWithStroke = function()
{
var aBBox = this.aActiveElement.parentNode.getBBox();

var aChildrenSet = this.aActiveElement.childNodes;

var sStroke, sStrokeWidth;
var nStrokeWidth = 0;
var i;
for( i = 0; i < aChildrenSet.length; ++i )
{
if( ! aChildrenSet[i].getAttribute  )
continue;

sStroke = aChildrenSet[i].getAttribute( 'stroke' );
if( sStroke && sStroke != 'none' )
{
sStrokeWidth = aChildrenSet[i].getAttribute( 'stroke-width' );
var nSW = parseFloat( sStrokeWidth );
if( nSW > nStrokeWidth )
nStrokeWidth = nSW;
}
}

if( nStrokeWidth == 0 )
{
sStrokeWidth = ROOT_NODE.getAttribute( 'stroke-width' );
nStrokeWidth = parseFloat( sStrokeWidth );
}
if( nStrokeWidth != 0 )
{
nStrokeWidth *= 1.1;
var nHalfStrokeWidth = nStrokeWidth / 2;
var nDoubleStrokeWidth = nStrokeWidth * 2;

var aEBBox = document.documentElement.createSVGRect();
aEBBox.x = aBBox.x - nHalfStrokeWidth;
aEBBox.y = aBBox.y - nHalfStrokeWidth;
aEBBox.width = aBBox.width + nDoubleStrokeWidth;
aEBBox.height = aBBox.height + nDoubleStrokeWidth;
aBBox = aEBBox;
}
return aBBox;
};

AnimatedElement.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var aTranslation = SVGIdentityMatrix.translate( this.aClippingBBox.x,
this.aClippingBBox.y);
aClipPathContent.matrixTransform( aTranslation );
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


AnimatedElement.prototype.getX = function()
{
return this.nCenterX;
};

AnimatedElement.prototype.getY = function()
{
return this.nCenterY;
};

AnimatedElement.prototype.getWidth = function()
{
return this.nScaleFactorX * this.getBaseBBox().width;
};

AnimatedElement.prototype.getHeight = function()
{
return this.nScaleFactorY * this.getBaseBBox().height;
};

AnimatedElement.prototype.updateTransformAttribute = function()
{
this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
};

AnimatedElement.prototype.setX = function( nNewCenterX )
{
if( nNewCenterX === this.nCenterX ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( nNewCenterX - this.nCenterX, 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterX = nNewCenterX;
};

AnimatedElement.prototype.setY = function( nNewCenterY )
{
if( nNewCenterY === this.nCenterY ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( 0, nNewCenterY - this.nCenterY );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterY = nNewCenterY;
};

AnimatedElement.prototype.setWidth = function( nNewWidth )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewWidth = ' + nNewWidth );
if( nNewWidth < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewWidth = 0;
}

var nBaseWidth = this.getBaseBBox().width;
var nScaleFactorX = nNewWidth / nBaseWidth;

if( nScaleFactorX < 1e-5 ) nScaleFactorX = 1e-5;
if( nScaleFactorX == this.nScaleFactorX ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorX = nScaleFactorX;
};

AnimatedElement.prototype.setHeight = function( nNewHeight )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewHeight = ' + nNewHeight );
if( nNewHeight < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewHeight = 0;
}

var nBaseHeight = this.getBaseBBox().height;
var nScaleFactorY = nNewHeight / nBaseHeight;

if( nScaleFactorY < 1e-5 ) nScaleFactorY = 1e-5;
if( nScaleFactorY == this.nScaleFactorY ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( this.nScaleFactorX, nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorY = nScaleFactorY;
};

AnimatedElement.prototype.getOpacity = function()
{
return this.aActiveElement.getAttribute( 'opacity' );
};

AnimatedElement.prototype.setOpacity = function( nValue )
{
this.aActiveElement.setAttribute( 'opacity', nValue );
};

AnimatedElement.prototype.getRotationAngle = function()
{
return this.nRotationAngle;
};

AnimatedElement.prototype.setRotationAngle = function( nNewRotAngle )
{
this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(nNewRotAngle)
.scaleNonUniform( this.nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nRotationAngle = nNewRotAngle;
};

AnimatedElement.prototype.getVisibility = function()
{

var sVisibilityValue = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityValue || ( sVisibilityValue === 'inherit' ) )
return 'visible'; // TODO: look for parent visibility!
else
return sVisibilityValue;
};

AnimatedElement.prototype.setVisibility = function( sValue )
{
if( sValue == 'visible' )
sValue = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sValue );
};

AnimatedElement.prototype.getStrokeStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setStrokeStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setStrokeStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setFillStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFillStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
break;
}

return colorParser( sFillColorValue );
};

AnimatedElement.prototype.setFillColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'fill', sValue );
}
}
};

AnimatedElement.prototype.getStrokeColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
break;
}

return colorParser( sStrokeColorValue );
};

AnimatedElement.prototype.setStrokeColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'stroke', sValue );
}
}
};

AnimatedElement.prototype.getFontColor = function()
{
return new RGBColor( 0, 0, 0 );
};

AnimatedElement.prototype.setFontColor = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFontColor(' + sValue + ')' );
};

AnimatedElement.prototype.DBG = function( sMessage, nTime )
{
aAnimatedElementDebugPrinter.print( 'AnimatedElement(' + this.getId() + ')' + sMessage, nTime );
};


function AnimatedTextElement( aElement, aEventMultiplexer )
{
var theDocument = document;

var sTextType = aElement.getAttribute( 'class' );
var bIsListItem = ( sTextType === 'ListItem' );
if( ( sTextType !== 'TextParagraph' ) && !bIsListItem )
{
log( 'AnimatedTextElement: passed element is not a paragraph.' );
return;
}
var aTextShapeElement = aElement.parentNode;
sTextType = aTextShapeElement.getAttribute( 'class' );
if( sTextType !== 'TextShape' )
{
log( 'AnimatedTextElement: element parent is not a text shape.' );
return;
}
var aTextShapeGroup = aTextShapeElement.parentNode;
var aAnimatedElementGroup = getElementByClassName( aTextShapeGroup, 'AnimatedElements' );
if( !aAnimatedElementGroup )
{
aAnimatedElementGroup = theDocument.createElementNS( NSS['svg'], 'g' );
aAnimatedElementGroup.setAttribute( 'class', 'AnimatedElements' );
aTextShapeGroup.appendChild( aAnimatedElementGroup );
}

var aAnimatableElement = theDocument.createElementNS( NSS['svg'], 'g' );
var aTextElement = theDocument.createElementNS( NSS['svg'], 'text' );
var aParagraphElement = aElement.cloneNode( true );

this.aGraphicGroupElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aGraphicGroupElement.setAttribute( 'class', 'GraphicGroup' );

var aBulletCharClone = null;
var aBulletCharElem = null;
var bIsBulletCharStyle =
( aElement.getAttributeNS( NSS['ooo'], aOOOAttrListItemNumberingType ) === 'bullet-style' );
if( bIsBulletCharStyle )
{
var aBulletCharGroupElem = getElementByClassName( aTextShapeGroup, 'BulletChars' );
if( aBulletCharGroupElem )
{
var aBulletPlaceholderElem = getElementByClassName( aElement, 'BulletPlaceholder' );
if( aBulletPlaceholderElem )
{
var sId = aBulletPlaceholderElem.getAttribute( 'id' );
sId = 'bullet-char(' + sId + ')';
aBulletCharElem = theDocument.getElementById( sId );
if( aBulletCharElem )
{
aBulletCharClone = aBulletCharElem.cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
else
{
log( 'AnimatedTextElement: no bullet placeholder found' );
}
}
else
{
log( 'AnimatedTextElement: no bullet char group found' );
}
}

var aBitmapElemSet = [];
var aBitmapCloneSet = [];
var aBitmapPlaceholderSet = getElementsByClassName( aElement, 'BitmapPlaceholder' );
var i;
if( aBitmapPlaceholderSet )
{
for( i = 0; i < aBitmapPlaceholderSet.length; ++i )
{
sId = aBitmapPlaceholderSet[i].getAttribute( 'id' );
var sBitmapChecksum = sId.substring( 'bitmap-placeholder'.length + 1, sId.length - 1 );
sId = 'embedded-bitmap(' + sBitmapChecksum + ')';
aBitmapElemSet[i] = theDocument.getElementById( sId );
if( aBitmapElemSet[i] )
{
aBitmapCloneSet[i] = aBitmapElemSet[i].cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
}


this.sParagraphId = sId = aParagraphElement.getAttribute( 'id' );
aParagraphElement.removeAttribute( 'id' );
aAnimatableElement.setAttribute( 'id', sId +'.a' );
if( aBulletCharClone )
aBulletCharClone.removeAttribute( 'id' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
aBitmapCloneSet[i].removeAttribute( 'id' );
}

var sVisibilityAttr = aElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
aAnimatableElement.setAttribute( 'visibility', sVisibilityAttr );
aParagraphElement.setAttribute( 'visibility', 'inherit' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
if( aBulletCharElem )
aBulletCharElem.setAttribute( 'visibility', 'hidden' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapElemSet[i] )
aBitmapElemSet[i].setAttribute( 'visibility', 'hidden' );
}


aTextElement.appendChild( aParagraphElement );
aAnimatableElement.appendChild( aTextElement );

if( aBulletCharClone )
this.aGraphicGroupElement.appendChild( aBulletCharClone );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
this.aGraphicGroupElement.appendChild( aBitmapCloneSet[i] );
}
aAnimatableElement.appendChild( this.aGraphicGroupElement );
aAnimatedElementGroup.appendChild( aAnimatableElement );

this.aParentTextElement = aElement.parentNode;
this.aParagraphElement = aElement;
this.aAnimatedElementGroup = aAnimatedElementGroup;
this.nRunningAnimations = 0;

this.aHyperlinkIdSet = [];
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var sHyperlinkId;
for( i = 0; i < aHyperlinkElementSet.length; ++i )
{
sHyperlinkId = aHyperlinkElementSet[i].getAttribute( 'id' );
if( sHyperlinkId )
this.aHyperlinkIdSet.push( sHyperlinkId );
else
log( 'error: AnimatedTextElement constructor: hyperlink element has no id' );
}

AnimatedTextElement.superclass.constructor.call( this, aAnimatableElement, aEventMultiplexer );

}
extend( AnimatedTextElement, AnimatedElement );


AnimatedTextElement.prototype.setToElement = function( aElement )
{
var bRet = AnimatedTextElement.superclass.setToElement.call( this, aElement );
if( bRet )
{
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
}
return ( bRet && this.aGraphicGroupElement );
};

AnimatedTextElement.prototype.notifySlideStart = function( aSlideShowContext )
{
DBGLOG( 'AnimatedTextElement.notifySlideStart' );
AnimatedTextElement.superclass.notifySlideStart.call( this, aSlideShowContext );
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
this.restoreBaseTextParagraph();
};

AnimatedTextElement.prototype.notifySlideEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifySlideEnd' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
};

AnimatedTextElement.prototype.restoreBaseTextParagraph = function()
{
var aActiveParagraphElement = this.aActiveElement.firstElementChild.firstElementChild;
if( aActiveParagraphElement )
{
var sVisibilityAttr = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityAttr || ( sVisibilityAttr === 'visible' ) )
sVisibilityAttr = 'inherit';
if( sVisibilityAttr === 'inherit' )
this.aGraphicGroupElement.setAttribute( 'visibility', 'visible' );
else
this.aGraphicGroupElement.setAttribute( 'visibility', 'hidden' );

var aParagraphClone = aActiveParagraphElement.cloneNode( true );
aParagraphClone.setAttribute( 'id', this.sParagraphId );
aParagraphClone.setAttribute( 'visibility', sVisibilityAttr );
this.aParentTextElement.replaceChild( aParagraphClone, this.aParagraphElement );
this.aParagraphElement = aParagraphClone;


var aEventMultiplexer = this.aSlideShowContext.aEventMultiplexer;
var aHyperlinkIdSet = this.aHyperlinkIdSet;
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var i = 0;
for( ; i < aHyperlinkIdSet.length; ++i )
{
aEventMultiplexer.notifyElementChangedEvent( aHyperlinkIdSet[i], aHyperlinkElementSet[i] );
}
}
this.aActiveElement.setAttribute( 'visibility', 'hidden' );
};

AnimatedTextElement.prototype.notifyAnimationStart = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationStart' );
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
this.aParagraphElement.setAttribute( 'visibility', 'hidden' );
}
++this.nRunningAnimations;
};

AnimatedTextElement.prototype.notifyAnimationEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationEnd' );
--this.nRunningAnimations;
if( this.nRunningAnimations === 0 )
{
this.restoreBaseTextParagraph();
}
};

AnimatedTextElement.prototype.saveState = function( nAnimationNodeId )
{
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
}
AnimatedTextElement.superclass.saveState.call( this, nAnimationNodeId );
};

AnimatedTextElement.prototype.restoreState = function( nAnimationNodeId )
{
var bRet = AnimatedTextElement.superclass.restoreState.call( this, nAnimationNodeId );
if( bRet )
this.restoreBaseTextParagraph();
return bRet;
};


function SlideTransition( aAnimationsRootElement, aSlideId )
{
this.sSlideId = aSlideId;
this.bIsValid = false;
this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = false;
this.eTransitionMode = TRANSITION_MODE_IN;
this.sFadeColor = null;
this.aDuration = null;
this.nMinFrameCount = undefined;

if( aAnimationsRootElement )
{
if( aAnimationsRootElement.firstElementChild &&
( aAnimationsRootElement.firstElementChild.getAttributeNS( NSS['smil'], 'begin' ) === (this.sSlideId + '.begin') ) )
{
var aTransitionFilterElement = aAnimationsRootElement.firstElementChild.firstElementChild;
if( aTransitionFilterElement && ( aTransitionFilterElement.localName === 'transitionFilter' ) )
{
this.aElement = aTransitionFilterElement;
this.parseElement();
}
aAnimationsRootElement.removeChild( aAnimationsRootElement.firstElementChild );
}
}
}

SlideTransition.prototype.createSlideTransition = function( aLeavingSlide, aEnteringSlide )
{
if( !this.isValid() )
return null;
if( this.eTransitionType == 0 )
return null;

if( !aEnteringSlide )
{
log( 'SlideTransition.createSlideTransition: invalid entering slide.' );
return null;
}

var aTransitionInfo = aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'SlideTransition.createSlideTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( this.eTransitionType, this.eTransitionSubType );
return new ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, this.isDirectionForward() );

case TRANSITION_SPECIAL:
switch( this.eTransitionType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition class: TRANSITION_SPECIAL, ' +
'unknown transition type: ' + this.eTransitionType );
return null;

case PUSHWIPE_TRANSITION:
{
var aDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: PUSHWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aDirection = { x: -1.0, y: 0.0 };
break;
}
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aDirection, aDirection );
}

case SLIDEWIPE_TRANSITION:
{
var aInDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: SLIDEWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aInDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aInDirection = { x: -1.0, y: 0.0 };
break;
}
var aNoDirection = { x: 0.0, y: 0.0 };
if( !this.bReverseDirection )
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aNoDirection, aInDirection );
}
else
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aInDirection, aNoDirection );
}
}

case FADE_TRANSITION:
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: FADE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case CROSSFADE_TRANS_SUBTYPE:
return new FadingSlideChange( aLeavingSlide, aEnteringSlide );
case FADEOVERCOLOR_TRANS_SUBTYPE:
return new FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, this.getFadeColor() );
}
}
}
};

SlideTransition.prototype.parseElement = function()
{
this.bIsValid = true;
var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( this.bIsValid && aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType] === undefined )
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition not valid: type: ' + sTypeAttr + ' subtype: ' + sSubTypeAttr );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.sFadeColor = null;
if( this.eTransitionType == FADE_TRANSITION &&
( this.eTransitionSubType == FADEFROMCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADEOVERCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADETOCOLOR_TRANS_SUBTYPE ) )
{
var sColorAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fadeColor' );
if( sColorAttr )
this.sFadeColor = sColorAttr;
else
this.sFadeColor='#000000';
}


this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
this.aDuration = new Duration( null ); // duration == 0.0
}

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;

};

SlideTransition.prototype.isValid = function()
{
return this.bIsValid;
};

SlideTransition.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

SlideTransition.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

SlideTransition.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

SlideTransition.prototype.getFadeColor = function()
{
return this.sFadeColor;
};

SlideTransition.prototype.isDirectionForward = function()
{
return !this.bReverseDirection;
};

SlideTransition.prototype.getDuration = function()
{
return this.aDuration;
};

SlideTransition.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

SlideTransition.prototype.info = function()
{

var sInfo ='slide transition <' + this.sSlideId + '>: ';
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( !this.isDirectionForward() )
sInfo += ';  direction: reverse';

sInfo += '; mode: ' + aTransitionModeOutMap[ this.getTransitionMode() ];

if( this.getDuration() )
sInfo += '; duration: ' + this.getDuration().info();

return sInfo;
};


function SlideAnimations( aSlideShowContext )
{
this.aContext = new NodeContext( aSlideShowContext );
this.aAnimationNodeMap = {};
this.aAnimatedElementMap = {};
this.aSourceEventElementMap = {};
this.aNextEffectEventArray = new NextEffectEventArray();
this.aInteractiveAnimationSequenceMap = {};
this.aEventMultiplexer = new EventMultiplexer( aSlideShowContext.aTimerEventQueue );
this.aRootNode = null;
this.bElementsParsed = false;

this.aContext.aAnimationNodeMap = this.aAnimationNodeMap;
this.aContext.aAnimatedElementMap = this.aAnimatedElementMap;
this.aContext.aSourceEventElementMap = this.aSourceEventElementMap;

this.aEventMultiplexer.registerMouseClickHandler( document, 100 );
}


SlideAnimations.prototype.importAnimations = function( aAnimationRootElement )
{
if( !aAnimationRootElement )
return false;

this.aRootNode = createAnimationTree( aAnimationRootElement, this.aContext );

return ( this.aRootNode ? true : false );
};

SlideAnimations.prototype.parseElements = function()
{
if( !this.aRootNode )
return false;

if( !this.aRootNode.parseElement() )
return false;
else
this.bElementsParsed = true;
};

SlideAnimations.prototype.elementsParsed = function()
{
return this.bElementsParsed;
};

SlideAnimations.prototype.isFirstRun = function()
{
return this.aContext.bFirstRun;
};

SlideAnimations.prototype.isAnimated = function()
{
if( !this.bElementsParsed )
return false;

return this.aRootNode.hasPendingAnimation();
};

SlideAnimations.prototype.start = function()
{
if( !this.bElementsParsed )
return false;

this.chargeSourceEvents();
this.chargeInterAnimEvents();

aSlideShow.setSlideEvents( this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aEventMultiplexer );

if( this.aContext.bFirstRun == undefined )
this.aContext.bFirstRun = true;
else if( this.aContext.bFirstRun )
this.aContext.bFirstRun = false;

if( !this.aRootNode.init() )
return false;

return this.aRootNode.resolve();
};

SlideAnimations.prototype.end = function( bLeftEffectsSkipped )
{
if( !this.bElementsParsed )
return; // no animations there

this.aRootNode.deactivate();
this.aRootNode.end();

if( bLeftEffectsSkipped && this.isFirstRun() )
{
this.aContext.bFirstRun = undefined;
}
else if( this.isFirstRun() )
{
this.aContext.bFirstRun = false;
}

};

SlideAnimations.prototype.dispose = function()
{
if( this.aRootNode )
{
this.aRootNode.dispose();
}
};

SlideAnimations.prototype.clearNextEffectEvents = function()
{
ANIMDBG.print( 'SlideAnimations.clearNextEffectEvents: current slide: ' + nCurSlide );
this.aNextEffectEventArray.clear();
this.aContext.bFirstRun = undefined;
};

SlideAnimations.prototype.chargeSourceEvents = function()
{
for( var id in this.aSourceEventElementMap )
{
this.aSourceEventElementMap[id].charge();
}
};

SlideAnimations.prototype.chargeInterAnimEvents = function()
{
for( var id in this.aInteractiveAnimationSequenceMap )
{
this.aInteractiveAnimationSequenceMap[id].chargeEvents();
}
};


function Event()
{
this.nId = Event.getUniqueId();
}


Event.CURR_UNIQUE_ID = 0;

Event.getUniqueId = function()
{
++Event.CURR_UNIQUE_ID;
return Event.CURR_UNIQUE_ID;
};

Event.prototype.getId = function()
{
return this.nId;
};


function DelayEvent( aFunctor, nTimeout )
{
DelayEvent.superclass.constructor.call( this );

this.aFunctor = aFunctor;
this.nTimeout = nTimeout;
this.bWasFired = false;
}
extend( DelayEvent, Event );


DelayEvent.prototype.fire = function()
{
assert( this.isCharged(), 'DelayEvent.fire: assertion isCharged failed' );

this.bWasFired = true;
this.aFunctor();
return true;
};

DelayEvent.prototype.isCharged = function()
{
return !this.bWasFired;
};

DelayEvent.prototype.getActivationTime = function( nCurrentTime )
{
return ( this.nTimeout + nCurrentTime );
};

DelayEvent.prototype.dispose = function()
{
if( this.isCharged() )
this.bWasFired = true;
};

DelayEvent.prototype.charge = function()
{
if( !this.isCharged() )
this.bWasFired = false;
};


function WakeupEvent( aTimer, aActivityQueue )
{
WakeupEvent.superclass.constructor.call( this );

this.aTimer = new ElapsedTime( aTimer );
this.nNextTime = 0.0;
this.aActivity = null;
this.aActivityQueue = aActivityQueue;
}
extend( WakeupEvent, Event );


WakeupEvent.prototype.clone = function()
{
var aWakeupEvent = new WakeupEvent( this.aTimer.getTimeBase(), this.aActivityQueue );
aWakeupEvent.nNextTime = this.nNextTime;
aWakeupEvent.aActivity = this.aActivity;
return aWakeupEvent;
};

WakeupEvent.prototype.dispose = function()
{
this.aActivity = null;
};

WakeupEvent.prototype.fire = function()
{
if( !this.aActivity )
return false;

return this.aActivityQueue.addActivity( this.aActivity );
};

WakeupEvent.prototype.isCharged = function()
{
return true;
};

WakeupEvent.prototype.getActivationTime = function( nCurrentTime )
{
var nElapsedTime = this.aTimer.getElapsedTime();

return Math.max( nCurrentTime, nCurrentTime - nElapsedTime + this.nNextTime );
};

WakeupEvent.prototype.start = function()
{
this.aTimer.reset();
};

WakeupEvent.prototype.setNextTimeout = function( nNextTime )
{
this.nNextTime = nNextTime;
};

WakeupEvent.prototype.setActivity = function( aActivity )
{
this.aActivity = aActivity;
};


function makeEvent( aFunctor )
{
return new DelayEvent( aFunctor, 0.0 );
}


function makeDelay( aFunctor, nTimeout )
{
return new DelayEvent( aFunctor, nTimeout );
}


function registerEvent( nNodeId, aTiming, aEvent, aNodeContext )
{
var aSlideShowContext = aNodeContext.aContext;
var eTimingType = aTiming.getType();

registerEvent.DBG( aTiming );

if( eTimingType == OFFSET_TIMING )
{
aSlideShowContext.aTimerEventQueue.addEvent( aEvent );
}
else if ( aNodeContext.bFirstRun )
{
var aEventMultiplexer = aSlideShowContext.aEventMultiplexer;
if( !aEventMultiplexer )
{
log( 'registerEvent: event multiplexer not initialized' );
return;
}
var aNextEffectEventArray = aSlideShowContext.aNextEffectEventArray;
if( !aNextEffectEventArray )
{
log( 'registerEvent: next effect event array not initialized' );
return;
}
var aInteractiveAnimationSequenceMap =
aSlideShowContext.aInteractiveAnimationSequenceMap;
if( !aInteractiveAnimationSequenceMap )
{
log( 'registerEvent: interactive animation sequence map not initialized' );
return;
}

switch( eTimingType )
{
case EVENT_TIMING:
var eEventType = aTiming.getEventType();
var sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aEventBaseElem = document.getElementById( sEventBaseElemId );
if( !aEventBaseElem )
{
log( 'generateEvent: EVENT_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
var aSourceEventElement = aNodeContext.makeSourceEventElement( sEventBaseElemId, aEventBaseElem );

if( !aInteractiveAnimationSequenceMap[ nNodeId ] )
{
aInteractiveAnimationSequenceMap[ nNodeId ] = new InteractiveAnimationSequence(nNodeId);
}

var bEventRegistered = false;
switch( eEventType )
{
case EVENT_TRIGGER_ON_CLICK:
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aEvent );
aEventMultiplexer.registerRewindedEffectHandler( aSourceEventElement.getId(),
bind2( aSourceEventElement.charge, aSourceEventElement ) );
bEventRegistered = true;
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
if( bEventRegistered )
{
var aStartEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getStartEvent();
var aEndEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getEndEvent();
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aStartEvent );
aEventMultiplexer.registerEvent( EVENT_TRIGGER_END_EVENT, nNodeId, aEndEvent );
aEventMultiplexer.registerRewindedEffectHandler(
nNodeId,
bind2( InteractiveAnimationSequence.prototype.chargeEvents,
aInteractiveAnimationSequenceMap[ nNodeId ] )
);
}
}
else  // no base event element present
{
switch( eEventType )
{
case EVENT_TRIGGER_ON_NEXT_EFFECT:
aNextEffectEventArray.appendEvent( aEvent );
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
}
break;
case SYNCBASE_TIMING:
eEventType = aTiming.getEventType();
sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aAnimationNode = aNodeContext.aAnimationNodeMap[ sEventBaseElemId ];
if( !aAnimationNode )
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
aEventMultiplexer.registerEvent( eEventType, aAnimationNode.getId(), aEvent );
}
else
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not specified' );
}
break;
default:
log( 'generateEvent: not handled timing type: ' + eTimingType );
}
}
}

registerEvent.DEBUG = aRegisterEventDebugPrinter.isEnabled();

registerEvent.DBG = function( aTiming, nTime )
{
if( registerEvent.DEBUG )
{
aRegisterEventDebugPrinter.print( 'registerEvent( timing: ' + aTiming.info() + ' )', nTime );
}
};


function SourceEventElement( sId, aElement, aEventMultiplexer )
{
this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;

this.aEventMultiplexer.registerMouseClickHandler( this, 1000 );

this.bClickHandled = false;
this.bIsPointerOver = false;
this.aElement.addEventListener( 'mouseover', bind2( SourceEventElement.prototype.onMouseEnter, this), false );
this.aElement.addEventListener( 'mouseout', bind2( SourceEventElement.prototype.onMouseLeave, this), false );
}

SourceEventElement.prototype.getId = function()
{
return this.sId;
};

SourceEventElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

SourceEventElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

SourceEventElement.prototype.charge = function()
{
this.bClickHandled = false;
this.setPointerCursor();
};

SourceEventElement.prototype.handleClick = function( /*aMouseEvent*/ )
{
if( !this.bIsPointerOver ) return false;

if( this.bClickHandled )
return false;

this.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_ON_CLICK, this.getId() );
aSlideShow.update();
this.bClickHandled = true;
this.setDefaultCursor();
return true;
};

SourceEventElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

SourceEventElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function HyperlinkElement( sId, aEventMultiplexer )
{
var aElement = document.getElementById( sId );
if( !aElement )
{
log( 'error: HyperlinkElement: no element with id: <' + sId + '> found' );
return;
}
if( !aEventMultiplexer )
{
log( 'AnimatedElement constructor: event multiplexer is not valid' );
}

this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;
this.nTargetSlideIndex = undefined;

this.sURL = getNSAttribute( 'xlink', this.aElement, 'href' );
if( this.sURL )
{
if( this.sURL[0] === '#' )
{
if( this.sURL.substr(1, 5) === 'Slide' )
{
var sSlideIndex = this.sURL.split( ' ' )[1];
this.nTargetSlideIndex = parseInt( sSlideIndex ) - 1;
}
}

this.aEventMultiplexer.registerElementChangedHandler( this.sId, bind2( HyperlinkElement.prototype.onElementChanged, this) );
this.aEventMultiplexer.registerMouseClickHandler( this, 1100 );

this.bIsPointerOver = false;
this.mouseEnterHandler = bind2( HyperlinkElement.prototype.onMouseEnter, this);
this.mouseLeaveHandler = bind2( HyperlinkElement.prototype.onMouseLeave, this);
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
else
{
log( 'warning: HyperlinkElement(' + this.sId + '): url is empty' );
}
}

HyperlinkElement.prototype.onElementChanged = function( aElement )
{
if( !aElement )
{
log( 'error: HyperlinkElement: passed element is not valid' );
return;
}

if( this.sURL )
{
this.aElement.removeEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.removeEventListener( 'mouseout', this.mouseLeaveHandler, false );
this.aElement = aElement;
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
};

HyperlinkElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

HyperlinkElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

HyperlinkElement.prototype.handleClick = function( )
{
if( !this.bIsPointerOver ) return false;

if( this.nTargetSlideIndex !== undefined )
{
aSlideShow.displaySlide( this.nTargetSlideIndex, true );
}
else
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
aWindowObject.open( this.sURL, this.sId );
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

return true;
};

HyperlinkElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

HyperlinkElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function InteractiveAnimationSequence( nId )
{
this.nId = nId;
this.bIsRunning = false;
this.aStartEvent = null;
this.aEndEvent = null;
}

InteractiveAnimationSequence.prototype.getId = function()
{
return this.nId;
};

InteractiveAnimationSequence.prototype.getStartEvent = function()
{
if( !this.aStartEvent )
{
this.aStartEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.start, this ) );
}
return this.aStartEvent;
};

InteractiveAnimationSequence.prototype.getEndEvent = function()
{
if( !this.aEndEvent )
{
this.aEndEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.end, this ) );
}
return this.aEndEvent;
};

InteractiveAnimationSequence.prototype.chargeEvents = function()
{
if( this.aStartEvent )      this.aStartEvent.charge();
if( this.aEndEvent )        this.aEndEvent.charge();
};

InteractiveAnimationSequence.prototype.isRunning = function()
{
return this.bIsRunning;
};

InteractiveAnimationSequence.prototype.start = function()
{
aSlideShow.notifyInteractiveAnimationSequenceStart( this.getId() );
this.bIsRunning = true;
};

InteractiveAnimationSequence.prototype.end = function()
{
aSlideShow.notifyInteractiveAnimationSequenceEnd( this.getId() );
this.bIsRunning = false;
};


function PriorityEntry( aValue, nPriority )
{
this.aValue = aValue;
this.nPriority = nPriority;
}

PriorityEntry.compare = function( aLhsEntry, aRhsEntry )
{
if ( aLhsEntry.nPriority < aRhsEntry.nPriority )
{
return -1;
}
else if (aLhsEntry.nPriority > aRhsEntry.nPriority)
{
return 1;
}
else
{
return 0;
}
};


function EventMultiplexer( aTimerEventQueue )
{
this.nId = EventMultiplexer.getUniqueId();
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMap = {};
this.aAnimationsEndHandler = null;
this.aSkipEffectEndHandlerSet = [];
this.aMouseClickHandlerSet = new PriorityQueue( PriorityEntry.compare );
this.aSkipEffectEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
this.aSkipInteractiveEffectEventSet = {};
this.aRewindRunningInteractiveEffectEventSet = {};
this.aRewindEndedInteractiveEffectEventSet = {};
this.aRewindedEffectHandlerSet = {};
this.aElementChangedHandlerSet = {};
}

EventMultiplexer.CURR_UNIQUE_ID = 0;

EventMultiplexer.getUniqueId = function()
{
++EventMultiplexer.CURR_UNIQUE_ID;
return EventMultiplexer.CURR_UNIQUE_ID;
};

EventMultiplexer.prototype.getId = function()
{
return this.nId;
};

EventMultiplexer.prototype.hasRegisteredMouseClickHandlers = function()
{
return !this.aMouseClickHandlerSet.isEmpty();
};

EventMultiplexer.prototype.registerMouseClickHandler = function( aHandler, nPriority )
{
var aHandlerEntry = new PriorityEntry( aHandler, nPriority );
this.aMouseClickHandlerSet.push( aHandlerEntry );
};

EventMultiplexer.prototype.notifyMouseClick = function( aMouseEvent )
{
var aMouseClickHandlerSet = this.aMouseClickHandlerSet.clone();
while( !aMouseClickHandlerSet.isEmpty() )
{
var aHandlerEntry = aMouseClickHandlerSet.top();
aMouseClickHandlerSet.pop();
if( aHandlerEntry.aValue.handleClick( aMouseEvent ) )
break;
}
};

EventMultiplexer.prototype.registerEvent = function( eEventType, aNotifierId, aEvent )
{
this.DBG( 'registerEvent', eEventType, aNotifierId );
if( !this.aEventMap[ eEventType ] )
{
this.aEventMap[ eEventType ] = {};
}
if( !this.aEventMap[ eEventType ][ aNotifierId ] )
{
this.aEventMap[ eEventType ][ aNotifierId ] = [];
}
this.aEventMap[ eEventType ][ aNotifierId ].push( aEvent );
};


EventMultiplexer.prototype.notifyEvent = function( eEventType, aNotifierId )
{
this.DBG( 'notifyEvent', eEventType, aNotifierId );
if( this.aEventMap[ eEventType ] )
{
if( this.aEventMap[ eEventType ][ aNotifierId ] )
{
var aEventArray = this.aEventMap[ eEventType ][ aNotifierId ];
var nSize = aEventArray.length;
for( var i = 0; i < nSize; ++i )
{
this.aTimerEventQueue.addEvent( aEventArray[i] );
}
}
}
};

EventMultiplexer.prototype.registerAnimationsEndHandler = function( aHandler )
{
this.aAnimationsEndHandler = aHandler;
};

EventMultiplexer.prototype.notifyAnimationsEndEvent = function()
{
if( this.aAnimationsEndHandler )
this.aAnimationsEndHandler();
};

EventMultiplexer.prototype.registerNextEffectEndHandler = function( aHandler )
{
this.aSkipEffectEndHandlerSet.push( aHandler );
};

EventMultiplexer.prototype.notifyNextEffectEndEvent = function()
{
var nSize = this.aSkipEffectEndHandlerSet.length;
for( var i = 0; i < nSize; ++i )
{
(this.aSkipEffectEndHandlerSet[i])();
}
this.aSkipEffectEndHandlerSet = [];
};

EventMultiplexer.prototype.registerSkipEffectEvent = function( aEvent )
{
this.aSkipEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifySkipEffectEvent = function()
{
if( this.aSkipEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aSkipEffectEvent );
this.aSkipEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindCurrentEffectEvent = function( aEvent )
{
this.aRewindCurrentEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindCurrentEffectEvent = function()
{
if( this.aRewindCurrentEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindCurrentEffectEvent );
this.aRewindCurrentEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindLastEffectEvent = function( aEvent )
{
this.aRewindLastEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindLastEffectEvent = function()
{
if( this.aRewindLastEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindLastEffectEvent );
this.aRewindLastEffectEvent = null;
}
};

EventMultiplexer.prototype.registerSkipInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aSkipInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifySkipInteractiveEffectEvent = function( nNotifierId )
{
if( this.aSkipInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aSkipInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindRunningInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindRunningInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindEndedInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindEndedInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindedEffectHandler = function( aNotifierId, aHandler )
{
this.aRewindedEffectHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyRewindedEffectEvent = function( aNotifierId )
{
if( this.aRewindedEffectHandlerSet[ aNotifierId ] )
{
(this.aRewindedEffectHandlerSet[ aNotifierId ])();
}
};

EventMultiplexer.prototype.registerElementChangedHandler = function( aNotifierId, aHandler )
{
this.aElementChangedHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyElementChangedEvent = function( aNotifierId, aElement )
{
if( this.aElementChangedHandlerSet[ aNotifierId ] )
{
(this.aElementChangedHandlerSet[ aNotifierId ])( aElement );
}
};

EventMultiplexer.DEBUG = aEventMultiplexerDebugPrinter.isEnabled();

EventMultiplexer.prototype.DBG = function( sMethodName, eEventType, aNotifierId, nTime )
{
if( EventMultiplexer.DEBUG )
{
var sInfo = 'EventMultiplexer.' + sMethodName;
sInfo += '( type: ' + aEventTriggerOutMap[ eEventType ];
sInfo += ', notifier: ' + aNotifierId + ' )';
aEventMultiplexerDebugPrinter.print( sInfo, nTime );
}
};


var aInterpolatorHandler = {};

aInterpolatorHandler.getInterpolator = function( eCalcMode, eValueType, eValueSubtype )
{
var bHasSubtype = ( typeof( eValueSubtype ) === typeof( 0 ) );

if( !bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ];
}
else if( bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ];
}
else
{
log( 'aInterpolatorHandler.getInterpolator: not found any valid interpolator for calc mode '
+ aCalcModeOutMap[eCalcMode]  + ' and value type ' + aValueTypeOutMap[eValueType]  );
return null;
}
};

aInterpolatorHandler.aLerpFunctorMap = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_DISCRETE ] = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ] = [];


aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ NUMBER_PROPERTY ] =
function ( nFrom, nTo, nT )
{
return ( ( 1.0 - nT )* nFrom + nT * nTo );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ] = [];

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_RGB ] =
function ( nFrom, nTo, nT )
{
return RGBColor.interpolate( nFrom, nTo, nT );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_HSL ] =
function ( bCCW  )
{
return  function ( nFrom, nTo, nT )
{
return HSLColor.interpolate( nFrom, nTo, nT, bCCW );
};
};


function KeyStopLerp( aValueList )
{
KeyStopLerp.validateInput( aValueList );

this.aKeyStopList = [];
this.nLastIndex = 0;
this.nKeyStopDistance = aValueList[1] - aValueList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

for( var i = 0; i < aValueList.length; ++i )
this.aKeyStopList.push( aValueList[i] );

this.nUpperBoundIndex = this.aKeyStopList.length - 2;
}


KeyStopLerp.validateInput = function( aValueList )
{
var nSize = aValueList.length;
assert( nSize > 1, 'KeyStopLerp.validateInput: key stop vector must have two entries or more' );

for( var i = 1; i < nSize; ++i )
{
if( aValueList[i-1] > aValueList[i] )
log( 'KeyStopLerp.validateInput: time vector is not sorted in ascending order!' );
}
};

KeyStopLerp.prototype.reset = function()
{
KeyStopLerp.validateInput( this.aKeyStopList );
this.nLastIndex = 0;
this.nKeyStopDistance = this.aKeyStopList[1] - this.aKeyStopList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

};

KeyStopLerp.prototype.lerp = function( nAlpha )
{
if( nAlpha > this.aKeyStopList[ this.nLastIndex + 1 ] )
{
do
{
var nIndex = this.nLastIndex + 1;
this.nLastIndex = clamp( nIndex, 0, this.nUpperBoundIndex );
this.nKeyStopDistance = this.aKeyStopList[ this.nLastIndex + 1 ] - this.aKeyStopList[ this.nLastIndex ];
}
while( ( this.nKeyStopDistance <= 0 ) && ( this.nLastIndex < this.nUpperBoundIndex ) );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) / this.nKeyStopDistance;

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};

KeyStopLerp.prototype.lerp_ported = function( nAlpha )
{
if( ( this.aKeyStopList[ this.nLastIndex ] < nAlpha ) ||
( this.aKeyStopList[ this.nLastIndex + 1 ] >= nAlpha ) )
{
var i = 0;
for( ; i < this.aKeyStopList.length; ++i )
{
if( this.aKeyStopList[i] >= nAlpha )
break;
}
if( this.aKeyStopList[i] > nAlpha )
--i;
var nIndex = i - 1;
this.nLastIndex = clamp( nIndex, 0, this.aKeyStopList.length - 2 );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) /
( this.aKeyStopList[ this.nLastIndex+1 ] - this.aKeyStopList[ this.nLastIndex ] );

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};


var aOperatorSetMap = [];

aOperatorSetMap[ NUMBER_PROPERTY ] = {};

aOperatorSetMap[ NUMBER_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].add = function( a, b )
{
return ( a + b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].scale = function( k, v )
{
return ( k * v );
};

aOperatorSetMap[ COLOR_PROPERTY ] = {};

aOperatorSetMap[ COLOR_PROPERTY ].equal = function( a, b )
{
return a.equal( b );
};

aOperatorSetMap[ COLOR_PROPERTY ].add = function( a, b )
{
var c = a.clone();
c.add( b );
return c;
};

aOperatorSetMap[ COLOR_PROPERTY ].scale = function( k, v )
{
var r = v.clone();
r.scale( k );
return r;
};

aOperatorSetMap[ ENUM_PROPERTY ] = {};

aOperatorSetMap[ ENUM_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ ENUM_PROPERTY ].add = function( a )
{
return a;
};

aOperatorSetMap[ ENUM_PROPERTY ].scale = function( k, v )
{
return v;
};

aOperatorSetMap[ STRING_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];

aOperatorSetMap[ BOOL_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];


function ActivityParamSet()
{
this.aEndEvent = null;
this.aWakeupEvent = null;
this.aTimerEventQueue = null;
this.aActivityQueue = null;
this.nMinDuration = undefined;
this.nMinNumberOfFrames = MINIMUM_FRAMES_PER_SECONDS;
this.bAutoReverse = false;
this.nRepeatCount = 1.0;
this.nAccelerationFraction = 0.0;
this.nDecelerationFraction = 0.0;
this.nSlideWidth = undefined;
this.nSlideHeight = undefined;
this.aFormula = null;
this.aDiscreteTimes = [];
}


function AnimationActivity()
{
this.nId = AnimationActivity.getUniqueId();
}


AnimationActivity.CURR_UNIQUE_ID = 0;

AnimationActivity.getUniqueId = function()
{
++AnimationActivity.CURR_UNIQUE_ID;
return AnimationActivity.CURR_UNIQUE_ID;
};

AnimationActivity.prototype.getId = function()
{
return this.nId;
};


function SetActivity( aCommonParamSet, aAnimation, aToAttr  )
{
SetActivity.superclass.constructor.call( this );

this.aAnimation = aAnimation;
this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.aToAttr = aToAttr;
this.bIsActive = true;
}
extend( SetActivity, AnimationActivity );


SetActivity.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bIsActive = true;
};

SetActivity.prototype.dispose = function()
{
this.bIsActive = false;
if( this.aEndEvent && this.aEndEvent.isCharged() )
this.aEndEvent.dispose();
};

SetActivity.prototype.calcTimeLag = function()
{
return 0.0;
};

SetActivity.prototype.perform = function()
{
if( !this.isActive() )
return false;

this.bIsActive = false;

if( this.aAnimation && this.aTargetElement )
{
this.aAnimation.start( this.aTargetElement );
this.aAnimation.perform( this.aToAttr );
this.aAnimation.end();
}

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

};

SetActivity.prototype.isActive = function()
{
return this.bIsActive;
};

SetActivity.prototype.dequeued = function()
{
};

SetActivity.prototype.end = function()
{
this.perform();
};

SetActivity.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'SetActivity.setTargets: target element is not valid' );
this.aTargetElement = aTargetElement;
};


function ActivityBase( aCommonParamSet )
{
ActivityBase.superclass.constructor.call( this );

this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.nRepeats = aCommonParamSet.nRepeatCount;
this.nAccelerationFraction = aCommonParamSet.nAccelerationFraction;
this.nDecelerationFraction = aCommonParamSet.nDecelerationFraction;
this.bAutoReverse = aCommonParamSet.bAutoReverse;

this.bFirstPerformCall = true;
this.bIsActive = true;

}
extend( ActivityBase, AnimationActivity );


ActivityBase.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bFirstPerformCall = true;
this.bIsActive = true;
};

ActivityBase.prototype.dispose = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aEndEvent.dispose();

this.aEndEvent = null;
};

ActivityBase.prototype.perform = function()
{
if( !this.isActive() )
return false; // no, early exit.

assert( !this.bFirstPerformCall, 'ActivityBase.perform: assertion (!this.FirstPerformCall) failed' );

return true;
};

ActivityBase.prototype.calcTimeLag = function()
{
if( this.isActive() && this.bFirstPerformCall )
{
this.bFirstPerformCall = false;

this.startAnimation();
}
return 0.0;
};

ActivityBase.prototype.isActive = function()
{
return this.bIsActive;
};

ActivityBase.prototype.isDisposed = function()
{
return ( !this.bIsActive && !this.aEndEvent );
};

ActivityBase.prototype.dequeued = function()
{
if( !this.isActive() )
this.endAnimation();
};

ActivityBase.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'ActivityBase.setTargets: target element is not valid' );

this.aTargetElement = aTargetElement;
};

ActivityBase.prototype.startAnimation = function()
{
throw ( 'ActivityBase.startAnimation: abstract method invoked' );
};

ActivityBase.prototype.endAnimation = function()
{
throw ( 'ActivityBase.endAnimation: abstract method invoked' );
};

ActivityBase.prototype.endActivity = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

this.aEndEvent = null;

};

ActivityBase.prototype.calcAcceleratedTime = function( nT )
{


nT = clamp( nT, 0.0, 1.0 );

if( ( this.nAccelerationFraction > 0.0 || this.nDecelerationFraction > 0.0 ) &&
( this.nAccelerationFraction + this.nDecelerationFraction <= 1.0 ) )
{
var nC = 1.0 - 0.5*this.nAccelerationFraction - 0.5*this.nDecelerationFraction;

var nTPrime = 0.0;

if( nT < this.nAccelerationFraction )
{
nTPrime += 0.5 * nT * nT / this.nAccelerationFraction; // partial first interval
}
else
{
nTPrime += 0.5 * this.nAccelerationFraction; // full first interval

if( nT <= ( 1.0 - this.nDecelerationFraction ) )
{
nTPrime += nT - this.nAccelerationFraction; // partial second interval
}
else
{
nTPrime += 1.0 - this.nAccelerationFraction - this.nDecelerationFraction; // full second interval

var nTRelative = nT - 1.0 + this.nDecelerationFraction;

nTPrime += nTRelative - 0.5*nTRelative*nTRelative / this.nDecelerationFraction;
}
}

nT = nTPrime / nC;

}
return nT;
};

ActivityBase.prototype.getEventQueue = function()
{
return this.aTimerEventQueue;
};

ActivityBase.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

ActivityBase.prototype.isRepeatCountValid = function()
{
return !!this.nRepeats; // first ! convert to bool
};

ActivityBase.prototype.getRepeatCount = function()
{
return this.nRepeats;
};

ActivityBase.prototype.isAutoReverse = function()
{
return this.bAutoReverse;
};

ActivityBase.prototype.end = function()
{
if( !this.isActive() || this.isDisposed() )
return;

if( this.bFirstPerformCall )
{
this.bFirstPerformCall = false;
this.startAnimation();
}

this.performEnd();
this.endAnimation();
this.endActivity();
};

ActivityBase.prototype.performEnd = function()
{
throw ( 'ActivityBase.performEnd: abstract method invoked' );
};


function DiscreteActivityBase( aCommonParamSet )
{
DiscreteActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aOriginalWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aOriginalWakeupEvent.setActivity( this );
this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aDiscreteTimes = aCommonParamSet.aDiscreteTimes;
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nCurrPerformCalls = 0;
}
extend( DiscreteActivityBase, ActivityBase );


DiscreteActivityBase.prototype.activate = function( aEndElement )
{
DiscreteActivityBase.superclass.activate.call( this, aEndElement );

this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent.setNextTimeout( 0 );
this.nCurrPerformCalls = 0;
};

DiscreteActivityBase.prototype.startAnimation = function()
{
this.aWakeupEvent.start();
};

DiscreteActivityBase.prototype.calcFrameIndex = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
var nFrameIndex = nCurrCalls % (2 * nVectorSize);

if( nFrameIndex >= nVectorSize )
nFrameIndex = 2*nVectorSize - nFrameIndex; // invert sweep

return nFrameIndex;
}
else
{
return nCurrCalls % nVectorSize;
}
};

DiscreteActivityBase.prototype.calcRepeatCount = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
return Math.floor( nCurrCalls / (2*nVectorSize) ); // we've got 2 cycles per repeat
}
else
{
return Math.floor( nCurrCalls / nVectorSize );
}
};

DiscreteActivityBase.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
throw ( 'DiscreteActivityBase.performDiscreteHook: abstract method invoked' );
};

DiscreteActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nVectorSize = this.aDiscreteTimes.length;

var nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
this.performDiscreteHook( nFrameIndex, nRepeatCount );

++this.nCurrPerformCalls;

var nCurrRepeat = this.nCurrPerformCalls / nVectorSize;

if( this.isAutoReverse() )
nCurrRepeat /= 2;

if( !this.isRepeatCountValid() || nCurrRepeat < this.getRepeatCount() )
{


nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nCurrentRepeatTime = this.aDiscreteTimes[nFrameIndex];
nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
var nNextTimeout = this.nMinSimpleDuration * ( nRepeatCount + this.calcAcceleratedTime( nCurrentRepeatTime ) );
this.aWakeupEvent.setNextTimeout( nNextTimeout );

this.getEventQueue().addEvent( this.aWakeupEvent );
}
else
{
this.aWakeupEvent = null;

this.endActivity();
}

return false; // remove from queue, will be added back by the wakeup event.
};

DiscreteActivityBase.prototype.dispose = function()
{
if( this.aWakeupEvent )
this.aWakeupEvent.dispose();

this.aWakeupEvent = null;

DiscreteActivityBase.superclass.dispose.call(this);
};


function SimpleContinuousActivityBase( aCommonParamSet )
{
SimpleContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aTimer = new ElapsedTime( aCommonParamSet.aActivityQueue.getTimer() );
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nMinNumberOfFrames = aCommonParamSet.nMinNumberOfFrames;
this.nCurrPerformCalls = 0;

}
extend( SimpleContinuousActivityBase, ActivityBase );


SimpleContinuousActivityBase.prototype.startAnimation = function()
{
this.aTimer.reset();
};

SimpleContinuousActivityBase.prototype.calcTimeLag = function()
{
SimpleContinuousActivityBase.superclass.calcTimeLag.call( this );

if( !this.isActive() )
return 0.0;

var nCurrElapsedTime = this.aTimer.getElapsedTime();


var nFractionElapsedTime = nCurrElapsedTime / this.nMinSimpleDuration;

var nFractionRequiredCalls = this.nCurrPerformCalls / this.nMinNumberOfFrames;


if( nFractionElapsedTime < nFractionRequiredCalls )
{
return 0.0;
}
else
{
return ( ( nFractionElapsedTime - nFractionRequiredCalls ) * this.nMinSimpleDuration );
}
};

SimpleContinuousActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nCurrElapsedTime = this.aTimer.getElapsedTime();
var nT = nCurrElapsedTime / this.nMinSimpleDuration;


var bActivityEnding = false;

if( this.isRepeatCountValid() )
{

var nRepeatCount = this.getRepeatCount();
var nEffectiveRepeat = this.isAutoReverse() ? 2.0 * nRepeatCount : nRepeatCount;

if( nEffectiveRepeat <= nT )
{
bActivityEnding = true;

nT = nEffectiveRepeat;
}
}


var nRepeats;
var nRelativeSimpleTime;
if( this.isAutoReverse() )
{
nRepeats = Math.floor( nT );
var nFractionalActiveDuration =  nT - nRepeats;

if( nRepeats % 2 )
{
nRelativeSimpleTime = 1.0 - nFractionalActiveDuration;
}
else
{
nRelativeSimpleTime = nFractionalActiveDuration;
}

nRepeats /= 2;
}
else
{

nRepeats = Math.floor( nT );
nRelativeSimpleTime = nT - nRepeats;

if( this.isRepeatCountValid() && ( nRepeats >= this.getRepeatCount() ) )
{

nRelativeSimpleTime = 1.0;
nRepeats -= 1.0;
}
}


this.simplePerform( nRelativeSimpleTime, nRepeats );

if( bActivityEnding )
this.endActivity();

++this.nCurrPerformCalls;

return this.isActive();
};

SimpleContinuousActivityBase.prototype.simplePerform = function( /*nSimpleTime, nRepeatCount*/ )
{
throw ( 'SimpleContinuousActivityBase.simplePerform: abstract method invoked' );
};


function ContinuousKeyTimeActivityBase( aCommonParamSet )
{
var nSize = aCommonParamSet.aDiscreteTimes.length;
assert( nSize > 1,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.length > 1) failed' );

assert( aCommonParamSet.aDiscreteTimes[0] == 0.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.front() == 0.0) failed' );

assert( aCommonParamSet.aDiscreteTimes[ nSize - 1 ] <= 1.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.back() <= 1.0) failed' );

ContinuousKeyTimeActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aLerper = new KeyStopLerp( aCommonParamSet.aDiscreteTimes );
}
extend( ContinuousKeyTimeActivityBase, SimpleContinuousActivityBase );


ContinuousKeyTimeActivityBase.prototype.activate = function( aEndElement )
{
ContinuousKeyTimeActivityBase.superclass.activate.call( this, aEndElement );

this.aLerper.reset();
};

ContinuousKeyTimeActivityBase.prototype.performContinuousHook = function( /*nIndex, nFractionalIndex, nRepeatCount*/ )
{
throw ( 'ContinuousKeyTimeActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousKeyTimeActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
var nAlpha = this.calcAcceleratedTime( nSimpleTime );

var aLerpResult = this.aLerper.lerp( nAlpha );

this.performContinuousHook( aLerpResult.nIndex, aLerpResult.nLerp, nRepeatCount );
};


function ContinuousActivityBase( aCommonParamSet )
{
ContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

}
extend( ContinuousActivityBase, SimpleContinuousActivityBase );


ContinuousActivityBase.prototype.performContinuousHook = function( /*nModifiedTime, nRepeatCount*/ )
{
throw ( 'ContinuousActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
this.performContinuousHook( this.calcAcceleratedTime( nSimpleTime ), nRepeatCount );
};


function SimpleActivity( aCommonParamSet, aNumberAnimation, eDirection )
{
assert( ( eDirection == BACKWARD ) || ( eDirection == FORWARD ),
'SimpleActivity constructor: animation direction is not valid' );

assert( aNumberAnimation, 'SimpleActivity constructor: animation object is not valid' );

SimpleActivity.superclass.constructor.call( this, aCommonParamSet );

this.aAnimation = aNumberAnimation;
this.nDirection = ( eDirection == FORWARD ) ? 1.0 : 0.0;
}
extend( SimpleActivity, ContinuousActivityBase );


SimpleActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation )
return;

ANIMDBG.print( 'SimpleActivity.startAnimation invoked' );
SimpleActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

SimpleActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();

};

SimpleActivity.prototype.performContinuousHook = function( nModifiedTime /*, nRepeatCount*/ )
{

if( this.isDisposed() || !this.aAnimation )
return;

var nT = 1.0 - this.nDirection + nModifiedTime * ( 2.0*this.nDirection - 1.0 );
this.aAnimation.perform( nT );
};

SimpleActivity.prototype.performEnd = function()
{
if( this.aAnimation )
this.aAnimation.perform( this.nDirection );
};


function FromToByActivityTemplate( BaseType ) // template parameter
{

function FromToByActivity( aFromValue, aToValue, aByValue,
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate )
{
assert( aAnimation, 'FromToByActivity constructor: invalid animation object' );
assert( ( aToValue != undefined ) || ( aByValue != undefined ),
'FromToByActivity constructor: one of aToValue or aByValue must be valid' );

FromToByActivity.superclass.constructor.call( this, aActivityParamSet );

this.aFrom = aFromValue;
this.aTo = aToValue;
this.aBy = aByValue;
this.aStartValue = null;
this.aEndValue = null;
this.aPreviousValue = null;
this.aStartInterpolationValue = null;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.equal = aOperatorSet.equal;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bDynamicStartValue = false;
this.nIteration = 0;
this.bCumulative = bAccumulate;
this.aFormula = aActivityParamSet.aFormula;
}
extend( FromToByActivity, BaseType );

FromToByActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation && this.aFrom )
{
var aValue = this.aFormula ? this.aFormula( this.aFrom ) : this.aFrom;
this.aAnimation.perform(aValue);
}
};

FromToByActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.startAnimation: activity disposed or not valid animation' );
return;
}

FromToByActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );


var aAnimationStartValue = this.aAnimation.getUnderlyingValue();

if( this.aFrom )
{
if( this.aTo )
{
this.aStartValue = this.aFrom;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = this.aFrom;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}
else
{
this.aStartValue = aAnimationStartValue;
this.aStartInterpolationValue = this.aStartValue;

if( this.aTo )
{

this.bDynamicStartValue = true;
this.aPreviousValue = this.aStartValue;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = aAnimationStartValue;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}

ANIMDBG.print( 'FromToByActivity.startAnimation: aStartValue = ' + this.aStartValue + ', aEndValue = ' + this.aEndValue );
};

FromToByActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

FromToByActivity.prototype.performContinuousHook = function( nModifiedTime, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}


if( this.bDynamicStartValue )
{
if( this.nIteration != nRepeatCount )
{
this.nIteration = nRepeatCount;
this.aStartInterpolationValue =  this.aStartValue;
}
else
{
var aActualValue = this.aAnimation.getUnderlyingValue();
if( !this.equal( aActualValue, this.aPreviousValue ) )
this.aStartInterpolationValue = aActualValue;
}
}

var aValue = this.aInterpolator( this.aStartInterpolationValue,
this.aEndValue, nModifiedTime );

if( this.bCumulative && !this.bDynamicStartValue )
{
aValue = this.add( this.scale( nRepeatCount, this.aEndValue ), aValue );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );

if( this.bDynamicStartValue )
{
this.aPreviousValue = this.aAnimation.getUnderlyingValue();
}

};

FromToByActivity.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
if (this.isDisposed() || !this.aAnimation) {
log('FromToByActivity.performDiscreteHook: activity disposed or not valid animation');
return;
}
};

FromToByActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.isAutoReverse() ? this.aStartValue : this.aEndValue;
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
}
};

FromToByActivity.prototype.dispose = function()
{
FromToByActivity.superclass.dispose.call( this );
};


return FromToByActivity;
}


var LinearFromToByActivity = instantiate( FromToByActivityTemplate, ContinuousActivityBase );
var DiscreteFromToByActivity = instantiate( FromToByActivityTemplate, DiscreteActivityBase );


function  ValueListActivityTemplate( BaseType ) // template parameter
{

function ValueListActivity( aValueList, aActivityParamSet,
aAnimation, aInterpolator,
aOperatorSet, bAccumulate )
{
assert( aAnimation, 'ValueListActivity constructor: invalid animation object' );
assert( aValueList.length != 0, 'ValueListActivity: value list is empty' );

ValueListActivity.superclass.constructor.call( this, aActivityParamSet );

this.aValueList = aValueList;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bCumulative = bAccumulate;
this.aLastValue = this.aValueList[ this.aValueList.length - 1 ];
this.aFormula = aActivityParamSet.aFormula;
}
extend( ValueListActivity, BaseType );

ValueListActivity.prototype.activate = function( aEndEvent )
{
ValueListActivity.superclass.activate.call( this, aEndEvent );
for( var i = 0; i < this.aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + this.aValueList[i] );
}
};

ValueListActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation )
{
var aValue = this.aValueList[0];
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform(aValue);
}
};

ValueListActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.startAnimation: activity disposed or not valid animation' );
return;
}

ValueListActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

ValueListActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

ValueListActivity.prototype.performContinuousHook = function( nIndex, nFractionalIndex, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}

assert( ( nIndex + 1 ) < this.aValueList.length,
'ValueListActivity.performContinuousHook: assertion (nIndex + 1 < this.aValueList.length) failed' );


var aValue = this.aInterpolator( this.aValueList[ nIndex ],
this.aValueList[ nIndex+1 ],
nFractionalIndex );

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performDiscreteHook = function( nFrame, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performDiscreteHook: activity disposed or not valid animation' );
return;
}

assert( nFrame < this.aValueList.length,
'ValueListActivity.performDiscreteHook: assertion ( nFrame < this.aValueList.length) failed' );

var aValue = this.aValueList[nFrame];

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.aFormula ? this.aFormula( this.aLastValue ) : this.aLastValue;
this.aAnimation.perform( aValue );
}
};

ValueListActivity.prototype.dispose = function()
{
ValueListActivity.superclass.dispose.call( this );
};


return ValueListActivity;
}


var LinearValueListActivity = instantiate( ValueListActivityTemplate, ContinuousKeyTimeActivityBase );
var DiscreteValueListActivity = instantiate( ValueListActivityTemplate, DiscreteActivityBase );


function createActivity( aActivityParamSet, aAnimationNode, aAnimation, aInterpolator )
{
var eCalcMode = aAnimationNode.getCalcMode();

var sAttributeName = aAnimationNode.getAttributeName();
var aAttributeProp = aAttributeMap[ sAttributeName ];

var eValueType = aAttributeProp[ 'type' ];
var eValueSubtype = aAttributeProp[ 'subtype' ];

if( ! aInterpolator )
{
aInterpolator = aInterpolatorHandler.getInterpolator( eCalcMode,
eValueType,
eValueSubtype );
}

var bAccumulate = ( aAnimationNode.getAccumulate() === ACCUMULATE_MODE_SUM )
&& !( eValueType === BOOL_PROPERTY ||
eValueType === STRING_PROPERTY ||
eValueType === ENUM_PROPERTY );

if( aAnimationNode.getFormula() )
{
var sFormula =  aAnimationNode.getFormula();
var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;
sFormula = sFormula.replace(reMath, 'Math.$&');
sFormula = sFormula.replace(/pi(?!\w)/g, 'Math.PI');
sFormula = sFormula.replace(/e(?!\w)/g, 'Math.E');
sFormula = sFormula.replace(/\$/g, '__PARAM0__');

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aBBox = aAnimatedElement.getBaseBBox();

var width = aBBox.width / aActivityParamSet.nSlideWidth;
var height = aBBox.height / aActivityParamSet.nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / aActivityParamSet.nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / aActivityParamSet.nSlideHeight;

aActivityParamSet.aFormula = function( __PARAM0__ ) {

return eval(sFormula);
};
}

aActivityParamSet.aDiscreteTimes = aAnimationNode.getKeyTimes();

var aValueSet = aAnimationNode.getValues();
var nValueSetSize = aValueSet.length;

if( nValueSetSize != 0 )
{

if( aActivityParamSet.aDiscreteTimes.length == 0 )
{
for( var i = 0; i < nValueSetSize; ++i )
aActivityParamSet.aDiscreteTimes[i].push( i / nValueSetSize );
}

switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );

return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteValueListActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearValueListActivity,
bAccumulate,
eValueType );
}
}
else
{
switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
log( 'createActivity: discrete calculation case not yet implemented' );
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteFromToByActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearFromToByActivity,
bAccumulate,
eValueType );
}
}
}


function createValueListActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{
var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createValueListActivity: no operator set found' );

var aValueSet = aAnimationNode.getValues();

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

for( var i = 0; i < aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + aValueList[i] );
}

return new ClassTemplateInstance( aValueList, aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function createFromToByActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createFromToByActivity: no operator set found' );

var aValueSet = [];
aValueSet[0] = aAnimationNode.getFromValue();
aValueSet[1] = aAnimationNode.getToValue();
aValueSet[2] = aAnimationNode.getByValue();

ANIMDBG.print( 'createFromToByActivity: value type: ' + aValueTypeOutMap[eValueType] +
', aFrom = ' + aValueSet[0] +
', aTo = ' + aValueSet[1] +
', aBy = ' + aValueSet[2] );

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

ANIMDBG.print( 'createFromToByActivity: ' +
', aFrom = ' + aValueList[0] +
', aTo = ' + aValueList[1] +
', aBy = ' + aValueList[2] );

return new ClassTemplateInstance( aValueList[0], aValueList[1], aValueList[2],
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function extractAttributeValues( eValueType, aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var i;
switch( eValueType )
{
case NUMBER_PROPERTY :
evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight );
break;
case BOOL_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
var aValue = booleanParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
case STRING_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case ENUM_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case COLOR_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValue = colorParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
default:
log( 'createValueListActivity: unexpected value type: ' + eValueType );
}

}


function evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var width = aBBox.width / nSlideWidth;
var height = aBBox.height / nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / nSlideHeight;

var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;

for( var i = 0; i < aValueSet.length; ++i )
{
var sValue = aValueSet[i];
sValue = sValue.replace(reMath, 'Math.$&');
sValue = sValue.replace(/pi(?!\w)/g, 'Math.PI');
sValue = sValue.replace(/e(?!\w)/g, 'Math.E');
var aValue =  eval( sValue );
aValueList.push( aValue );
}
}


var BACKWARD    = 0;
var FORWARD     = 1;

var MAXIMUM_FRAME_COUNT                 = 60;
var MINIMUM_TIMEOUT                     = 1.0 / MAXIMUM_FRAME_COUNT;
var MAXIMUM_TIMEOUT                     = 4.0;
var MINIMUM_FRAMES_PER_SECONDS          = 10;
var PREFERRED_FRAMES_PER_SECONDS        = 50;
var PREFERRED_FRAME_RATE                = 1.0 / PREFERRED_FRAMES_PER_SECONDS;


function Effect( nId )
{
this.nId = ( typeof( nId ) === typeof( 1 ) ) ? nId : -1;
this.eState = Effect.NOT_STARTED;
}
Effect.NOT_STARTED = 0;
Effect.PLAYING = 1;
Effect.ENDED = 2;

Effect.prototype.getId = function()
{
return this.nId;
};

Effect.prototype.isMainEffect = function()
{
return ( this.nId === -1 );
};

Effect.prototype.isPlaying = function()
{
return ( this.eState === Effect.PLAYING );
};

Effect.prototype.isEnded = function()
{
return ( this.eState === Effect.ENDED );
};

Effect.prototype.start = function()
{
assert( this.eState === Effect.NOT_STARTED, 'Effect.start: wrong state.' );
this.eState = Effect.PLAYING;
};

Effect.prototype.end = function()
{
assert( this.eState === Effect.PLAYING, 'Effect.end: wrong state.' );
this.eState = Effect.ENDED;
};


function SlideShow()
{
this.aTimer = new ElapsedTime();
this.aFrameSynchronization = new FrameSynchronization( PREFERRED_FRAME_RATE );
this.aTimerEventQueue = new TimerEventQueue( this.aTimer );
this.aActivityQueue = new ActivityQueue( this.aTimer );
this.aNextEffectEventArray = null;
this.aInteractiveAnimationSequenceMap = null;
this.aEventMultiplexer = null;

this.aContext = new SlideShowContext( this.aTimerEventQueue,
this.aEventMultiplexer,
this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aActivityQueue );
this.bIsIdle = true;
this.bIsEnabled = true;
this.bNoSlideTransition = false;
this.bIsTransitionRunning = false;

this.nCurrentEffect = 0;
this.bIsNextEffectRunning = false;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;
this.automaticAdvanceTimeout = null;
}

SlideShow.prototype.setSlideEvents = function( aNextEffectEventArray,
aInteractiveAnimationSequenceMap,
aEventMultiplexer )
{
if( !aNextEffectEventArray )
log( 'SlideShow.setSlideEvents: aNextEffectEventArray is not valid' );

if( !aInteractiveAnimationSequenceMap )
log( 'SlideShow.setSlideEvents:aInteractiveAnimationSequenceMap  is not valid' );

if( !aEventMultiplexer )
log( 'SlideShow.setSlideEvents: aEventMultiplexer is not valid' );

this.aContext.aNextEffectEventArray = aNextEffectEventArray;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aContext.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aContext.aEventMultiplexer = aEventMultiplexer;
this.aEventMultiplexer = aEventMultiplexer;
this.nCurrentEffect = 0;
};

SlideShow.prototype.createSlideTransition = function( aSlideTransitionHandler, aLeavingSlide, aEnteringSlide, aTransitionEndEvent )
{
if( !aEnteringSlide )
{
log( 'SlideShow.createSlideTransition: entering slide element is not valid.' );
return null;
}

if( this.bNoSlideTransition ) return null;

var aAnimatedLeavingSlide = null;
if( aLeavingSlide )
aAnimatedLeavingSlide = new AnimatedSlide( aLeavingSlide );
var aAnimatedEnteringSlide = new AnimatedSlide( aEnteringSlide );

var aSlideTransition = aSlideTransitionHandler.createSlideTransition( aAnimatedLeavingSlide, aAnimatedEnteringSlide );
if( !aSlideTransition ) return null;

var nDuration = 0.001;
if( aSlideTransitionHandler.getDuration().isValue() )
{
nDuration = aSlideTransitionHandler.getDuration().getValue();
}
else
{
log( 'SlideShow.createSlideTransition: duration is not a number' );
}

var aCommonParameterSet = new ActivityParamSet();
aCommonParameterSet.aEndEvent = aTransitionEndEvent;
aCommonParameterSet.aTimerEventQueue = this.aTimerEventQueue;
aCommonParameterSet.aActivityQueue = this.aActivityQueue;
aCommonParameterSet.nMinDuration = nDuration;
aCommonParameterSet.nMinNumberOfFrames = aSlideTransitionHandler.getMinFrameCount();
aCommonParameterSet.nSlideWidth = WIDTH;
aCommonParameterSet.nSlideHeight = HEIGHT;

return new SimpleActivity( aCommonParameterSet, aSlideTransition, FORWARD );

};

SlideShow.prototype.isEnabled = function()
{
return this.bIsEnabled;
};

SlideShow.prototype.isRunning = function()
{
return !this.bIsIdle;
};

SlideShow.prototype.isTransitionPlaying = function()
{
return this.bIsTransitionRunning;
};

SlideShow.prototype.isMainEffectPlaying = function()
{
return this.bIsNextEffectRunning;
};

SlideShow.prototype.isInteractiveEffectPlaying = function()
{
return ( this.nTotalInteractivePlayingEffects > 0 );
};

SlideShow.prototype.isAnyEffectPlaying = function()
{
return ( this.isMainEffectPlaying() || this.isInteractiveEffectPlaying() );
};

SlideShow.prototype.hasAnyEffectStarted = function()
{
return ( this.aStartedEffectList.length > 0 );
};

SlideShow.prototype.notifyNextEffectStart = function()
{
assert( !this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectStart: an effect is already started.' );
this.bIsNextEffectRunning = true;
this.aEventMultiplexer.registerNextEffectEndHandler( bind2( SlideShow.prototype.notifyNextEffectEnd, this ) );
var aEffect = new Effect();
aEffect.start();
this.aStartedEffectIndexMap[ -1 ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );

var aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler.aAnimatedElementMap;
for( var sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifyNextEffectStart( this.nCurrentEffect );
};

SlideShow.prototype.notifyNextEffectEnd = function()
{
assert( this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectEnd: effect already ended.' );
this.bIsNextEffectRunning = false;

this.aStartedEffectList[ this.aStartedEffectIndexMap[ -1 ] ].end();
if( this.automaticAdvanceTimeout !== null )
{
if( this.automaticAdvanceTimeout['rewindedEffect'] === this.nCurrentEffect )
{
this.automaticAdvanceTimeout = null;
this.notifyAnimationsEnd();
}
}
};

SlideShow.prototype.notifyAnimationsEnd = function()
{
if( nCurSlide + 1 === theMetaDoc.nNumberOfSlides )
return;

assert (this.automaticAdvanceTimeout === null,
'SlideShow.notifyAnimationsEnd: Timeout already set.')

var nTimeout = Math.ceil(theMetaDoc.aMetaSlideSet[nCurSlide].fDuration * 1000);
if( nTimeout < 0 )
return;

this.automaticAdvanceTimeout = window.setTimeout('switchSlide(1, false)', nTimeout);
};

SlideShow.prototype.notifySlideStart = function( nNewSlideIndex, nOldSlideIndex )
{
this.nCurrentEffect = 0;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;

var aAnimatedElementMap;
var sId;
if( nOldSlideIndex !== undefined )
{
aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nOldSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideEnd();
}

aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nNewSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideStart( this.aContext );
};

SlideShow.prototype.notifyTransitionEnd = function( nSlideIndex )
{
if( theMetaDoc.getCurrentSlide() )
{
var sRef = 'url(#' + aPresentationClipPathId + ')';
theMetaDoc.getCurrentSlide().slideElement.setAttribute('clip-path', sRef);
}

this.bIsTransitionRunning = false;
if( this.bIsRewinding )
{
theMetaDoc.aMetaSlideSet[nSlideIndex].hide();
var nIndex = nCurSlide !== undefined ? nCurSlide : -1;
this.displaySlide( nIndex, true );
this.skipAllEffects();
this.bIsRewinding = false;
return;
}

theMetaDoc.setCurrentSlide(nSlideIndex);

if( this.aSlideViewElement )
{
theMetaDoc.getCurrentSlide().aVisibilityStatusElement.parentNode.removeChild( this.aSlideViewElement );
this.aSlideViewElement = null;
}
if( this.isEnabled() )
{
this.dispose();

var aCurrentSlide = theMetaDoc.getCurrentSlide();
if( aCurrentSlide.aSlideAnimationsHandler.elementsParsed() )
{
aCurrentSlide.aSlideAnimationsHandler.start();
this.aEventMultiplexer.registerAnimationsEndHandler( bind2( SlideShow.prototype.notifyAnimationsEnd, this ) );
}
else
this.notifyAnimationsEnd();

this.update();
}
else
this.notifyAnimationsEnd();
};

SlideShow.prototype.notifyInteractiveAnimationSequenceStart = function( nNodeId )
{
++this.nTotalInteractivePlayingEffects;
var aEffect = new Effect( nNodeId );
aEffect.start();
this.aStartedEffectIndexMap[ nNodeId ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );
};

SlideShow.prototype.notifyInteractiveAnimationSequenceEnd = function( nNodeId )
{
assert( this.isInteractiveEffectPlaying(),
'SlideShow.notifyInteractiveAnimationSequenceEnd: no interactive effect playing.' );

this.aStartedEffectList[ this.aStartedEffectIndexMap[ nNodeId ] ].end();
--this.nTotalInteractivePlayingEffects;
};

SlideShow.prototype.nextEffect = function()
{
if( !this.isEnabled() )
return false;

if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
return true;
}

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
++this.nCurrentEffect;
this.update();
return true;
};

SlideShow.prototype.skipTransition  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsSkipping = true;

this.aActivityQueue.endAll();
this.aTimerEventQueue.forceEmpty();
this.aActivityQueue.endAll();
this.update();
this.bIsSkipping = false;
};

SlideShow.prototype.skipAllPlayingEffects  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

this.bIsSkipping = true;
for( var i = 0; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
this.aEventMultiplexer.notifySkipEffectEvent();
else
this.aEventMultiplexer.notifySkipInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipNextEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

assert( !this.isAnyEffectPlaying(),
'SlideShow.skipNextEffect' );

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.bIsSkipping = true;
this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
this.aEventMultiplexer.notifySkipEffectEvent();
++this.nCurrentEffect;
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipPlayingOrNextEffect = function()
{
if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
return this.skipAllPlayingEffects();
else
return this.skipNextEffect();
};


SlideShow.prototype.skipAllEffects = function()
{
if( this.bIsSkippingAll )
return true;

this.bIsSkippingAll = true;

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
}
else if( !this.aNextEffectEventArray
|| ( this.nCurrentEffect >= this.aNextEffectEventArray.size() ) )
{
this.bIsSkippingAll = false;
return false;
}

while( this.nCurrentEffect < this.aNextEffectEventArray.size() )
{
this.skipNextEffect();
}
this.bIsSkippingAll = false;
return true;
};

SlideShow.prototype.rewindTransition = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsRewinding = true;
this.aActivityQueue.endAll();
this.update();
this.bIsRewinding = false;
};

SlideShow.prototype.rewindEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

if( this.automaticAdvanceTimeout !== null && !this.automaticAdvanceTimeout['rewindedEffect'] )
{
window.clearTimeout( this.automaticAdvanceTimeout );
this.automaticAdvanceTimeout = { 'rewindedEffect': this.nCurrentEffect };
}

if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

this.bIsRewinding = true;

var nFirstPlayingEffectIndex = undefined;

var i = 0;
for( ; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
nFirstPlayingEffectIndex = i;
break;
}
}

if( nFirstPlayingEffectIndex !== undefined )
{
i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindCurrentEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindRunningInteractiveEffectEvent( aEffect.getId() );
}
}
else if( aEffect.isEnded() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
}
this.update();

i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
}
}
else  // there is no playing effect
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
if( aEffect.isEnded() )  // Well that is almost an assertion.
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
}

this.bIsRewinding = false;
};

SlideShow.prototype.rewindToPreviousSlide = function()
{
if( this.isTransitionPlaying() )
{
this.rewindTransition();
return;
}
if( this.isAnyEffectPlaying() )
return;
var nNewSlide = nCurSlide - 1;
this.displaySlide( nNewSlide, true );
this.skipAllEffects();
};

SlideShow.prototype.rewindAllEffects = function()
{
if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

while( this.hasAnyEffectStarted() )
{
this.rewindEffect();
}
};

SlideShow.prototype.exitSlideShowInApp = function()
{
if (window.webkit !== undefined &&
window.webkit.messageHandlers !== undefined &&
window.webkit.messageHandlers.lool !== undefined)
window.webkit.messageHandlers.lool.postMessage('EXITSLIDESHOW', '*');
}

SlideShow.prototype.displaySlide = function( nNewSlide, bSkipSlideTransition )
{
var aMetaDoc = theMetaDoc;
var nSlides = aMetaDoc.nNumberOfSlides;
if( nNewSlide < 0 && nSlides > 0 )
nNewSlide = nSlides - 1;
else if( nNewSlide >= nSlides ) {
nNewSlide = 0;
this.exitSlideShowInApp();
}

if( ( currentMode === INDEX_MODE ) && ( nNewSlide === nCurSlide ) )
{
aMetaDoc.getCurrentSlide().show();
return;
}

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

var nOldSlide = nCurSlide;
if( nOldSlide !== undefined )
{
var oldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
if( this.isEnabled() )
{
if( oldMetaSlide.aSlideAnimationsHandler.isAnimated() )
{
oldMetaSlide.aSlideAnimationsHandler.end( bSkipSlideTransition );

this.dispose();
}
}

if( this.automaticAdvanceTimeout !== null )
{
window.clearTimeout( this.automaticAdvanceTimeout );
this.automaticAdvanceTimeout = null;
}
}

this.notifySlideStart( nNewSlide, nOldSlide );

if( this.isEnabled() && !bSkipSlideTransition  )
{
if ( ( ( nOldSlide !== undefined ) &&
( ( nNewSlide > nOldSlide ) ||
( ( nNewSlide == 0) && ( nOldSlide == (aMetaDoc.nNumberOfSlides - 1) ) ) ) ) ||
(  ( nOldSlide === undefined ) &&  ( nNewSlide == 0) )  // for transition on first slide
)
{

var aOldMetaSlide = null;
if( nOldSlide === undefined ) // for transition on first slide
{
aOldMetaSlide = aMetaDoc.theMetaDummySlide;
}
else
{
aOldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
}
var aNewMetaSlide = aMetaDoc.aMetaSlideSet[nNewSlide];

var aSlideTransitionHandler = aNewMetaSlide.aTransitionHandler;
if( aSlideTransitionHandler && aSlideTransitionHandler.isValid() )
{
var sRef = 'url(#' + aPresentationClipPathShrinkId + ')';
aOldMetaSlide.slideElement.setAttribute( 'clip-path', sRef );

if( nOldSlide > nNewSlide )
{
this.aSlideViewElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', this.aSlideViewElement, 'href', '#' + aOldMetaSlide.slideContainerId );
aNewMetaSlide.aVisibilityStatusElement.parentNode.insertBefore( this.aSlideViewElement, aNewMetaSlide.aVisibilityStatusElement );
aOldMetaSlide.hide();
}

var aLeavingSlide = aOldMetaSlide;
var aEnteringSlide = aNewMetaSlide;
var aTransitionEndEvent = makeEvent( bind2( this.notifyTransitionEnd, this, nNewSlide ) );

var aTransitionActivity =
this.createSlideTransition( aSlideTransitionHandler, aLeavingSlide,
aEnteringSlide, aTransitionEndEvent );

if( aTransitionActivity )
{
this.bIsTransitionRunning = true;
this.aActivityQueue.addActivity( aTransitionActivity );
this.update();
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}

};

SlideShow.prototype.update = function()
{
this.aTimer.holdTimer();

this.aTimerEventQueue.process();
this.aActivityQueue.process();

this.aFrameSynchronization.synchronize();

this.aActivityQueue.processDequeued();

this.aTimer.releaseTimer();

var bActivitiesLeft = ( ! this.aActivityQueue.isEmpty() );
var bTimerEventsLeft = ( ! this.aTimerEventQueue.isEmpty() );
var bEventsLeft = ( bActivitiesLeft || bTimerEventsLeft );


if( bEventsLeft )
{
var nNextTimeout;
if( bActivitiesLeft )
{
nNextTimeout = MINIMUM_TIMEOUT;
this.aFrameSynchronization.activate();
}
else
{
nNextTimeout = this.aTimerEventQueue.nextTimeout();
if( nNextTimeout < MINIMUM_TIMEOUT )
nNextTimeout = MINIMUM_TIMEOUT;
else if( nNextTimeout > MAXIMUM_TIMEOUT )
nNextTimeout = MAXIMUM_TIMEOUT;
this.aFrameSynchronization.deactivate();
}

this.bIsIdle = false;
window.setTimeout( 'aSlideShow.update()', nNextTimeout * 1000 );
}
else
{
this.bIsIdle = true;
}
};

SlideShow.prototype.dispose = function()
{
this.aTimerEventQueue.clear();
this.aActivityQueue.clear();
this.aNextEffectEventArray = null;
this.aEventMultiplexer = null;
};

SlideShow.prototype.getContext = function()
{
return this.aContext;
};

var aSlideShow = null;


function SlideShowContext( aTimerEventQueue, aEventMultiplexer, aNextEffectEventArray, aInteractiveAnimationSequenceMap, aActivityQueue)
{
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMultiplexer = aEventMultiplexer;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aActivityQueue = aActivityQueue;
this.bIsSkipping = false;
}


function FrameSynchronization( nFrameDuration )
{
this.nFrameDuration = nFrameDuration;
this.aTimer = new ElapsedTime();
this.nNextFrameTargetTime = 0.0;
this.bIsActive = false;

this.markCurrentFrame();
}


FrameSynchronization.prototype.markCurrentFrame = function()
{
this.nNextFrameTargetTime = this.aTimer.getElapsedTime() + this.nFrameDuration;
};

FrameSynchronization.prototype.synchronize = function()
{
if( this.bIsActive )
{
while( this.aTimer.getElapsedTime() < this.nNextFrameTargetTime )
;
}

this.markCurrentFrame();

};

FrameSynchronization.prototype.activate = function()
{
this.bIsActive = true;
};

FrameSynchronization.prototype.deactivate = function()
{
this.bIsActive = false;
};


function NextEffectEventArray()
{
this.aEventArray = [];
}


NextEffectEventArray.prototype.size = function()
{
return this.aEventArray.length;
};

NextEffectEventArray.prototype.at = function( nIndex )
{
return this.aEventArray[ nIndex ];
};

NextEffectEventArray.prototype.appendEvent = function( aEvent )
{
var nSize = this.size();
for( var i = 0; i < nSize; ++i )
{
if( this.aEventArray[i].getId() == aEvent.getId() )
{
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') already present' );
return false;
}
}
this.aEventArray.push( aEvent );
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') appended' );
return true;
};

NextEffectEventArray.prototype.clear = function( )
{
this.aEventArray = [];
};


function TimerEventQueue( aTimer )
{
this.aTimer = aTimer;
this.aEventSet = new PriorityQueue( EventEntry.compare );
}


TimerEventQueue.prototype.addEvent = function( aEvent )
{
this.DBG( 'TimerEventQueue.addEvent event(' + aEvent.getId() + ') appended.' );
if( !aEvent )
{
log( 'TimerEventQueue.addEvent: null event' );
return false;
}

var nTime = aEvent.getActivationTime( this.aTimer.getElapsedTime() );
var aEventEntry = new EventEntry( aEvent, nTime );
this.aEventSet.push( aEventEntry );

return true;
};

TimerEventQueue.prototype.forceEmpty = function()
{
this.process_(true);
};


TimerEventQueue.prototype.process = function()
{
this.process_(false);
};

TimerEventQueue.prototype.process_ = function( bFireAllEvents )
{
var nCurrentTime = this.aTimer.getElapsedTime();

while( !this.isEmpty() && ( bFireAllEvents || ( this.aEventSet.top().nActivationTime <= nCurrentTime ) ) )
{
var aEventEntry = this.aEventSet.top();
this.aEventSet.pop();

var aEvent = aEventEntry.aEvent;
if( aEvent.isCharged() )
aEvent.fire();
}
};

TimerEventQueue.prototype.isEmpty = function()
{
return this.aEventSet.isEmpty();
};

TimerEventQueue.prototype.nextTimeout = function()
{
var nTimeout = Number.MAX_VALUE;
var nCurrentTime = this.aTimer.getElapsedTime();
if( !this.isEmpty() )
nTimeout = this.aEventSet.top().nActivationTime - nCurrentTime;
return nTimeout;
};

TimerEventQueue.prototype.clear = function()
{
this.DBG( 'TimerEventQueue.clear invoked' );
this.aEventSet.clear();
};

TimerEventQueue.prototype.getTimer = function()
{
return this.aTimer;
};

TimerEventQueue.prototype.DBG = function( sMessage, nTime )
{
aTimerEventQueueDebugPrinter.print( sMessage, nTime );
};


TimerEventQueue.prototype.insert = function( aEventEntry )
{
var nHoleIndex = this.aEventSet.length;
var nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );

while( ( nHoleIndex > 0 ) && this.aEventSet[ nParent ].compare( aEventEntry ) )
{
this.aEventSet[ nHoleIndex ] = this.aEventSet[ nParent ];
nHoleIndex = nParent;
nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );
}
this.aEventSet[ nHoleIndex ] = aEventEntry;
};


function EventEntry( aEvent, nTime )
{
this.aEvent = aEvent;
this.nActivationTime = nTime;
}


EventEntry.compare = function( aLhsEventEntry, aRhsEventEntry )
{
if ( aLhsEventEntry.nActivationTime > aRhsEventEntry.nActivationTime )
{
return -1;
}
else if ( aLhsEventEntry.nActivationTime < aRhsEventEntry.nActivationTime )
{
return 1;
}
else
{
return 0;
}
};


function ActivityQueue( aTimer )
{
this.aTimer = aTimer;
this.aCurrentActivityWaitingSet = [];
this.aCurrentActivityReinsertSet = [];
this.aDequeuedActivitySet = [];
}


ActivityQueue.prototype.dispose = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dispose();

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dispose();
};

ActivityQueue.prototype.addActivity = function( aActivity )
{
if( !aActivity )
{
log( 'ActivityQueue.addActivity: activity is not valid' );
return false;
}

this.aCurrentActivityWaitingSet.push( aActivity );
aActivityQueueDebugPrinter.print( 'ActivityQueue.addActivity: activity appended' );
return true;
};

ActivityQueue.prototype.process = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var nLag = 0.0;
for( var i = 0; i < nSize; ++i )
{
nLag = Math.max( nLag,this.aCurrentActivityWaitingSet[i].calcTimeLag()  );
}

if( nLag > 0.0 )
this.aTimer.adjustTimer( -nLag, true );


while( this.aCurrentActivityWaitingSet.length != 0 )
{
var aActivity = this.aCurrentActivityWaitingSet.shift();
var bReinsert = false;

bReinsert = aActivity.perform();

if( bReinsert )
{
this.aCurrentActivityReinsertSet.push( aActivity );
}
else
{
this.aDequeuedActivitySet.push( aActivity );
}
}

if( this.aCurrentActivityReinsertSet.length != 0 )
{
this.aCurrentActivityWaitingSet = this.aCurrentActivityReinsertSet;
this.aCurrentActivityReinsertSet = [];
}
};

ActivityQueue.prototype.processDequeued = function()
{
var nSize = this.aDequeuedActivitySet.length;
for( var i = 0; i < nSize; ++i )
this.aDequeuedActivitySet[i].dequeued();

this.aDequeuedActivitySet = [];
};

ActivityQueue.prototype.isEmpty = function()
{
return ( ( this.aCurrentActivityWaitingSet.length == 0 ) &&
( this.aCurrentActivityReinsertSet.length == 0 ) );
};

ActivityQueue.prototype.clear = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.clear invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dequeued();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dequeued();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.endAll = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.endAll invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].end();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].end();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.getTimer = function()
{
return this.aTimer;
};

ActivityQueue.prototype.size = function()
{
return ( this.aCurrentActivityWaitingSet.length +
this.aCurrentActivityReinsertSet.length +
this.aDequeuedActivitySet.length );
};


function ElapsedTime( aTimeBase )
{
this.aTimeBase = aTimeBase;
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
}


ElapsedTime.prototype.getTimeBase = function()
{
return this.aTimeBase;
};

ElapsedTime.prototype.reset = function()
{
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
};

ElapsedTime.prototype.getElapsedTime = function()
{
this.nLastQueriedTime = this.getElapsedTimeImpl();
return this.nLastQueriedTime;
};

ElapsedTime.prototype.pauseTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInPauseMode = true;
};

ElapsedTime.prototype.continueTimer = function()
{
this.bInPauseMode = false;

var nPauseDuration = this.getElapsedTimeImpl() - this.nFrozenTime;

this.nStartTime += nPauseDuration;
};

ElapsedTime.prototype.adjustTimer = function( nOffset, bLimitToLastQueriedTime )
{
if( bLimitToLastQueriedTime == undefined )
bLimitToLastQueriedTime = true;

this.nStartTime -= nOffset;

if( this.bInHoldMode || this.bInPauseMode )
this.nFrozenTime += nOffset;
};

ElapsedTime.prototype.holdTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInHoldMode = true;
};

ElapsedTime.prototype.releaseTimer = function()
{
this.bInHoldMode = false;
};

ElapsedTime.prototype.getSystemTime = function()
{
return ( getCurrentSystemTime() / 1000.0 );
};

ElapsedTime.prototype.getCurrentTime = function()
{
var nCurrentTime;
if ( !this.aTimeBase )
{
nCurrentTime = this.getSystemTime();
}
else
{
nCurrentTime = this.aTimeBase.getElapsedTimeImpl();
}

assert( ( typeof( nCurrentTime ) === typeof( 0 ) ) && isFinite( nCurrentTime ),
'ElapsedTime.getCurrentTime: assertion failed: nCurrentTime == ' + nCurrentTime );


return nCurrentTime;
};

ElapsedTime.prototype.getElapsedTimeImpl = function()
{
if( this.bInHoldMode || this.bInPauseMode )
{
return this.nFrozenTime;
}

var nCurTime = this.getCurrentTime();
return ( nCurTime - this.nStartTime );
};


/*****
* @libreofficeend
*
* Several parts of the above code are the result of the porting,
* started on August 2011, of the C++ code included in the source files
* placed under the folder '/slideshow/source' and subfolders.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/

]]>
 </script>
</svg>